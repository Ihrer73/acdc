// Generated by gencpp from file definitions/ASN_bitstring.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_ASN_BITSTRING_H
#define DEFINITIONS_MESSAGE_ASN_BITSTRING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct ASN_bitstring_
{
  typedef ASN_bitstring_<ContainerAllocator> Type;

  ASN_bitstring_()
    : buf()
    , bits_unused(0)  {
    }
  ASN_bitstring_(const ContainerAllocator& _alloc)
    : buf(_alloc)
    , bits_unused(0)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _buf_type;
  _buf_type buf;

   typedef uint8_t _bits_unused_type;
  _bits_unused_type bits_unused;





  typedef boost::shared_ptr< ::definitions::ASN_bitstring_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::ASN_bitstring_<ContainerAllocator> const> ConstPtr;

}; // struct ASN_bitstring_

typedef ::definitions::ASN_bitstring_<std::allocator<void> > ASN_bitstring;

typedef boost::shared_ptr< ::definitions::ASN_bitstring > ASN_bitstringPtr;
typedef boost::shared_ptr< ::definitions::ASN_bitstring const> ASN_bitstringConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::ASN_bitstring_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::ASN_bitstring_<ContainerAllocator1> & lhs, const ::definitions::ASN_bitstring_<ContainerAllocator2> & rhs)
{
  return lhs.buf == rhs.buf &&
    lhs.bits_unused == rhs.bits_unused;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::ASN_bitstring_<ContainerAllocator1> & lhs, const ::definitions::ASN_bitstring_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::ASN_bitstring_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::ASN_bitstring_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::ASN_bitstring_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::ASN_bitstring_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::ASN_bitstring_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::ASN_bitstring_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::ASN_bitstring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "379c07cd614f318fd98b80c304ce3bf3";
  }

  static const char* value(const ::definitions::ASN_bitstring_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x379c07cd614f318fULL;
  static const uint64_t static_value2 = 0xd98b80c304ce3bf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::ASN_bitstring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/ASN_bitstring";
  }

  static const char* value(const ::definitions::ASN_bitstring_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::ASN_bitstring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] buf\n"
"uint8 bits_unused\n"
;
  }

  static const char* value(const ::definitions::ASN_bitstring_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::ASN_bitstring_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.buf);
      stream.next(m.bits_unused);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ASN_bitstring_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::ASN_bitstring_<ContainerAllocator>& v)
  {
    s << indent << "buf[]" << std::endl;
    for (size_t i = 0; i < v.buf.size(); ++i)
    {
      s << indent << "  buf[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buf[i]);
    }
    s << indent << "bits_unused: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bits_unused);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_ASN_BITSTRING_H
