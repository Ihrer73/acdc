// Generated by gencpp from file definitions/IkaDetection.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_IKADETECTION_H
#define DEFINITIONS_MESSAGE_IKADETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct IkaDetection_
{
  typedef IkaDetection_<ContainerAllocator> Type;

  IkaDetection_()
    : bStatus(false)
    , iValidLevel(0)
    , fRangeRate(0.0)
    , fRange(0.0)
    , fAngle(0.0)
    , fAmplitude(0.0)  {
    }
  IkaDetection_(const ContainerAllocator& _alloc)
    : bStatus(false)
    , iValidLevel(0)
    , fRangeRate(0.0)
    , fRange(0.0)
    , fAngle(0.0)
    , fAmplitude(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _bStatus_type;
  _bStatus_type bStatus;

   typedef uint8_t _iValidLevel_type;
  _iValidLevel_type iValidLevel;

   typedef double _fRangeRate_type;
  _fRangeRate_type fRangeRate;

   typedef double _fRange_type;
  _fRange_type fRange;

   typedef double _fAngle_type;
  _fAngle_type fAngle;

   typedef double _fAmplitude_type;
  _fAmplitude_type fAmplitude;





  typedef boost::shared_ptr< ::definitions::IkaDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::IkaDetection_<ContainerAllocator> const> ConstPtr;

}; // struct IkaDetection_

typedef ::definitions::IkaDetection_<std::allocator<void> > IkaDetection;

typedef boost::shared_ptr< ::definitions::IkaDetection > IkaDetectionPtr;
typedef boost::shared_ptr< ::definitions::IkaDetection const> IkaDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::IkaDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::IkaDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::IkaDetection_<ContainerAllocator1> & lhs, const ::definitions::IkaDetection_<ContainerAllocator2> & rhs)
{
  return lhs.bStatus == rhs.bStatus &&
    lhs.iValidLevel == rhs.iValidLevel &&
    lhs.fRangeRate == rhs.fRangeRate &&
    lhs.fRange == rhs.fRange &&
    lhs.fAngle == rhs.fAngle &&
    lhs.fAmplitude == rhs.fAmplitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::IkaDetection_<ContainerAllocator1> & lhs, const ::definitions::IkaDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::IkaDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6d877c92ed2f5d74a16750af0b34e6f";
  }

  static const char* value(const ::definitions::IkaDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6d877c92ed2f5d7ULL;
  static const uint64_t static_value2 = 0x4a16750af0b34e6fULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::IkaDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/IkaDetection";
  }

  static const char* value(const ::definitions::IkaDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::IkaDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Meta information\n"
"bool bStatus\n"
"uint8 iValidLevel\n"
"\n"
"# Actually information\n"
"float64 fRangeRate\n"
"float64 fRange\n"
"float64 fAngle\n"
"float64 fAmplitude\n"
;
  }

  static const char* value(const ::definitions::IkaDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::IkaDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bStatus);
      stream.next(m.iValidLevel);
      stream.next(m.fRangeRate);
      stream.next(m.fRange);
      stream.next(m.fAngle);
      stream.next(m.fAmplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkaDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::IkaDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::IkaDetection_<ContainerAllocator>& v)
  {
    s << indent << "bStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bStatus);
    s << indent << "iValidLevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iValidLevel);
    s << indent << "fRangeRate: ";
    Printer<double>::stream(s, indent + "  ", v.fRangeRate);
    s << indent << "fRange: ";
    Printer<double>::stream(s, indent + "  ", v.fRange);
    s << indent << "fAngle: ";
    Printer<double>::stream(s, indent + "  ", v.fAngle);
    s << indent << "fAmplitude: ";
    Printer<double>::stream(s, indent + "  ", v.fAmplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_IKADETECTION_H
