// Generated by gencpp from file definitions/IkaDetectionList.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_IKADETECTIONLIST_H
#define DEFINITIONS_MESSAGE_IKADETECTIONLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <definitions/IkaDetection.h>

namespace definitions
{
template <class ContainerAllocator>
struct IkaDetectionList_
{
  typedef IkaDetectionList_<ContainerAllocator> Type;

  IkaDetectionList_()
    : header()
    , IdSource(0)
    , IdInternal(0)
    , detections()  {
    }
  IkaDetectionList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , IdSource(0)
    , IdInternal(0)
    , detections(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _IdSource_type;
  _IdSource_type IdSource;

   typedef uint8_t _IdInternal_type;
  _IdInternal_type IdInternal;

   typedef std::vector< ::definitions::IkaDetection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::IkaDetection_<ContainerAllocator> >::other >  _detections_type;
  _detections_type detections;





  typedef boost::shared_ptr< ::definitions::IkaDetectionList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::IkaDetectionList_<ContainerAllocator> const> ConstPtr;

}; // struct IkaDetectionList_

typedef ::definitions::IkaDetectionList_<std::allocator<void> > IkaDetectionList;

typedef boost::shared_ptr< ::definitions::IkaDetectionList > IkaDetectionListPtr;
typedef boost::shared_ptr< ::definitions::IkaDetectionList const> IkaDetectionListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::IkaDetectionList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::IkaDetectionList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::IkaDetectionList_<ContainerAllocator1> & lhs, const ::definitions::IkaDetectionList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.IdSource == rhs.IdSource &&
    lhs.IdInternal == rhs.IdInternal &&
    lhs.detections == rhs.detections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::IkaDetectionList_<ContainerAllocator1> & lhs, const ::definitions::IkaDetectionList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaDetectionList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaDetectionList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaDetectionList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaDetectionList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaDetectionList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaDetectionList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::IkaDetectionList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "495172ec47a1c7e796176cbcb37b135b";
  }

  static const char* value(const ::definitions::IkaDetectionList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x495172ec47a1c7e7ULL;
  static const uint64_t static_value2 = 0x96176cbcb37b135bULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::IkaDetectionList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/IkaDetectionList";
  }

  static const char* value(const ::definitions::IkaDetectionList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::IkaDetectionList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# List meta information\n"
"uint8 IdSource  #see definitions/utility/sensor_definitions.h for enum of Sensors\n"
"uint8 IdInternal\n"
"\n"
"# Actually detections\n"
"IkaDetection[] detections\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: definitions/IkaDetection\n"
"# Meta information\n"
"bool bStatus\n"
"uint8 iValidLevel\n"
"\n"
"# Actually information\n"
"float64 fRangeRate\n"
"float64 fRange\n"
"float64 fAngle\n"
"float64 fAmplitude\n"
;
  }

  static const char* value(const ::definitions::IkaDetectionList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::IkaDetectionList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.IdSource);
      stream.next(m.IdInternal);
      stream.next(m.detections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkaDetectionList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::IkaDetectionList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::IkaDetectionList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "IdSource: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IdSource);
    s << indent << "IdInternal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IdInternal);
    s << indent << "detections[]" << std::endl;
    for (size_t i = 0; i < v.detections.size(); ++i)
    {
      s << indent << "  detections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::IkaDetection_<ContainerAllocator> >::stream(s, indent + "    ", v.detections[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_IKADETECTIONLIST_H
