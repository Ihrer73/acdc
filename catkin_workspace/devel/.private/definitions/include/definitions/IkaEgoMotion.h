// Generated by gencpp from file definitions/IkaEgoMotion.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_IKAEGOMOTION_H
#define DEFINITIONS_MESSAGE_IKAEGOMOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace definitions
{
template <class ContainerAllocator>
struct IkaEgoMotion_
{
  typedef IkaEgoMotion_<ContainerAllocator> Type;

  IkaEgoMotion_()
    : header()
    , fSteeringAngle(0.0)
    , fSteeringAngleRate(0.0)
    , fVelocity(0.0)
    , fVelocityFR(0.0)
    , fVelocityFL(0.0)
    , fVelocityRR(0.0)
    , fVelocityRL(0.0)
    , fAccelerationLateral(0.0)
    , fAccelerationLongitudinal(0.0)
    , fYawRate(0.0)
    , fPitch(0.0)
    , fTrackCurvature(0.0)
    , nMovingDir(0.0)
    , bStandStill(false)  {
    }
  IkaEgoMotion_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fSteeringAngle(0.0)
    , fSteeringAngleRate(0.0)
    , fVelocity(0.0)
    , fVelocityFR(0.0)
    , fVelocityFL(0.0)
    , fVelocityRR(0.0)
    , fVelocityRL(0.0)
    , fAccelerationLateral(0.0)
    , fAccelerationLongitudinal(0.0)
    , fYawRate(0.0)
    , fPitch(0.0)
    , fTrackCurvature(0.0)
    , nMovingDir(0.0)
    , bStandStill(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _fSteeringAngle_type;
  _fSteeringAngle_type fSteeringAngle;

   typedef float _fSteeringAngleRate_type;
  _fSteeringAngleRate_type fSteeringAngleRate;

   typedef float _fVelocity_type;
  _fVelocity_type fVelocity;

   typedef float _fVelocityFR_type;
  _fVelocityFR_type fVelocityFR;

   typedef float _fVelocityFL_type;
  _fVelocityFL_type fVelocityFL;

   typedef float _fVelocityRR_type;
  _fVelocityRR_type fVelocityRR;

   typedef float _fVelocityRL_type;
  _fVelocityRL_type fVelocityRL;

   typedef float _fAccelerationLateral_type;
  _fAccelerationLateral_type fAccelerationLateral;

   typedef float _fAccelerationLongitudinal_type;
  _fAccelerationLongitudinal_type fAccelerationLongitudinal;

   typedef float _fYawRate_type;
  _fYawRate_type fYawRate;

   typedef float _fPitch_type;
  _fPitch_type fPitch;

   typedef float _fTrackCurvature_type;
  _fTrackCurvature_type fTrackCurvature;

   typedef float _nMovingDir_type;
  _nMovingDir_type nMovingDir;

   typedef uint8_t _bStandStill_type;
  _bStandStill_type bStandStill;





  typedef boost::shared_ptr< ::definitions::IkaEgoMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::IkaEgoMotion_<ContainerAllocator> const> ConstPtr;

}; // struct IkaEgoMotion_

typedef ::definitions::IkaEgoMotion_<std::allocator<void> > IkaEgoMotion;

typedef boost::shared_ptr< ::definitions::IkaEgoMotion > IkaEgoMotionPtr;
typedef boost::shared_ptr< ::definitions::IkaEgoMotion const> IkaEgoMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::IkaEgoMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::IkaEgoMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::IkaEgoMotion_<ContainerAllocator1> & lhs, const ::definitions::IkaEgoMotion_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fSteeringAngle == rhs.fSteeringAngle &&
    lhs.fSteeringAngleRate == rhs.fSteeringAngleRate &&
    lhs.fVelocity == rhs.fVelocity &&
    lhs.fVelocityFR == rhs.fVelocityFR &&
    lhs.fVelocityFL == rhs.fVelocityFL &&
    lhs.fVelocityRR == rhs.fVelocityRR &&
    lhs.fVelocityRL == rhs.fVelocityRL &&
    lhs.fAccelerationLateral == rhs.fAccelerationLateral &&
    lhs.fAccelerationLongitudinal == rhs.fAccelerationLongitudinal &&
    lhs.fYawRate == rhs.fYawRate &&
    lhs.fPitch == rhs.fPitch &&
    lhs.fTrackCurvature == rhs.fTrackCurvature &&
    lhs.nMovingDir == rhs.nMovingDir &&
    lhs.bStandStill == rhs.bStandStill;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::IkaEgoMotion_<ContainerAllocator1> & lhs, const ::definitions::IkaEgoMotion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaEgoMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaEgoMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaEgoMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaEgoMotion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaEgoMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaEgoMotion_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::IkaEgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0618c9f9aa211f416eed80f5aa9a953";
  }

  static const char* value(const ::definitions::IkaEgoMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0618c9f9aa211f4ULL;
  static const uint64_t static_value2 = 0x16eed80f5aa9a953ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::IkaEgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/IkaEgoMotion";
  }

  static const char* value(const ::definitions::IkaEgoMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::IkaEgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"#Vehicle motion variables\n"
"float32 fSteeringAngle                #[rad] Single-Track_Steering-Angle         \n"
"float32 fSteeringAngleRate            ##[deg/s]                                   \n"
"float32 fVelocity                     #[m/s] Velocity mean, signed               \n"
"float32 fVelocityFR                   #[m/s] Velocity FR, signed                 \n"
"float32 fVelocityFL                   #[m/s] Velocity FL, signed                 \n"
"float32 fVelocityRR                   #[m/s] Velocity RR, signed                 \n"
"float32 fVelocityRL                   #[m/s] Velocity RL, signed                 \n"
"float32 fAccelerationLateral          #[m/s^2]                                    \n"
"float32 fAccelerationLongitudinal     #[m/s^2]                                    \n"
"float32 fYawRate                      #[rad/s]                                   \n"
"float32 fPitch                        #[%]                                      \n"
"float32 fTrackCurvature               #[1/m]                                     \n"
"float32 nMovingDir                    #0: Standing, 1: Forward, -1 Backward\n"
"bool bStandStill\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::definitions::IkaEgoMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::IkaEgoMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fSteeringAngle);
      stream.next(m.fSteeringAngleRate);
      stream.next(m.fVelocity);
      stream.next(m.fVelocityFR);
      stream.next(m.fVelocityFL);
      stream.next(m.fVelocityRR);
      stream.next(m.fVelocityRL);
      stream.next(m.fAccelerationLateral);
      stream.next(m.fAccelerationLongitudinal);
      stream.next(m.fYawRate);
      stream.next(m.fPitch);
      stream.next(m.fTrackCurvature);
      stream.next(m.nMovingDir);
      stream.next(m.bStandStill);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkaEgoMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::IkaEgoMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::IkaEgoMotion_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fSteeringAngle: ";
    Printer<float>::stream(s, indent + "  ", v.fSteeringAngle);
    s << indent << "fSteeringAngleRate: ";
    Printer<float>::stream(s, indent + "  ", v.fSteeringAngleRate);
    s << indent << "fVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.fVelocity);
    s << indent << "fVelocityFR: ";
    Printer<float>::stream(s, indent + "  ", v.fVelocityFR);
    s << indent << "fVelocityFL: ";
    Printer<float>::stream(s, indent + "  ", v.fVelocityFL);
    s << indent << "fVelocityRR: ";
    Printer<float>::stream(s, indent + "  ", v.fVelocityRR);
    s << indent << "fVelocityRL: ";
    Printer<float>::stream(s, indent + "  ", v.fVelocityRL);
    s << indent << "fAccelerationLateral: ";
    Printer<float>::stream(s, indent + "  ", v.fAccelerationLateral);
    s << indent << "fAccelerationLongitudinal: ";
    Printer<float>::stream(s, indent + "  ", v.fAccelerationLongitudinal);
    s << indent << "fYawRate: ";
    Printer<float>::stream(s, indent + "  ", v.fYawRate);
    s << indent << "fPitch: ";
    Printer<float>::stream(s, indent + "  ", v.fPitch);
    s << indent << "fTrackCurvature: ";
    Printer<float>::stream(s, indent + "  ", v.fTrackCurvature);
    s << indent << "nMovingDir: ";
    Printer<float>::stream(s, indent + "  ", v.nMovingDir);
    s << indent << "bStandStill: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bStandStill);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_IKAEGOMOTION_H
