// Generated by gencpp from file definitions/IkaObject.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_IKAOBJECT_H
#define DEFINITIONS_MESSAGE_IKAOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <definitions/IkaSensorStamp.h>

namespace definitions
{
template <class ContainerAllocator>
struct IkaObject_
{
  typedef IkaObject_<ContainerAllocator> Type;

  IkaObject_()
    : header()
    , IdMotionModel(0)
    , fMean()
    , fCovariance()
    , fRelVelX(0.0)
    , fRelVelY(0.0)
    , fRelAccX(0.0)
    , fRelAccY(0.0)
    , RefLocation(0)
    , fRefX(0.0)
    , fRefY(0.0)
    , IdInternal(0)
    , IdLane(0)
    , IdType(0)
    , fClassProbability()
    , fExistenceProbability(0.0)
    , IdExternal(0)
    , measHist()
    , birthStamp()
    , bObjectValid(false)
    , bObjectNew(false)
    , bObjectMeasured(false)  {
    }
  IkaObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , IdMotionModel(0)
    , fMean(_alloc)
    , fCovariance(_alloc)
    , fRelVelX(0.0)
    , fRelVelY(0.0)
    , fRelAccX(0.0)
    , fRelAccY(0.0)
    , RefLocation(0)
    , fRefX(0.0)
    , fRefY(0.0)
    , IdInternal(0)
    , IdLane(0)
    , IdType(0)
    , fClassProbability(_alloc)
    , fExistenceProbability(0.0)
    , IdExternal(0)
    , measHist(_alloc)
    , birthStamp()
    , bObjectValid(false)
    , bObjectNew(false)
    , bObjectMeasured(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _IdMotionModel_type;
  _IdMotionModel_type IdMotionModel;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fMean_type;
  _fMean_type fMean;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fCovariance_type;
  _fCovariance_type fCovariance;

   typedef float _fRelVelX_type;
  _fRelVelX_type fRelVelX;

   typedef float _fRelVelY_type;
  _fRelVelY_type fRelVelY;

   typedef float _fRelAccX_type;
  _fRelAccX_type fRelAccX;

   typedef float _fRelAccY_type;
  _fRelAccY_type fRelAccY;

   typedef uint8_t _RefLocation_type;
  _RefLocation_type RefLocation;

   typedef float _fRefX_type;
  _fRefX_type fRefX;

   typedef float _fRefY_type;
  _fRefY_type fRefY;

   typedef uint16_t _IdInternal_type;
  _IdInternal_type IdInternal;

   typedef int16_t _IdLane_type;
  _IdLane_type IdLane;

   typedef uint16_t _IdType_type;
  _IdType_type IdType;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fClassProbability_type;
  _fClassProbability_type fClassProbability;

   typedef float _fExistenceProbability_type;
  _fExistenceProbability_type fExistenceProbability;

   typedef uint16_t _IdExternal_type;
  _IdExternal_type IdExternal;

   typedef std::vector< ::definitions::IkaSensorStamp_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::IkaSensorStamp_<ContainerAllocator> >::other >  _measHist_type;
  _measHist_type measHist;

   typedef ros::Time _birthStamp_type;
  _birthStamp_type birthStamp;

   typedef uint8_t _bObjectValid_type;
  _bObjectValid_type bObjectValid;

   typedef uint8_t _bObjectNew_type;
  _bObjectNew_type bObjectNew;

   typedef uint8_t _bObjectMeasured_type;
  _bObjectMeasured_type bObjectMeasured;





  typedef boost::shared_ptr< ::definitions::IkaObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::IkaObject_<ContainerAllocator> const> ConstPtr;

}; // struct IkaObject_

typedef ::definitions::IkaObject_<std::allocator<void> > IkaObject;

typedef boost::shared_ptr< ::definitions::IkaObject > IkaObjectPtr;
typedef boost::shared_ptr< ::definitions::IkaObject const> IkaObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::IkaObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::IkaObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::IkaObject_<ContainerAllocator1> & lhs, const ::definitions::IkaObject_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.IdMotionModel == rhs.IdMotionModel &&
    lhs.fMean == rhs.fMean &&
    lhs.fCovariance == rhs.fCovariance &&
    lhs.fRelVelX == rhs.fRelVelX &&
    lhs.fRelVelY == rhs.fRelVelY &&
    lhs.fRelAccX == rhs.fRelAccX &&
    lhs.fRelAccY == rhs.fRelAccY &&
    lhs.RefLocation == rhs.RefLocation &&
    lhs.fRefX == rhs.fRefX &&
    lhs.fRefY == rhs.fRefY &&
    lhs.IdInternal == rhs.IdInternal &&
    lhs.IdLane == rhs.IdLane &&
    lhs.IdType == rhs.IdType &&
    lhs.fClassProbability == rhs.fClassProbability &&
    lhs.fExistenceProbability == rhs.fExistenceProbability &&
    lhs.IdExternal == rhs.IdExternal &&
    lhs.measHist == rhs.measHist &&
    lhs.birthStamp == rhs.birthStamp &&
    lhs.bObjectValid == rhs.bObjectValid &&
    lhs.bObjectNew == rhs.bObjectNew &&
    lhs.bObjectMeasured == rhs.bObjectMeasured;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::IkaObject_<ContainerAllocator1> & lhs, const ::definitions::IkaObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::IkaObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24431825d49834ab804cd1c3932b32b4";
  }

  static const char* value(const ::definitions::IkaObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24431825d49834abULL;
  static const uint64_t static_value2 = 0x804cd1c3932b32b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::IkaObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/IkaObject";
  }

  static const char* value(const ::definitions::IkaObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::IkaObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# Motion Model Attributes\n"
"uint8 IdMotionModel				 # Motionmodel type 0=UNKNOWN; 1=CV; 2=CA; 3=CTRV; 4=CTRA\n"
"float32[] fMean                  # Statevector, containing attributes depend on chosen motion model\n"
"float32[] fCovariance            # Covariance-Matrix, containing attributes depend on chosen motion model\n"
"\n"
"# additional relative properties\n"
"# reference is moving base_link instead of zero velocity base_link\n"
"float32 fRelVelX\n"
"float32 fRelVelY\n"
"float32 fRelAccX\n"
"float32 fRelAccY			\n"
"\n"
"# Reference Point\n"
"uint8 RefLocation				# Sensor's object reference location\n"
"float32 fRefX					# X-Position of the reference point\n"
"float32 fRefY					# Y-Position of the reference point\n"
"\n"
"# Object Meta Data\n"
"uint16 IdInternal               # Internal ID of the object inside the sensor.\n"
"int16 IdLane                    # Id of the lane the car is driving on. usually not used.\n"
"uint16 IdType                   # Type of the detected object.\n"
"float32[] fClassProbability		# Vector of class-wise probabilities [0..1] sum of all entries is always 1\n"
"float32 fExistenceProbability   # [0..1]\n"
"\n"
"# Measurement Meta Data\n"
"uint16 IdExternal               # Source ID of the sensor.\n"
"IkaSensorStamp[] measHist       # History of measurements of this object.\n"
"time birthStamp                 # ROS time stamp of first occurrence of object\n"
"bool bObjectValid               # true if object contains any relevant information. false for gaps in objects vector.\n"
"bool bObjectNew                 # true if object got measured for the first time in the current time stamp.\n"
"bool bObjectMeasured            # true if object is being measured by a sensor in the current time stamp.\n"
"\n"
"#for enum types see definitions/include/definitions/utility/object_definitions.h\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: definitions/IkaSensorStamp\n"
"uint16 IdSensor                 # Source ID of the measuring sensor (see enums)\n"
"uint16 IdObjectWithinSensor     # IdInternal of the measured object within the sensor's object list\n"
"time measuredStamp              # ROS time stamp of when the sensor measured the object\n"
"\n"
"#for enum types see definitions/utility/object_definitions.h\n"
;
  }

  static const char* value(const ::definitions::IkaObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::IkaObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.IdMotionModel);
      stream.next(m.fMean);
      stream.next(m.fCovariance);
      stream.next(m.fRelVelX);
      stream.next(m.fRelVelY);
      stream.next(m.fRelAccX);
      stream.next(m.fRelAccY);
      stream.next(m.RefLocation);
      stream.next(m.fRefX);
      stream.next(m.fRefY);
      stream.next(m.IdInternal);
      stream.next(m.IdLane);
      stream.next(m.IdType);
      stream.next(m.fClassProbability);
      stream.next(m.fExistenceProbability);
      stream.next(m.IdExternal);
      stream.next(m.measHist);
      stream.next(m.birthStamp);
      stream.next(m.bObjectValid);
      stream.next(m.bObjectNew);
      stream.next(m.bObjectMeasured);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkaObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::IkaObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::IkaObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "IdMotionModel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IdMotionModel);
    s << indent << "fMean[]" << std::endl;
    for (size_t i = 0; i < v.fMean.size(); ++i)
    {
      s << indent << "  fMean[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fMean[i]);
    }
    s << indent << "fCovariance[]" << std::endl;
    for (size_t i = 0; i < v.fCovariance.size(); ++i)
    {
      s << indent << "  fCovariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fCovariance[i]);
    }
    s << indent << "fRelVelX: ";
    Printer<float>::stream(s, indent + "  ", v.fRelVelX);
    s << indent << "fRelVelY: ";
    Printer<float>::stream(s, indent + "  ", v.fRelVelY);
    s << indent << "fRelAccX: ";
    Printer<float>::stream(s, indent + "  ", v.fRelAccX);
    s << indent << "fRelAccY: ";
    Printer<float>::stream(s, indent + "  ", v.fRelAccY);
    s << indent << "RefLocation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RefLocation);
    s << indent << "fRefX: ";
    Printer<float>::stream(s, indent + "  ", v.fRefX);
    s << indent << "fRefY: ";
    Printer<float>::stream(s, indent + "  ", v.fRefY);
    s << indent << "IdInternal: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.IdInternal);
    s << indent << "IdLane: ";
    Printer<int16_t>::stream(s, indent + "  ", v.IdLane);
    s << indent << "IdType: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.IdType);
    s << indent << "fClassProbability[]" << std::endl;
    for (size_t i = 0; i < v.fClassProbability.size(); ++i)
    {
      s << indent << "  fClassProbability[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fClassProbability[i]);
    }
    s << indent << "fExistenceProbability: ";
    Printer<float>::stream(s, indent + "  ", v.fExistenceProbability);
    s << indent << "IdExternal: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.IdExternal);
    s << indent << "measHist[]" << std::endl;
    for (size_t i = 0; i < v.measHist.size(); ++i)
    {
      s << indent << "  measHist[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::IkaSensorStamp_<ContainerAllocator> >::stream(s, indent + "    ", v.measHist[i]);
    }
    s << indent << "birthStamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.birthStamp);
    s << indent << "bObjectValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bObjectValid);
    s << indent << "bObjectNew: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bObjectNew);
    s << indent << "bObjectMeasured: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bObjectMeasured);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_IKAOBJECT_H
