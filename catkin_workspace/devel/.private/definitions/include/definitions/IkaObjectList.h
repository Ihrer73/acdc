// Generated by gencpp from file definitions/IkaObjectList.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_IKAOBJECTLIST_H
#define DEFINITIONS_MESSAGE_IKAOBJECTLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <definitions/IkaObject.h>

namespace definitions
{
template <class ContainerAllocator>
struct IkaObjectList_
{
  typedef IkaObjectList_<ContainerAllocator> Type;

  IkaObjectList_()
    : header()
    , IdSource(0)
    , objects()  {
    }
  IkaObjectList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , IdSource(0)
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _IdSource_type;
  _IdSource_type IdSource;

   typedef std::vector< ::definitions::IkaObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::IkaObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::definitions::IkaObjectList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::IkaObjectList_<ContainerAllocator> const> ConstPtr;

}; // struct IkaObjectList_

typedef ::definitions::IkaObjectList_<std::allocator<void> > IkaObjectList;

typedef boost::shared_ptr< ::definitions::IkaObjectList > IkaObjectListPtr;
typedef boost::shared_ptr< ::definitions::IkaObjectList const> IkaObjectListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::IkaObjectList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::IkaObjectList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::IkaObjectList_<ContainerAllocator1> & lhs, const ::definitions::IkaObjectList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.IdSource == rhs.IdSource &&
    lhs.objects == rhs.objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::IkaObjectList_<ContainerAllocator1> & lhs, const ::definitions::IkaObjectList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaObjectList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaObjectList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaObjectList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::IkaObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a997953d24fa0f3e837de98bfab1882a";
  }

  static const char* value(const ::definitions::IkaObjectList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa997953d24fa0f3eULL;
  static const uint64_t static_value2 = 0x837de98bfab1882aULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::IkaObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/IkaObjectList";
  }

  static const char* value(const ::definitions::IkaObjectList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::IkaObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# List meta information\n"
"uint8 IdSource #see definitions/utility/object_definitions.h for enum of Sensors\n"
"\n"
"# Actually objects\n"
"IkaObject[] objects\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: definitions/IkaObject\n"
"std_msgs/Header header\n"
"\n"
"# Motion Model Attributes\n"
"uint8 IdMotionModel				 # Motionmodel type 0=UNKNOWN; 1=CV; 2=CA; 3=CTRV; 4=CTRA\n"
"float32[] fMean                  # Statevector, containing attributes depend on chosen motion model\n"
"float32[] fCovariance            # Covariance-Matrix, containing attributes depend on chosen motion model\n"
"\n"
"# additional relative properties\n"
"# reference is moving base_link instead of zero velocity base_link\n"
"float32 fRelVelX\n"
"float32 fRelVelY\n"
"float32 fRelAccX\n"
"float32 fRelAccY			\n"
"\n"
"# Reference Point\n"
"uint8 RefLocation				# Sensor's object reference location\n"
"float32 fRefX					# X-Position of the reference point\n"
"float32 fRefY					# Y-Position of the reference point\n"
"\n"
"# Object Meta Data\n"
"uint16 IdInternal               # Internal ID of the object inside the sensor.\n"
"int16 IdLane                    # Id of the lane the car is driving on. usually not used.\n"
"uint16 IdType                   # Type of the detected object.\n"
"float32[] fClassProbability		# Vector of class-wise probabilities [0..1] sum of all entries is always 1\n"
"float32 fExistenceProbability   # [0..1]\n"
"\n"
"# Measurement Meta Data\n"
"uint16 IdExternal               # Source ID of the sensor.\n"
"IkaSensorStamp[] measHist       # History of measurements of this object.\n"
"time birthStamp                 # ROS time stamp of first occurrence of object\n"
"bool bObjectValid               # true if object contains any relevant information. false for gaps in objects vector.\n"
"bool bObjectNew                 # true if object got measured for the first time in the current time stamp.\n"
"bool bObjectMeasured            # true if object is being measured by a sensor in the current time stamp.\n"
"\n"
"#for enum types see definitions/include/definitions/utility/object_definitions.h\n"
"================================================================================\n"
"MSG: definitions/IkaSensorStamp\n"
"uint16 IdSensor                 # Source ID of the measuring sensor (see enums)\n"
"uint16 IdObjectWithinSensor     # IdInternal of the measured object within the sensor's object list\n"
"time measuredStamp              # ROS time stamp of when the sensor measured the object\n"
"\n"
"#for enum types see definitions/utility/object_definitions.h\n"
;
  }

  static const char* value(const ::definitions::IkaObjectList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::IkaObjectList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.IdSource);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkaObjectList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::IkaObjectList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::IkaObjectList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "IdSource: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IdSource);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::IkaObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_IKAOBJECTLIST_H
