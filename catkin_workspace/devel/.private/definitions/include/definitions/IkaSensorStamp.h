// Generated by gencpp from file definitions/IkaSensorStamp.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_IKASENSORSTAMP_H
#define DEFINITIONS_MESSAGE_IKASENSORSTAMP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct IkaSensorStamp_
{
  typedef IkaSensorStamp_<ContainerAllocator> Type;

  IkaSensorStamp_()
    : IdSensor(0)
    , IdObjectWithinSensor(0)
    , measuredStamp()  {
    }
  IkaSensorStamp_(const ContainerAllocator& _alloc)
    : IdSensor(0)
    , IdObjectWithinSensor(0)
    , measuredStamp()  {
  (void)_alloc;
    }



   typedef uint16_t _IdSensor_type;
  _IdSensor_type IdSensor;

   typedef uint16_t _IdObjectWithinSensor_type;
  _IdObjectWithinSensor_type IdObjectWithinSensor;

   typedef ros::Time _measuredStamp_type;
  _measuredStamp_type measuredStamp;





  typedef boost::shared_ptr< ::definitions::IkaSensorStamp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::IkaSensorStamp_<ContainerAllocator> const> ConstPtr;

}; // struct IkaSensorStamp_

typedef ::definitions::IkaSensorStamp_<std::allocator<void> > IkaSensorStamp;

typedef boost::shared_ptr< ::definitions::IkaSensorStamp > IkaSensorStampPtr;
typedef boost::shared_ptr< ::definitions::IkaSensorStamp const> IkaSensorStampConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::IkaSensorStamp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::IkaSensorStamp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::IkaSensorStamp_<ContainerAllocator1> & lhs, const ::definitions::IkaSensorStamp_<ContainerAllocator2> & rhs)
{
  return lhs.IdSensor == rhs.IdSensor &&
    lhs.IdObjectWithinSensor == rhs.IdObjectWithinSensor &&
    lhs.measuredStamp == rhs.measuredStamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::IkaSensorStamp_<ContainerAllocator1> & lhs, const ::definitions::IkaSensorStamp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaSensorStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaSensorStamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaSensorStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaSensorStamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaSensorStamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaSensorStamp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::IkaSensorStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdf180a59968af80fb045f033c5dfbcf";
  }

  static const char* value(const ::definitions::IkaSensorStamp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdf180a59968af80ULL;
  static const uint64_t static_value2 = 0xfb045f033c5dfbcfULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::IkaSensorStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/IkaSensorStamp";
  }

  static const char* value(const ::definitions::IkaSensorStamp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::IkaSensorStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 IdSensor                 # Source ID of the measuring sensor (see enums)\n"
"uint16 IdObjectWithinSensor     # IdInternal of the measured object within the sensor's object list\n"
"time measuredStamp              # ROS time stamp of when the sensor measured the object\n"
"\n"
"#for enum types see definitions/utility/object_definitions.h\n"
;
  }

  static const char* value(const ::definitions::IkaSensorStamp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::IkaSensorStamp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IdSensor);
      stream.next(m.IdObjectWithinSensor);
      stream.next(m.measuredStamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkaSensorStamp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::IkaSensorStamp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::IkaSensorStamp_<ContainerAllocator>& v)
  {
    s << indent << "IdSensor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.IdSensor);
    s << indent << "IdObjectWithinSensor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.IdObjectWithinSensor);
    s << indent << "measuredStamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.measuredStamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_IKASENSORSTAMP_H
