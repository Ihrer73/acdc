// Generated by gencpp from file definitions/IkaTpTrajectoryInterface.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_IKATPTRAJECTORYINTERFACE_H
#define DEFINITIONS_MESSAGE_IKATPTRAJECTORYINTERFACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct IkaTpTrajectoryInterface_
{
  typedef IkaTpTrajectoryInterface_<ContainerAllocator> Type;

  IkaTpTrajectoryInterface_()
    : TIME()
    , X()
    , Y()
    , THETA()
    , V()
    , A()
    , KAPPA()
    , DKAPPA()
    , S()
    , timestamp(0.0)
    , valid(false)
    , num_Elements(0)
    , sampling_Mode(0)
    , ActivationModeLateral(0)
    , ActivationModeLongitudinal(0)  {
    }
  IkaTpTrajectoryInterface_(const ContainerAllocator& _alloc)
    : TIME(_alloc)
    , X(_alloc)
    , Y(_alloc)
    , THETA(_alloc)
    , V(_alloc)
    , A(_alloc)
    , KAPPA(_alloc)
    , DKAPPA(_alloc)
    , S(_alloc)
    , timestamp(0.0)
    , valid(false)
    , num_Elements(0)
    , sampling_Mode(0)
    , ActivationModeLateral(0)
    , ActivationModeLongitudinal(0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _TIME_type;
  _TIME_type TIME;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _X_type;
  _X_type X;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Y_type;
  _Y_type Y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _THETA_type;
  _THETA_type THETA;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _V_type;
  _V_type V;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _A_type;
  _A_type A;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _KAPPA_type;
  _KAPPA_type KAPPA;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _DKAPPA_type;
  _DKAPPA_type DKAPPA;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _S_type;
  _S_type S;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint16_t _num_Elements_type;
  _num_Elements_type num_Elements;

   typedef uint8_t _sampling_Mode_type;
  _sampling_Mode_type sampling_Mode;

   typedef uint8_t _ActivationModeLateral_type;
  _ActivationModeLateral_type ActivationModeLateral;

   typedef uint8_t _ActivationModeLongitudinal_type;
  _ActivationModeLongitudinal_type ActivationModeLongitudinal;





  typedef boost::shared_ptr< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> const> ConstPtr;

}; // struct IkaTpTrajectoryInterface_

typedef ::definitions::IkaTpTrajectoryInterface_<std::allocator<void> > IkaTpTrajectoryInterface;

typedef boost::shared_ptr< ::definitions::IkaTpTrajectoryInterface > IkaTpTrajectoryInterfacePtr;
typedef boost::shared_ptr< ::definitions::IkaTpTrajectoryInterface const> IkaTpTrajectoryInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator1> & lhs, const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator2> & rhs)
{
  return lhs.TIME == rhs.TIME &&
    lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.THETA == rhs.THETA &&
    lhs.V == rhs.V &&
    lhs.A == rhs.A &&
    lhs.KAPPA == rhs.KAPPA &&
    lhs.DKAPPA == rhs.DKAPPA &&
    lhs.S == rhs.S &&
    lhs.timestamp == rhs.timestamp &&
    lhs.valid == rhs.valid &&
    lhs.num_Elements == rhs.num_Elements &&
    lhs.sampling_Mode == rhs.sampling_Mode &&
    lhs.ActivationModeLateral == rhs.ActivationModeLateral &&
    lhs.ActivationModeLongitudinal == rhs.ActivationModeLongitudinal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator1> & lhs, const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12cf2471b1412feb337a6c1ac22c2f30";
  }

  static const char* value(const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12cf2471b1412febULL;
  static const uint64_t static_value2 = 0x337a6c1ac22c2f30ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/IkaTpTrajectoryInterface";
  }

  static const char* value(const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] TIME\n"
"float64[] X\n"
"float64[] Y\n"
"float64[] THETA\n"
"float64[] V\n"
"float64[] A\n"
"float64[] KAPPA\n"
"float64[] DKAPPA\n"
"float64[] S\n"
"float64      timestamp\n"
"bool 	     valid\n"
"uint16	     num_Elements\n"
"uint8	     sampling_Mode\n"
"uint8	     ActivationModeLateral\n"
"uint8	     ActivationModeLongitudinal\n"
"\n"
;
  }

  static const char* value(const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TIME);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.THETA);
      stream.next(m.V);
      stream.next(m.A);
      stream.next(m.KAPPA);
      stream.next(m.DKAPPA);
      stream.next(m.S);
      stream.next(m.timestamp);
      stream.next(m.valid);
      stream.next(m.num_Elements);
      stream.next(m.sampling_Mode);
      stream.next(m.ActivationModeLateral);
      stream.next(m.ActivationModeLongitudinal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkaTpTrajectoryInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::IkaTpTrajectoryInterface_<ContainerAllocator>& v)
  {
    s << indent << "TIME[]" << std::endl;
    for (size_t i = 0; i < v.TIME.size(); ++i)
    {
      s << indent << "  TIME[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.TIME[i]);
    }
    s << indent << "X[]" << std::endl;
    for (size_t i = 0; i < v.X.size(); ++i)
    {
      s << indent << "  X[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.X[i]);
    }
    s << indent << "Y[]" << std::endl;
    for (size_t i = 0; i < v.Y.size(); ++i)
    {
      s << indent << "  Y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Y[i]);
    }
    s << indent << "THETA[]" << std::endl;
    for (size_t i = 0; i < v.THETA.size(); ++i)
    {
      s << indent << "  THETA[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.THETA[i]);
    }
    s << indent << "V[]" << std::endl;
    for (size_t i = 0; i < v.V.size(); ++i)
    {
      s << indent << "  V[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.V[i]);
    }
    s << indent << "A[]" << std::endl;
    for (size_t i = 0; i < v.A.size(); ++i)
    {
      s << indent << "  A[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.A[i]);
    }
    s << indent << "KAPPA[]" << std::endl;
    for (size_t i = 0; i < v.KAPPA.size(); ++i)
    {
      s << indent << "  KAPPA[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.KAPPA[i]);
    }
    s << indent << "DKAPPA[]" << std::endl;
    for (size_t i = 0; i < v.DKAPPA.size(); ++i)
    {
      s << indent << "  DKAPPA[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.DKAPPA[i]);
    }
    s << indent << "S[]" << std::endl;
    for (size_t i = 0; i < v.S.size(); ++i)
    {
      s << indent << "  S[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.S[i]);
    }
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "num_Elements: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_Elements);
    s << indent << "sampling_Mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sampling_Mode);
    s << indent << "ActivationModeLateral: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ActivationModeLateral);
    s << indent << "ActivationModeLongitudinal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ActivationModeLongitudinal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_IKATPTRAJECTORYINTERFACE_H
