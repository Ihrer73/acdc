// Generated by gencpp from file definitions/v2x_CAM.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_CAM_H
#define DEFINITIONS_MESSAGE_V2X_CAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/v2x_CAM_basic_container.h>
#include <definitions/v2x_CAM_high_freq_container.h>
#include <definitions/v2x_CAM_low_freq_container.h>
#include <definitions/v2x_CAM_special_container.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_CAM_
{
  typedef v2x_CAM_<ContainerAllocator> Type;

  v2x_CAM_()
    : header_protocolVersion(0)
    , header_messageID(0)
    , header_stationID(0)
    , cam_generationDeltaTime(0.0)
    , basic_container()
    , high_freq_container()
    , low_freq_container()
    , special_container()  {
    }
  v2x_CAM_(const ContainerAllocator& _alloc)
    : header_protocolVersion(0)
    , header_messageID(0)
    , header_stationID(0)
    , cam_generationDeltaTime(0.0)
    , basic_container(_alloc)
    , high_freq_container(_alloc)
    , low_freq_container(_alloc)
    , special_container(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _header_protocolVersion_type;
  _header_protocolVersion_type header_protocolVersion;

   typedef uint8_t _header_messageID_type;
  _header_messageID_type header_messageID;

   typedef uint16_t _header_stationID_type;
  _header_stationID_type header_stationID;

   typedef double _cam_generationDeltaTime_type;
  _cam_generationDeltaTime_type cam_generationDeltaTime;

   typedef  ::definitions::v2x_CAM_basic_container_<ContainerAllocator>  _basic_container_type;
  _basic_container_type basic_container;

   typedef  ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator>  _high_freq_container_type;
  _high_freq_container_type high_freq_container;

   typedef  ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator>  _low_freq_container_type;
  _low_freq_container_type low_freq_container;

   typedef  ::definitions::v2x_CAM_special_container_<ContainerAllocator>  _special_container_type;
  _special_container_type special_container;





  typedef boost::shared_ptr< ::definitions::v2x_CAM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_CAM_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_CAM_

typedef ::definitions::v2x_CAM_<std::allocator<void> > v2x_CAM;

typedef boost::shared_ptr< ::definitions::v2x_CAM > v2x_CAMPtr;
typedef boost::shared_ptr< ::definitions::v2x_CAM const> v2x_CAMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_CAM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_CAM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_CAM_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_<ContainerAllocator2> & rhs)
{
  return lhs.header_protocolVersion == rhs.header_protocolVersion &&
    lhs.header_messageID == rhs.header_messageID &&
    lhs.header_stationID == rhs.header_stationID &&
    lhs.cam_generationDeltaTime == rhs.cam_generationDeltaTime &&
    lhs.basic_container == rhs.basic_container &&
    lhs.high_freq_container == rhs.high_freq_container &&
    lhs.low_freq_container == rhs.low_freq_container &&
    lhs.special_container == rhs.special_container;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_CAM_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9cb9df941500a5794770dfa4f074823";
  }

  static const char* value(const ::definitions::v2x_CAM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9cb9df941500a57ULL;
  static const uint64_t static_value2 = 0x94770dfa4f074823ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_CAM";
  }

  static const char* value(const ::definitions::v2x_CAM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# CAM.msg\n"
"#\n"
"# Contains all transmittet cooperative awareness message information\n"
"# Values of data type float64 (aka double) are in si units (but deg is used instead of radiant!)\n"
"#\n"
"\n"
"# ItsPduHeader\n"
"    uint8 header_protocolVersion\n"
"    uint8 header_messageID\n"
"    uint16 header_stationID  # stationID will be overwritten by the asn encoder\n"
"# CoopAwareness\n"
"    float64 cam_generationDeltaTime\n"
"    v2x_CAM_basic_container basic_container         # BasicContainer\n"
"    v2x_CAM_high_freq_container high_freq_container # HighFrequencyContainer\n"
"    v2x_CAM_low_freq_container low_freq_container   # LowFrequencyContainer (OPTIONAL)\n"
"    v2x_CAM_special_container special_container     # SpecialVehicleContainer (OPTIONAL)\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_basic_container\n"
"# BasicContainer\n"
"    uint8 stationType\n"
"    # Reference Position\n"
"        float64 referencePosition_latitude\n"
"        float64 referencePosition_longitude\n"
"        # PosConfidenceEllipse\n"
"            uint16 referencePosition_positionConfidenceEllipse_semiMajorConfidence\n"
"            uint16 referencePosition_positionConfidenceEllipse_semiMinorConfidence\n"
"            uint16 referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue\n"
"        # Altitude\n"
"            int16 referencePosition_altitude_altitudeValue\n"
"            uint8 referencePosition_altitude_altitudeConfidence\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_high_freq_container\n"
"# HighFrequencyContainer\n"
"uint8 containerType\n"
"# BasicVehicleContainerHighFrequency\n"
"    # Heading\n"
"        float64 heading_headingValue\n"
"        uint8 heading_headingConfidence\n"
"    # Speed\n"
"        float64 speed_speedValue\n"
"        uint8 speed_speedConfidence\n"
"    uint8 driveDirection\n"
"    # VehicleLength\n"
"        float64 vehicleLength_vehicleLengthValue\n"
"        uint8 vehicleLength_vehicleLengthConfidenceIndication\n"
"    float64 vehicleWidth\n"
"    # LongitudinalAcceleration\n"
"        int16 longitudinalAcceleration_longitudinalAccelerationValue\n"
"        uint8 longitudinalAcceleration_longitudinalAccelerationConfidence\n"
"    # Curvature\n"
"        int16 curvature_curvatureValue\n"
"        uint8 curvature_curvatureConfidence\n"
"    uint8 curvatureCalculationMode\n"
"    # YawRate\n"
"        int16 yawRate_yawRateValue\n"
"        uint8 yawRate_yawRateConfidence\n"
"    bool accelerationControlPresent\n"
"    ASN_bitstring accelerationControl # Optional, Bitstring Size 7\n"
"    bool lanePositionPresent\n"
"    int8 lanePosition\n"
"    # SteeringWheelAngle\n"
"    bool steeringWheelAnglePresent\n"
"        int16 steeringWheelAngle_steeringWheelAngleValue\n"
"        uint8 steeringWheelAngle_steeringWheelAngleConfidence\n"
"    # LateralAcceleration\n"
"    bool lateralAccelerationPresent\n"
"        int16 lateralAcceleration_lateralAccelerationValue\n"
"        uint8 lateralAcceleration_lateralAccelerationConfidence\n"
"    # VerticalAcceleration\n"
"    bool verticalAccelerationPresent\n"
"        int16    verticalAcceleration_verticalAccelerationValue\n"
"        uint8 verticalAcceleration_verticallAccelerationConfidence\n"
"    bool performanceClassPresent\n"
"    uint8 performanceClass\n"
"    # CenDsrcTollingZone\n"
"    bool cenDsrcTollingZonePresent\n"
"        int32 cenDsrcTollingZone_cenDsrcTollingZoneLatitude\n"
"        int32 cenDsrcTollingZone_cenDsrcTollingZoneLongitude\n"
"        bool cenDsrcTollingZone_cenDsrcTollingZoneIDPresent\n"
"        uint32 cenDsrcTollingZone_cenDsrcTollingZoneID\n"
"# RSUContainerHighFrequency\n"
"    #ProtectedCommunicationZonesRSU\n"
"    bool rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent\n"
"        v2x_CAM_protectedCommunicationZone[] rsuContainerHighFrequency_protectedCommunicationZonesRSU\n"
"================================================================================\n"
"MSG: definitions/ASN_bitstring\n"
"uint8[] buf\n"
"uint8 bits_unused\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_protectedCommunicationZone\n"
"uint8    protectedZoneType\n"
"bool expiryTimePresent\n"
"uint64    expiryTime\n"
"int32    protectedZoneLatitude\n"
"int32    protectedZoneLongitude\n"
"bool protectedZoneRadiusPresent\n"
"uint8    protectedZoneRadius\n"
"uint32    protectedZoneID\n"
"bool protectedZoneIDPresent\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_low_freq_container\n"
"# LowFrequencyContainer (OPTIONAL)\n"
"    #BasicVehicleContainerLowFrequency\n"
"    uint8 containerType # 0 = Absent, 1 = BasicVehicleContainerLowFrequency\n"
"        uint8 vehicleRole\n"
"        ASN_bitstring exteriorLights\n"
"        v2x_CAM_pathPoint[] pathHistory\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_pathPoint\n"
"int32 deltaLatitude\n"
"int32 deltaLongitude\n"
"int16 deltaAltitude\n"
"bool pathDeltaTimePresent\n"
"uint16 pathDeltaTime\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_special_container\n"
"# SpecialVehicleContainer (OPTIONAL)\n"
"uint8 containerType # 0 = Absent, 1 = publicTransportContainer, 2 = ...\n"
"    # PublicTransportContainer\n"
"        bool publicTransportContainer_embarkationStatus\n"
"        # PtActivation (OPTIONAL)\n"
"        bool publicTransportContainer_ptActivationPresent\n"
"            uint8 publicTransportContainer_ptActivation_ptActivationType\n"
"            uint8[] publicTransportContainer_ptActivation_ptActivationData\n"
"    # SpecialTransportContainer\n"
"        ASN_bitstring specialTransportContainer_specialTransportType\n"
"        ASN_bitstring specialTransportContainer_lightBarSirenInUse\n"
"    # DangerousGoodsContainer\n"
"        uint8 dangerousGoodsContainer_dangerousGoodsBasic\n"
"    # RoadWorksContainerBasic\n"
"        bool roadWorksContainerBasic_roadworksSubCauseCodePresent\n"
"        uint8 roadWorksContainerBasic_roadworksSubCauseCode\n"
"        ASN_bitstring roadWorksContainerBasic_lightBarSirenInUse\n"
"        # ClosedLanes\n"
"        bool roadWorksContainerBasic_closedLanesPresent\n"
"            bool roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent\n"
"            uint8 roadWorksContainerBasic_closedLanes_hardShoulderStatus\n"
"            ASN_bitstring roadWorksContainerBasic_closedLanes_drivingLaneStatus\n"
"    # RescueContainer\n"
"        ASN_bitstring rescueContainer_lightBarSirenInUse\n"
"    # EmergencyContainer\n"
"        ASN_bitstring emergencyContainer_lightBarSirenInUse\n"
"        # CauseCode\n"
"        bool emergencyContainer_incidentIndicationPresent\n"
"            uint8 emergencyContainer_incidentIndication_causeCode\n"
"            uint8 emergencyContainer_incidentIndication_subCauseCode\n"
"        bool emergencyContainer_emergencyPriorityPresent\n"
"        ASN_bitstring emergencyContainer_emergencyPriority\n"
"    # SafetyCarContainer\n"
"        ASN_bitstring safetyCarContainer_lightBarSirenInUse\n"
"        # CauseCode\n"
"        bool safetyCarContainer_incidentIndicationPresent\n"
"            uint8 safetyCarContainer_incidentIndication_causeCode\n"
"            uint8 safetyCarContainer_incidentIndication_subCauseCode\n"
"        bool safetyCarContainer_trafficRulePresent\n"
"        uint8 safetyCarContainer_trafficRule\n"
"        bool safetyCarContainer_speedLimitPresent\n"
"        uint8 safetyCarContainer_speedLimit\n"
;
  }

  static const char* value(const ::definitions::v2x_CAM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_CAM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header_protocolVersion);
      stream.next(m.header_messageID);
      stream.next(m.header_stationID);
      stream.next(m.cam_generationDeltaTime);
      stream.next(m.basic_container);
      stream.next(m.high_freq_container);
      stream.next(m.low_freq_container);
      stream.next(m.special_container);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_CAM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_CAM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_CAM_<ContainerAllocator>& v)
  {
    s << indent << "header_protocolVersion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.header_protocolVersion);
    s << indent << "header_messageID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.header_messageID);
    s << indent << "header_stationID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.header_stationID);
    s << indent << "cam_generationDeltaTime: ";
    Printer<double>::stream(s, indent + "  ", v.cam_generationDeltaTime);
    s << indent << "basic_container: ";
    s << std::endl;
    Printer< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >::stream(s, indent + "  ", v.basic_container);
    s << indent << "high_freq_container: ";
    s << std::endl;
    Printer< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >::stream(s, indent + "  ", v.high_freq_container);
    s << indent << "low_freq_container: ";
    s << std::endl;
    Printer< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >::stream(s, indent + "  ", v.low_freq_container);
    s << indent << "special_container: ";
    s << std::endl;
    Printer< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >::stream(s, indent + "  ", v.special_container);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_CAM_H
