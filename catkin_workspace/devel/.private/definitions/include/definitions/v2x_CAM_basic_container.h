// Generated by gencpp from file definitions/v2x_CAM_basic_container.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_CAM_BASIC_CONTAINER_H
#define DEFINITIONS_MESSAGE_V2X_CAM_BASIC_CONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct v2x_CAM_basic_container_
{
  typedef v2x_CAM_basic_container_<ContainerAllocator> Type;

  v2x_CAM_basic_container_()
    : stationType(0)
    , referencePosition_latitude(0.0)
    , referencePosition_longitude(0.0)
    , referencePosition_positionConfidenceEllipse_semiMajorConfidence(0)
    , referencePosition_positionConfidenceEllipse_semiMinorConfidence(0)
    , referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue(0)
    , referencePosition_altitude_altitudeValue(0)
    , referencePosition_altitude_altitudeConfidence(0)  {
    }
  v2x_CAM_basic_container_(const ContainerAllocator& _alloc)
    : stationType(0)
    , referencePosition_latitude(0.0)
    , referencePosition_longitude(0.0)
    , referencePosition_positionConfidenceEllipse_semiMajorConfidence(0)
    , referencePosition_positionConfidenceEllipse_semiMinorConfidence(0)
    , referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue(0)
    , referencePosition_altitude_altitudeValue(0)
    , referencePosition_altitude_altitudeConfidence(0)  {
  (void)_alloc;
    }



   typedef uint8_t _stationType_type;
  _stationType_type stationType;

   typedef double _referencePosition_latitude_type;
  _referencePosition_latitude_type referencePosition_latitude;

   typedef double _referencePosition_longitude_type;
  _referencePosition_longitude_type referencePosition_longitude;

   typedef uint16_t _referencePosition_positionConfidenceEllipse_semiMajorConfidence_type;
  _referencePosition_positionConfidenceEllipse_semiMajorConfidence_type referencePosition_positionConfidenceEllipse_semiMajorConfidence;

   typedef uint16_t _referencePosition_positionConfidenceEllipse_semiMinorConfidence_type;
  _referencePosition_positionConfidenceEllipse_semiMinorConfidence_type referencePosition_positionConfidenceEllipse_semiMinorConfidence;

   typedef uint16_t _referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue_type;
  _referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue_type referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue;

   typedef int16_t _referencePosition_altitude_altitudeValue_type;
  _referencePosition_altitude_altitudeValue_type referencePosition_altitude_altitudeValue;

   typedef uint8_t _referencePosition_altitude_altitudeConfidence_type;
  _referencePosition_altitude_altitudeConfidence_type referencePosition_altitude_altitudeConfidence;





  typedef boost::shared_ptr< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_CAM_basic_container_

typedef ::definitions::v2x_CAM_basic_container_<std::allocator<void> > v2x_CAM_basic_container;

typedef boost::shared_ptr< ::definitions::v2x_CAM_basic_container > v2x_CAM_basic_containerPtr;
typedef boost::shared_ptr< ::definitions::v2x_CAM_basic_container const> v2x_CAM_basic_containerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_CAM_basic_container_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_CAM_basic_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_basic_container_<ContainerAllocator2> & rhs)
{
  return lhs.stationType == rhs.stationType &&
    lhs.referencePosition_latitude == rhs.referencePosition_latitude &&
    lhs.referencePosition_longitude == rhs.referencePosition_longitude &&
    lhs.referencePosition_positionConfidenceEllipse_semiMajorConfidence == rhs.referencePosition_positionConfidenceEllipse_semiMajorConfidence &&
    lhs.referencePosition_positionConfidenceEllipse_semiMinorConfidence == rhs.referencePosition_positionConfidenceEllipse_semiMinorConfidence &&
    lhs.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue == rhs.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue &&
    lhs.referencePosition_altitude_altitudeValue == rhs.referencePosition_altitude_altitudeValue &&
    lhs.referencePosition_altitude_altitudeConfidence == rhs.referencePosition_altitude_altitudeConfidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_CAM_basic_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_basic_container_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7e929886426dcc052caaa0eea30591f";
  }

  static const char* value(const ::definitions::v2x_CAM_basic_container_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7e929886426dcc0ULL;
  static const uint64_t static_value2 = 0x52caaa0eea30591fULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_CAM_basic_container";
  }

  static const char* value(const ::definitions::v2x_CAM_basic_container_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# BasicContainer\n"
"    uint8 stationType\n"
"    # Reference Position\n"
"        float64 referencePosition_latitude\n"
"        float64 referencePosition_longitude\n"
"        # PosConfidenceEllipse\n"
"            uint16 referencePosition_positionConfidenceEllipse_semiMajorConfidence\n"
"            uint16 referencePosition_positionConfidenceEllipse_semiMinorConfidence\n"
"            uint16 referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue\n"
"        # Altitude\n"
"            int16 referencePosition_altitude_altitudeValue\n"
"            uint8 referencePosition_altitude_altitudeConfidence\n"
;
  }

  static const char* value(const ::definitions::v2x_CAM_basic_container_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stationType);
      stream.next(m.referencePosition_latitude);
      stream.next(m.referencePosition_longitude);
      stream.next(m.referencePosition_positionConfidenceEllipse_semiMajorConfidence);
      stream.next(m.referencePosition_positionConfidenceEllipse_semiMinorConfidence);
      stream.next(m.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue);
      stream.next(m.referencePosition_altitude_altitudeValue);
      stream.next(m.referencePosition_altitude_altitudeConfidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_CAM_basic_container_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_CAM_basic_container_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_CAM_basic_container_<ContainerAllocator>& v)
  {
    s << indent << "stationType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stationType);
    s << indent << "referencePosition_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.referencePosition_latitude);
    s << indent << "referencePosition_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.referencePosition_longitude);
    s << indent << "referencePosition_positionConfidenceEllipse_semiMajorConfidence: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.referencePosition_positionConfidenceEllipse_semiMajorConfidence);
    s << indent << "referencePosition_positionConfidenceEllipse_semiMinorConfidence: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.referencePosition_positionConfidenceEllipse_semiMinorConfidence);
    s << indent << "referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue);
    s << indent << "referencePosition_altitude_altitudeValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.referencePosition_altitude_altitudeValue);
    s << indent << "referencePosition_altitude_altitudeConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.referencePosition_altitude_altitudeConfidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_CAM_BASIC_CONTAINER_H
