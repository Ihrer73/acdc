// Generated by gencpp from file definitions/v2x_CAM_high_freq_container.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_CAM_HIGH_FREQ_CONTAINER_H
#define DEFINITIONS_MESSAGE_V2X_CAM_HIGH_FREQ_CONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/ASN_bitstring.h>
#include <definitions/v2x_CAM_protectedCommunicationZone.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_CAM_high_freq_container_
{
  typedef v2x_CAM_high_freq_container_<ContainerAllocator> Type;

  v2x_CAM_high_freq_container_()
    : containerType(0)
    , heading_headingValue(0.0)
    , heading_headingConfidence(0)
    , speed_speedValue(0.0)
    , speed_speedConfidence(0)
    , driveDirection(0)
    , vehicleLength_vehicleLengthValue(0.0)
    , vehicleLength_vehicleLengthConfidenceIndication(0)
    , vehicleWidth(0.0)
    , longitudinalAcceleration_longitudinalAccelerationValue(0)
    , longitudinalAcceleration_longitudinalAccelerationConfidence(0)
    , curvature_curvatureValue(0)
    , curvature_curvatureConfidence(0)
    , curvatureCalculationMode(0)
    , yawRate_yawRateValue(0)
    , yawRate_yawRateConfidence(0)
    , accelerationControlPresent(false)
    , accelerationControl()
    , lanePositionPresent(false)
    , lanePosition(0)
    , steeringWheelAnglePresent(false)
    , steeringWheelAngle_steeringWheelAngleValue(0)
    , steeringWheelAngle_steeringWheelAngleConfidence(0)
    , lateralAccelerationPresent(false)
    , lateralAcceleration_lateralAccelerationValue(0)
    , lateralAcceleration_lateralAccelerationConfidence(0)
    , verticalAccelerationPresent(false)
    , verticalAcceleration_verticalAccelerationValue(0)
    , verticalAcceleration_verticallAccelerationConfidence(0)
    , performanceClassPresent(false)
    , performanceClass(0)
    , cenDsrcTollingZonePresent(false)
    , cenDsrcTollingZone_cenDsrcTollingZoneLatitude(0)
    , cenDsrcTollingZone_cenDsrcTollingZoneLongitude(0)
    , cenDsrcTollingZone_cenDsrcTollingZoneIDPresent(false)
    , cenDsrcTollingZone_cenDsrcTollingZoneID(0)
    , rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent(false)
    , rsuContainerHighFrequency_protectedCommunicationZonesRSU()  {
    }
  v2x_CAM_high_freq_container_(const ContainerAllocator& _alloc)
    : containerType(0)
    , heading_headingValue(0.0)
    , heading_headingConfidence(0)
    , speed_speedValue(0.0)
    , speed_speedConfidence(0)
    , driveDirection(0)
    , vehicleLength_vehicleLengthValue(0.0)
    , vehicleLength_vehicleLengthConfidenceIndication(0)
    , vehicleWidth(0.0)
    , longitudinalAcceleration_longitudinalAccelerationValue(0)
    , longitudinalAcceleration_longitudinalAccelerationConfidence(0)
    , curvature_curvatureValue(0)
    , curvature_curvatureConfidence(0)
    , curvatureCalculationMode(0)
    , yawRate_yawRateValue(0)
    , yawRate_yawRateConfidence(0)
    , accelerationControlPresent(false)
    , accelerationControl(_alloc)
    , lanePositionPresent(false)
    , lanePosition(0)
    , steeringWheelAnglePresent(false)
    , steeringWheelAngle_steeringWheelAngleValue(0)
    , steeringWheelAngle_steeringWheelAngleConfidence(0)
    , lateralAccelerationPresent(false)
    , lateralAcceleration_lateralAccelerationValue(0)
    , lateralAcceleration_lateralAccelerationConfidence(0)
    , verticalAccelerationPresent(false)
    , verticalAcceleration_verticalAccelerationValue(0)
    , verticalAcceleration_verticallAccelerationConfidence(0)
    , performanceClassPresent(false)
    , performanceClass(0)
    , cenDsrcTollingZonePresent(false)
    , cenDsrcTollingZone_cenDsrcTollingZoneLatitude(0)
    , cenDsrcTollingZone_cenDsrcTollingZoneLongitude(0)
    , cenDsrcTollingZone_cenDsrcTollingZoneIDPresent(false)
    , cenDsrcTollingZone_cenDsrcTollingZoneID(0)
    , rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent(false)
    , rsuContainerHighFrequency_protectedCommunicationZonesRSU(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _containerType_type;
  _containerType_type containerType;

   typedef double _heading_headingValue_type;
  _heading_headingValue_type heading_headingValue;

   typedef uint8_t _heading_headingConfidence_type;
  _heading_headingConfidence_type heading_headingConfidence;

   typedef double _speed_speedValue_type;
  _speed_speedValue_type speed_speedValue;

   typedef uint8_t _speed_speedConfidence_type;
  _speed_speedConfidence_type speed_speedConfidence;

   typedef uint8_t _driveDirection_type;
  _driveDirection_type driveDirection;

   typedef double _vehicleLength_vehicleLengthValue_type;
  _vehicleLength_vehicleLengthValue_type vehicleLength_vehicleLengthValue;

   typedef uint8_t _vehicleLength_vehicleLengthConfidenceIndication_type;
  _vehicleLength_vehicleLengthConfidenceIndication_type vehicleLength_vehicleLengthConfidenceIndication;

   typedef double _vehicleWidth_type;
  _vehicleWidth_type vehicleWidth;

   typedef int16_t _longitudinalAcceleration_longitudinalAccelerationValue_type;
  _longitudinalAcceleration_longitudinalAccelerationValue_type longitudinalAcceleration_longitudinalAccelerationValue;

   typedef uint8_t _longitudinalAcceleration_longitudinalAccelerationConfidence_type;
  _longitudinalAcceleration_longitudinalAccelerationConfidence_type longitudinalAcceleration_longitudinalAccelerationConfidence;

   typedef int16_t _curvature_curvatureValue_type;
  _curvature_curvatureValue_type curvature_curvatureValue;

   typedef uint8_t _curvature_curvatureConfidence_type;
  _curvature_curvatureConfidence_type curvature_curvatureConfidence;

   typedef uint8_t _curvatureCalculationMode_type;
  _curvatureCalculationMode_type curvatureCalculationMode;

   typedef int16_t _yawRate_yawRateValue_type;
  _yawRate_yawRateValue_type yawRate_yawRateValue;

   typedef uint8_t _yawRate_yawRateConfidence_type;
  _yawRate_yawRateConfidence_type yawRate_yawRateConfidence;

   typedef uint8_t _accelerationControlPresent_type;
  _accelerationControlPresent_type accelerationControlPresent;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _accelerationControl_type;
  _accelerationControl_type accelerationControl;

   typedef uint8_t _lanePositionPresent_type;
  _lanePositionPresent_type lanePositionPresent;

   typedef int8_t _lanePosition_type;
  _lanePosition_type lanePosition;

   typedef uint8_t _steeringWheelAnglePresent_type;
  _steeringWheelAnglePresent_type steeringWheelAnglePresent;

   typedef int16_t _steeringWheelAngle_steeringWheelAngleValue_type;
  _steeringWheelAngle_steeringWheelAngleValue_type steeringWheelAngle_steeringWheelAngleValue;

   typedef uint8_t _steeringWheelAngle_steeringWheelAngleConfidence_type;
  _steeringWheelAngle_steeringWheelAngleConfidence_type steeringWheelAngle_steeringWheelAngleConfidence;

   typedef uint8_t _lateralAccelerationPresent_type;
  _lateralAccelerationPresent_type lateralAccelerationPresent;

   typedef int16_t _lateralAcceleration_lateralAccelerationValue_type;
  _lateralAcceleration_lateralAccelerationValue_type lateralAcceleration_lateralAccelerationValue;

   typedef uint8_t _lateralAcceleration_lateralAccelerationConfidence_type;
  _lateralAcceleration_lateralAccelerationConfidence_type lateralAcceleration_lateralAccelerationConfidence;

   typedef uint8_t _verticalAccelerationPresent_type;
  _verticalAccelerationPresent_type verticalAccelerationPresent;

   typedef int16_t _verticalAcceleration_verticalAccelerationValue_type;
  _verticalAcceleration_verticalAccelerationValue_type verticalAcceleration_verticalAccelerationValue;

   typedef uint8_t _verticalAcceleration_verticallAccelerationConfidence_type;
  _verticalAcceleration_verticallAccelerationConfidence_type verticalAcceleration_verticallAccelerationConfidence;

   typedef uint8_t _performanceClassPresent_type;
  _performanceClassPresent_type performanceClassPresent;

   typedef uint8_t _performanceClass_type;
  _performanceClass_type performanceClass;

   typedef uint8_t _cenDsrcTollingZonePresent_type;
  _cenDsrcTollingZonePresent_type cenDsrcTollingZonePresent;

   typedef int32_t _cenDsrcTollingZone_cenDsrcTollingZoneLatitude_type;
  _cenDsrcTollingZone_cenDsrcTollingZoneLatitude_type cenDsrcTollingZone_cenDsrcTollingZoneLatitude;

   typedef int32_t _cenDsrcTollingZone_cenDsrcTollingZoneLongitude_type;
  _cenDsrcTollingZone_cenDsrcTollingZoneLongitude_type cenDsrcTollingZone_cenDsrcTollingZoneLongitude;

   typedef uint8_t _cenDsrcTollingZone_cenDsrcTollingZoneIDPresent_type;
  _cenDsrcTollingZone_cenDsrcTollingZoneIDPresent_type cenDsrcTollingZone_cenDsrcTollingZoneIDPresent;

   typedef uint32_t _cenDsrcTollingZone_cenDsrcTollingZoneID_type;
  _cenDsrcTollingZone_cenDsrcTollingZoneID_type cenDsrcTollingZone_cenDsrcTollingZoneID;

   typedef uint8_t _rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent_type;
  _rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent_type rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent;

   typedef std::vector< ::definitions::v2x_CAM_protectedCommunicationZone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_CAM_protectedCommunicationZone_<ContainerAllocator> >::other >  _rsuContainerHighFrequency_protectedCommunicationZonesRSU_type;
  _rsuContainerHighFrequency_protectedCommunicationZonesRSU_type rsuContainerHighFrequency_protectedCommunicationZonesRSU;





  typedef boost::shared_ptr< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_CAM_high_freq_container_

typedef ::definitions::v2x_CAM_high_freq_container_<std::allocator<void> > v2x_CAM_high_freq_container;

typedef boost::shared_ptr< ::definitions::v2x_CAM_high_freq_container > v2x_CAM_high_freq_containerPtr;
typedef boost::shared_ptr< ::definitions::v2x_CAM_high_freq_container const> v2x_CAM_high_freq_containerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator2> & rhs)
{
  return lhs.containerType == rhs.containerType &&
    lhs.heading_headingValue == rhs.heading_headingValue &&
    lhs.heading_headingConfidence == rhs.heading_headingConfidence &&
    lhs.speed_speedValue == rhs.speed_speedValue &&
    lhs.speed_speedConfidence == rhs.speed_speedConfidence &&
    lhs.driveDirection == rhs.driveDirection &&
    lhs.vehicleLength_vehicleLengthValue == rhs.vehicleLength_vehicleLengthValue &&
    lhs.vehicleLength_vehicleLengthConfidenceIndication == rhs.vehicleLength_vehicleLengthConfidenceIndication &&
    lhs.vehicleWidth == rhs.vehicleWidth &&
    lhs.longitudinalAcceleration_longitudinalAccelerationValue == rhs.longitudinalAcceleration_longitudinalAccelerationValue &&
    lhs.longitudinalAcceleration_longitudinalAccelerationConfidence == rhs.longitudinalAcceleration_longitudinalAccelerationConfidence &&
    lhs.curvature_curvatureValue == rhs.curvature_curvatureValue &&
    lhs.curvature_curvatureConfidence == rhs.curvature_curvatureConfidence &&
    lhs.curvatureCalculationMode == rhs.curvatureCalculationMode &&
    lhs.yawRate_yawRateValue == rhs.yawRate_yawRateValue &&
    lhs.yawRate_yawRateConfidence == rhs.yawRate_yawRateConfidence &&
    lhs.accelerationControlPresent == rhs.accelerationControlPresent &&
    lhs.accelerationControl == rhs.accelerationControl &&
    lhs.lanePositionPresent == rhs.lanePositionPresent &&
    lhs.lanePosition == rhs.lanePosition &&
    lhs.steeringWheelAnglePresent == rhs.steeringWheelAnglePresent &&
    lhs.steeringWheelAngle_steeringWheelAngleValue == rhs.steeringWheelAngle_steeringWheelAngleValue &&
    lhs.steeringWheelAngle_steeringWheelAngleConfidence == rhs.steeringWheelAngle_steeringWheelAngleConfidence &&
    lhs.lateralAccelerationPresent == rhs.lateralAccelerationPresent &&
    lhs.lateralAcceleration_lateralAccelerationValue == rhs.lateralAcceleration_lateralAccelerationValue &&
    lhs.lateralAcceleration_lateralAccelerationConfidence == rhs.lateralAcceleration_lateralAccelerationConfidence &&
    lhs.verticalAccelerationPresent == rhs.verticalAccelerationPresent &&
    lhs.verticalAcceleration_verticalAccelerationValue == rhs.verticalAcceleration_verticalAccelerationValue &&
    lhs.verticalAcceleration_verticallAccelerationConfidence == rhs.verticalAcceleration_verticallAccelerationConfidence &&
    lhs.performanceClassPresent == rhs.performanceClassPresent &&
    lhs.performanceClass == rhs.performanceClass &&
    lhs.cenDsrcTollingZonePresent == rhs.cenDsrcTollingZonePresent &&
    lhs.cenDsrcTollingZone_cenDsrcTollingZoneLatitude == rhs.cenDsrcTollingZone_cenDsrcTollingZoneLatitude &&
    lhs.cenDsrcTollingZone_cenDsrcTollingZoneLongitude == rhs.cenDsrcTollingZone_cenDsrcTollingZoneLongitude &&
    lhs.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent == rhs.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent &&
    lhs.cenDsrcTollingZone_cenDsrcTollingZoneID == rhs.cenDsrcTollingZone_cenDsrcTollingZoneID &&
    lhs.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent == rhs.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent &&
    lhs.rsuContainerHighFrequency_protectedCommunicationZonesRSU == rhs.rsuContainerHighFrequency_protectedCommunicationZonesRSU;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a57c9f5804d4d24442e42f1e23574f5";
  }

  static const char* value(const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a57c9f5804d4d24ULL;
  static const uint64_t static_value2 = 0x442e42f1e23574f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_CAM_high_freq_container";
  }

  static const char* value(const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# HighFrequencyContainer\n"
"uint8 containerType\n"
"# BasicVehicleContainerHighFrequency\n"
"    # Heading\n"
"        float64 heading_headingValue\n"
"        uint8 heading_headingConfidence\n"
"    # Speed\n"
"        float64 speed_speedValue\n"
"        uint8 speed_speedConfidence\n"
"    uint8 driveDirection\n"
"    # VehicleLength\n"
"        float64 vehicleLength_vehicleLengthValue\n"
"        uint8 vehicleLength_vehicleLengthConfidenceIndication\n"
"    float64 vehicleWidth\n"
"    # LongitudinalAcceleration\n"
"        int16 longitudinalAcceleration_longitudinalAccelerationValue\n"
"        uint8 longitudinalAcceleration_longitudinalAccelerationConfidence\n"
"    # Curvature\n"
"        int16 curvature_curvatureValue\n"
"        uint8 curvature_curvatureConfidence\n"
"    uint8 curvatureCalculationMode\n"
"    # YawRate\n"
"        int16 yawRate_yawRateValue\n"
"        uint8 yawRate_yawRateConfidence\n"
"    bool accelerationControlPresent\n"
"    ASN_bitstring accelerationControl # Optional, Bitstring Size 7\n"
"    bool lanePositionPresent\n"
"    int8 lanePosition\n"
"    # SteeringWheelAngle\n"
"    bool steeringWheelAnglePresent\n"
"        int16 steeringWheelAngle_steeringWheelAngleValue\n"
"        uint8 steeringWheelAngle_steeringWheelAngleConfidence\n"
"    # LateralAcceleration\n"
"    bool lateralAccelerationPresent\n"
"        int16 lateralAcceleration_lateralAccelerationValue\n"
"        uint8 lateralAcceleration_lateralAccelerationConfidence\n"
"    # VerticalAcceleration\n"
"    bool verticalAccelerationPresent\n"
"        int16    verticalAcceleration_verticalAccelerationValue\n"
"        uint8 verticalAcceleration_verticallAccelerationConfidence\n"
"    bool performanceClassPresent\n"
"    uint8 performanceClass\n"
"    # CenDsrcTollingZone\n"
"    bool cenDsrcTollingZonePresent\n"
"        int32 cenDsrcTollingZone_cenDsrcTollingZoneLatitude\n"
"        int32 cenDsrcTollingZone_cenDsrcTollingZoneLongitude\n"
"        bool cenDsrcTollingZone_cenDsrcTollingZoneIDPresent\n"
"        uint32 cenDsrcTollingZone_cenDsrcTollingZoneID\n"
"# RSUContainerHighFrequency\n"
"    #ProtectedCommunicationZonesRSU\n"
"    bool rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent\n"
"        v2x_CAM_protectedCommunicationZone[] rsuContainerHighFrequency_protectedCommunicationZonesRSU\n"
"================================================================================\n"
"MSG: definitions/ASN_bitstring\n"
"uint8[] buf\n"
"uint8 bits_unused\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_protectedCommunicationZone\n"
"uint8    protectedZoneType\n"
"bool expiryTimePresent\n"
"uint64    expiryTime\n"
"int32    protectedZoneLatitude\n"
"int32    protectedZoneLongitude\n"
"bool protectedZoneRadiusPresent\n"
"uint8    protectedZoneRadius\n"
"uint32    protectedZoneID\n"
"bool protectedZoneIDPresent\n"
;
  }

  static const char* value(const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.containerType);
      stream.next(m.heading_headingValue);
      stream.next(m.heading_headingConfidence);
      stream.next(m.speed_speedValue);
      stream.next(m.speed_speedConfidence);
      stream.next(m.driveDirection);
      stream.next(m.vehicleLength_vehicleLengthValue);
      stream.next(m.vehicleLength_vehicleLengthConfidenceIndication);
      stream.next(m.vehicleWidth);
      stream.next(m.longitudinalAcceleration_longitudinalAccelerationValue);
      stream.next(m.longitudinalAcceleration_longitudinalAccelerationConfidence);
      stream.next(m.curvature_curvatureValue);
      stream.next(m.curvature_curvatureConfidence);
      stream.next(m.curvatureCalculationMode);
      stream.next(m.yawRate_yawRateValue);
      stream.next(m.yawRate_yawRateConfidence);
      stream.next(m.accelerationControlPresent);
      stream.next(m.accelerationControl);
      stream.next(m.lanePositionPresent);
      stream.next(m.lanePosition);
      stream.next(m.steeringWheelAnglePresent);
      stream.next(m.steeringWheelAngle_steeringWheelAngleValue);
      stream.next(m.steeringWheelAngle_steeringWheelAngleConfidence);
      stream.next(m.lateralAccelerationPresent);
      stream.next(m.lateralAcceleration_lateralAccelerationValue);
      stream.next(m.lateralAcceleration_lateralAccelerationConfidence);
      stream.next(m.verticalAccelerationPresent);
      stream.next(m.verticalAcceleration_verticalAccelerationValue);
      stream.next(m.verticalAcceleration_verticallAccelerationConfidence);
      stream.next(m.performanceClassPresent);
      stream.next(m.performanceClass);
      stream.next(m.cenDsrcTollingZonePresent);
      stream.next(m.cenDsrcTollingZone_cenDsrcTollingZoneLatitude);
      stream.next(m.cenDsrcTollingZone_cenDsrcTollingZoneLongitude);
      stream.next(m.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent);
      stream.next(m.cenDsrcTollingZone_cenDsrcTollingZoneID);
      stream.next(m.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent);
      stream.next(m.rsuContainerHighFrequency_protectedCommunicationZonesRSU);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_CAM_high_freq_container_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_CAM_high_freq_container_<ContainerAllocator>& v)
  {
    s << indent << "containerType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.containerType);
    s << indent << "heading_headingValue: ";
    Printer<double>::stream(s, indent + "  ", v.heading_headingValue);
    s << indent << "heading_headingConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heading_headingConfidence);
    s << indent << "speed_speedValue: ";
    Printer<double>::stream(s, indent + "  ", v.speed_speedValue);
    s << indent << "speed_speedConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_speedConfidence);
    s << indent << "driveDirection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driveDirection);
    s << indent << "vehicleLength_vehicleLengthValue: ";
    Printer<double>::stream(s, indent + "  ", v.vehicleLength_vehicleLengthValue);
    s << indent << "vehicleLength_vehicleLengthConfidenceIndication: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicleLength_vehicleLengthConfidenceIndication);
    s << indent << "vehicleWidth: ";
    Printer<double>::stream(s, indent + "  ", v.vehicleWidth);
    s << indent << "longitudinalAcceleration_longitudinalAccelerationValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.longitudinalAcceleration_longitudinalAccelerationValue);
    s << indent << "longitudinalAcceleration_longitudinalAccelerationConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.longitudinalAcceleration_longitudinalAccelerationConfidence);
    s << indent << "curvature_curvatureValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.curvature_curvatureValue);
    s << indent << "curvature_curvatureConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.curvature_curvatureConfidence);
    s << indent << "curvatureCalculationMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.curvatureCalculationMode);
    s << indent << "yawRate_yawRateValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yawRate_yawRateValue);
    s << indent << "yawRate_yawRateConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yawRate_yawRateConfidence);
    s << indent << "accelerationControlPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerationControlPresent);
    s << indent << "accelerationControl: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.accelerationControl);
    s << indent << "lanePositionPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lanePositionPresent);
    s << indent << "lanePosition: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lanePosition);
    s << indent << "steeringWheelAnglePresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steeringWheelAnglePresent);
    s << indent << "steeringWheelAngle_steeringWheelAngleValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.steeringWheelAngle_steeringWheelAngleValue);
    s << indent << "steeringWheelAngle_steeringWheelAngleConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steeringWheelAngle_steeringWheelAngleConfidence);
    s << indent << "lateralAccelerationPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lateralAccelerationPresent);
    s << indent << "lateralAcceleration_lateralAccelerationValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lateralAcceleration_lateralAccelerationValue);
    s << indent << "lateralAcceleration_lateralAccelerationConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lateralAcceleration_lateralAccelerationConfidence);
    s << indent << "verticalAccelerationPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verticalAccelerationPresent);
    s << indent << "verticalAcceleration_verticalAccelerationValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.verticalAcceleration_verticalAccelerationValue);
    s << indent << "verticalAcceleration_verticallAccelerationConfidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verticalAcceleration_verticallAccelerationConfidence);
    s << indent << "performanceClassPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.performanceClassPresent);
    s << indent << "performanceClass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.performanceClass);
    s << indent << "cenDsrcTollingZonePresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cenDsrcTollingZonePresent);
    s << indent << "cenDsrcTollingZone_cenDsrcTollingZoneLatitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cenDsrcTollingZone_cenDsrcTollingZoneLatitude);
    s << indent << "cenDsrcTollingZone_cenDsrcTollingZoneLongitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cenDsrcTollingZone_cenDsrcTollingZoneLongitude);
    s << indent << "cenDsrcTollingZone_cenDsrcTollingZoneIDPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent);
    s << indent << "cenDsrcTollingZone_cenDsrcTollingZoneID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cenDsrcTollingZone_cenDsrcTollingZoneID);
    s << indent << "rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent);
    s << indent << "rsuContainerHighFrequency_protectedCommunicationZonesRSU[]" << std::endl;
    for (size_t i = 0; i < v.rsuContainerHighFrequency_protectedCommunicationZonesRSU.size(); ++i)
    {
      s << indent << "  rsuContainerHighFrequency_protectedCommunicationZonesRSU[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_CAM_protectedCommunicationZone_<ContainerAllocator> >::stream(s, indent + "    ", v.rsuContainerHighFrequency_protectedCommunicationZonesRSU[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_CAM_HIGH_FREQ_CONTAINER_H
