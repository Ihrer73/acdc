// Generated by gencpp from file definitions/v2x_CAM_low_freq_container.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_CAM_LOW_FREQ_CONTAINER_H
#define DEFINITIONS_MESSAGE_V2X_CAM_LOW_FREQ_CONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/ASN_bitstring.h>
#include <definitions/v2x_CAM_pathPoint.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_CAM_low_freq_container_
{
  typedef v2x_CAM_low_freq_container_<ContainerAllocator> Type;

  v2x_CAM_low_freq_container_()
    : containerType(0)
    , vehicleRole(0)
    , exteriorLights()
    , pathHistory()  {
    }
  v2x_CAM_low_freq_container_(const ContainerAllocator& _alloc)
    : containerType(0)
    , vehicleRole(0)
    , exteriorLights(_alloc)
    , pathHistory(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _containerType_type;
  _containerType_type containerType;

   typedef uint8_t _vehicleRole_type;
  _vehicleRole_type vehicleRole;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _exteriorLights_type;
  _exteriorLights_type exteriorLights;

   typedef std::vector< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >::other >  _pathHistory_type;
  _pathHistory_type pathHistory;





  typedef boost::shared_ptr< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_CAM_low_freq_container_

typedef ::definitions::v2x_CAM_low_freq_container_<std::allocator<void> > v2x_CAM_low_freq_container;

typedef boost::shared_ptr< ::definitions::v2x_CAM_low_freq_container > v2x_CAM_low_freq_containerPtr;
typedef boost::shared_ptr< ::definitions::v2x_CAM_low_freq_container const> v2x_CAM_low_freq_containerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator2> & rhs)
{
  return lhs.containerType == rhs.containerType &&
    lhs.vehicleRole == rhs.vehicleRole &&
    lhs.exteriorLights == rhs.exteriorLights &&
    lhs.pathHistory == rhs.pathHistory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9343625224ba2ce234dfe0f790d1a19c";
  }

  static const char* value(const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9343625224ba2ce2ULL;
  static const uint64_t static_value2 = 0x34dfe0f790d1a19cULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_CAM_low_freq_container";
  }

  static const char* value(const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# LowFrequencyContainer (OPTIONAL)\n"
"    #BasicVehicleContainerLowFrequency\n"
"    uint8 containerType # 0 = Absent, 1 = BasicVehicleContainerLowFrequency\n"
"        uint8 vehicleRole\n"
"        ASN_bitstring exteriorLights\n"
"        v2x_CAM_pathPoint[] pathHistory\n"
"================================================================================\n"
"MSG: definitions/ASN_bitstring\n"
"uint8[] buf\n"
"uint8 bits_unused\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_CAM_pathPoint\n"
"int32 deltaLatitude\n"
"int32 deltaLongitude\n"
"int16 deltaAltitude\n"
"bool pathDeltaTimePresent\n"
"uint16 pathDeltaTime\n"
;
  }

  static const char* value(const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.containerType);
      stream.next(m.vehicleRole);
      stream.next(m.exteriorLights);
      stream.next(m.pathHistory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_CAM_low_freq_container_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_CAM_low_freq_container_<ContainerAllocator>& v)
  {
    s << indent << "containerType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.containerType);
    s << indent << "vehicleRole: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicleRole);
    s << indent << "exteriorLights: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.exteriorLights);
    s << indent << "pathHistory[]" << std::endl;
    for (size_t i = 0; i < v.pathHistory.size(); ++i)
    {
      s << indent << "  pathHistory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.pathHistory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_CAM_LOW_FREQ_CONTAINER_H
