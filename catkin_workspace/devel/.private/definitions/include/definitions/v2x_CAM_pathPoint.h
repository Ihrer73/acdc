// Generated by gencpp from file definitions/v2x_CAM_pathPoint.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_CAM_PATHPOINT_H
#define DEFINITIONS_MESSAGE_V2X_CAM_PATHPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct v2x_CAM_pathPoint_
{
  typedef v2x_CAM_pathPoint_<ContainerAllocator> Type;

  v2x_CAM_pathPoint_()
    : deltaLatitude(0)
    , deltaLongitude(0)
    , deltaAltitude(0)
    , pathDeltaTimePresent(false)
    , pathDeltaTime(0)  {
    }
  v2x_CAM_pathPoint_(const ContainerAllocator& _alloc)
    : deltaLatitude(0)
    , deltaLongitude(0)
    , deltaAltitude(0)
    , pathDeltaTimePresent(false)
    , pathDeltaTime(0)  {
  (void)_alloc;
    }



   typedef int32_t _deltaLatitude_type;
  _deltaLatitude_type deltaLatitude;

   typedef int32_t _deltaLongitude_type;
  _deltaLongitude_type deltaLongitude;

   typedef int16_t _deltaAltitude_type;
  _deltaAltitude_type deltaAltitude;

   typedef uint8_t _pathDeltaTimePresent_type;
  _pathDeltaTimePresent_type pathDeltaTimePresent;

   typedef uint16_t _pathDeltaTime_type;
  _pathDeltaTime_type pathDeltaTime;





  typedef boost::shared_ptr< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_CAM_pathPoint_

typedef ::definitions::v2x_CAM_pathPoint_<std::allocator<void> > v2x_CAM_pathPoint;

typedef boost::shared_ptr< ::definitions::v2x_CAM_pathPoint > v2x_CAM_pathPointPtr;
typedef boost::shared_ptr< ::definitions::v2x_CAM_pathPoint const> v2x_CAM_pathPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator2> & rhs)
{
  return lhs.deltaLatitude == rhs.deltaLatitude &&
    lhs.deltaLongitude == rhs.deltaLongitude &&
    lhs.deltaAltitude == rhs.deltaAltitude &&
    lhs.pathDeltaTimePresent == rhs.pathDeltaTimePresent &&
    lhs.pathDeltaTime == rhs.pathDeltaTime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1ca8c115f3d73f8970cdb190b6016bb";
  }

  static const char* value(const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1ca8c115f3d73f8ULL;
  static const uint64_t static_value2 = 0x970cdb190b6016bbULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_CAM_pathPoint";
  }

  static const char* value(const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 deltaLatitude\n"
"int32 deltaLongitude\n"
"int16 deltaAltitude\n"
"bool pathDeltaTimePresent\n"
"uint16 pathDeltaTime\n"
;
  }

  static const char* value(const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deltaLatitude);
      stream.next(m.deltaLongitude);
      stream.next(m.deltaAltitude);
      stream.next(m.pathDeltaTimePresent);
      stream.next(m.pathDeltaTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_CAM_pathPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_CAM_pathPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_CAM_pathPoint_<ContainerAllocator>& v)
  {
    s << indent << "deltaLatitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltaLatitude);
    s << indent << "deltaLongitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltaLongitude);
    s << indent << "deltaAltitude: ";
    Printer<int16_t>::stream(s, indent + "  ", v.deltaAltitude);
    s << indent << "pathDeltaTimePresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathDeltaTimePresent);
    s << indent << "pathDeltaTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pathDeltaTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_CAM_PATHPOINT_H
