// Generated by gencpp from file definitions/v2x_CAM_special_container.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_CAM_SPECIAL_CONTAINER_H
#define DEFINITIONS_MESSAGE_V2X_CAM_SPECIAL_CONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/ASN_bitstring.h>
#include <definitions/ASN_bitstring.h>
#include <definitions/ASN_bitstring.h>
#include <definitions/ASN_bitstring.h>
#include <definitions/ASN_bitstring.h>
#include <definitions/ASN_bitstring.h>
#include <definitions/ASN_bitstring.h>
#include <definitions/ASN_bitstring.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_CAM_special_container_
{
  typedef v2x_CAM_special_container_<ContainerAllocator> Type;

  v2x_CAM_special_container_()
    : containerType(0)
    , publicTransportContainer_embarkationStatus(false)
    , publicTransportContainer_ptActivationPresent(false)
    , publicTransportContainer_ptActivation_ptActivationType(0)
    , publicTransportContainer_ptActivation_ptActivationData()
    , specialTransportContainer_specialTransportType()
    , specialTransportContainer_lightBarSirenInUse()
    , dangerousGoodsContainer_dangerousGoodsBasic(0)
    , roadWorksContainerBasic_roadworksSubCauseCodePresent(false)
    , roadWorksContainerBasic_roadworksSubCauseCode(0)
    , roadWorksContainerBasic_lightBarSirenInUse()
    , roadWorksContainerBasic_closedLanesPresent(false)
    , roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent(false)
    , roadWorksContainerBasic_closedLanes_hardShoulderStatus(0)
    , roadWorksContainerBasic_closedLanes_drivingLaneStatus()
    , rescueContainer_lightBarSirenInUse()
    , emergencyContainer_lightBarSirenInUse()
    , emergencyContainer_incidentIndicationPresent(false)
    , emergencyContainer_incidentIndication_causeCode(0)
    , emergencyContainer_incidentIndication_subCauseCode(0)
    , emergencyContainer_emergencyPriorityPresent(false)
    , emergencyContainer_emergencyPriority()
    , safetyCarContainer_lightBarSirenInUse()
    , safetyCarContainer_incidentIndicationPresent(false)
    , safetyCarContainer_incidentIndication_causeCode(0)
    , safetyCarContainer_incidentIndication_subCauseCode(0)
    , safetyCarContainer_trafficRulePresent(false)
    , safetyCarContainer_trafficRule(0)
    , safetyCarContainer_speedLimitPresent(false)
    , safetyCarContainer_speedLimit(0)  {
    }
  v2x_CAM_special_container_(const ContainerAllocator& _alloc)
    : containerType(0)
    , publicTransportContainer_embarkationStatus(false)
    , publicTransportContainer_ptActivationPresent(false)
    , publicTransportContainer_ptActivation_ptActivationType(0)
    , publicTransportContainer_ptActivation_ptActivationData(_alloc)
    , specialTransportContainer_specialTransportType(_alloc)
    , specialTransportContainer_lightBarSirenInUse(_alloc)
    , dangerousGoodsContainer_dangerousGoodsBasic(0)
    , roadWorksContainerBasic_roadworksSubCauseCodePresent(false)
    , roadWorksContainerBasic_roadworksSubCauseCode(0)
    , roadWorksContainerBasic_lightBarSirenInUse(_alloc)
    , roadWorksContainerBasic_closedLanesPresent(false)
    , roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent(false)
    , roadWorksContainerBasic_closedLanes_hardShoulderStatus(0)
    , roadWorksContainerBasic_closedLanes_drivingLaneStatus(_alloc)
    , rescueContainer_lightBarSirenInUse(_alloc)
    , emergencyContainer_lightBarSirenInUse(_alloc)
    , emergencyContainer_incidentIndicationPresent(false)
    , emergencyContainer_incidentIndication_causeCode(0)
    , emergencyContainer_incidentIndication_subCauseCode(0)
    , emergencyContainer_emergencyPriorityPresent(false)
    , emergencyContainer_emergencyPriority(_alloc)
    , safetyCarContainer_lightBarSirenInUse(_alloc)
    , safetyCarContainer_incidentIndicationPresent(false)
    , safetyCarContainer_incidentIndication_causeCode(0)
    , safetyCarContainer_incidentIndication_subCauseCode(0)
    , safetyCarContainer_trafficRulePresent(false)
    , safetyCarContainer_trafficRule(0)
    , safetyCarContainer_speedLimitPresent(false)
    , safetyCarContainer_speedLimit(0)  {
  (void)_alloc;
    }



   typedef uint8_t _containerType_type;
  _containerType_type containerType;

   typedef uint8_t _publicTransportContainer_embarkationStatus_type;
  _publicTransportContainer_embarkationStatus_type publicTransportContainer_embarkationStatus;

   typedef uint8_t _publicTransportContainer_ptActivationPresent_type;
  _publicTransportContainer_ptActivationPresent_type publicTransportContainer_ptActivationPresent;

   typedef uint8_t _publicTransportContainer_ptActivation_ptActivationType_type;
  _publicTransportContainer_ptActivation_ptActivationType_type publicTransportContainer_ptActivation_ptActivationType;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _publicTransportContainer_ptActivation_ptActivationData_type;
  _publicTransportContainer_ptActivation_ptActivationData_type publicTransportContainer_ptActivation_ptActivationData;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _specialTransportContainer_specialTransportType_type;
  _specialTransportContainer_specialTransportType_type specialTransportContainer_specialTransportType;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _specialTransportContainer_lightBarSirenInUse_type;
  _specialTransportContainer_lightBarSirenInUse_type specialTransportContainer_lightBarSirenInUse;

   typedef uint8_t _dangerousGoodsContainer_dangerousGoodsBasic_type;
  _dangerousGoodsContainer_dangerousGoodsBasic_type dangerousGoodsContainer_dangerousGoodsBasic;

   typedef uint8_t _roadWorksContainerBasic_roadworksSubCauseCodePresent_type;
  _roadWorksContainerBasic_roadworksSubCauseCodePresent_type roadWorksContainerBasic_roadworksSubCauseCodePresent;

   typedef uint8_t _roadWorksContainerBasic_roadworksSubCauseCode_type;
  _roadWorksContainerBasic_roadworksSubCauseCode_type roadWorksContainerBasic_roadworksSubCauseCode;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _roadWorksContainerBasic_lightBarSirenInUse_type;
  _roadWorksContainerBasic_lightBarSirenInUse_type roadWorksContainerBasic_lightBarSirenInUse;

   typedef uint8_t _roadWorksContainerBasic_closedLanesPresent_type;
  _roadWorksContainerBasic_closedLanesPresent_type roadWorksContainerBasic_closedLanesPresent;

   typedef uint8_t _roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent_type;
  _roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent_type roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent;

   typedef uint8_t _roadWorksContainerBasic_closedLanes_hardShoulderStatus_type;
  _roadWorksContainerBasic_closedLanes_hardShoulderStatus_type roadWorksContainerBasic_closedLanes_hardShoulderStatus;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _roadWorksContainerBasic_closedLanes_drivingLaneStatus_type;
  _roadWorksContainerBasic_closedLanes_drivingLaneStatus_type roadWorksContainerBasic_closedLanes_drivingLaneStatus;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _rescueContainer_lightBarSirenInUse_type;
  _rescueContainer_lightBarSirenInUse_type rescueContainer_lightBarSirenInUse;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _emergencyContainer_lightBarSirenInUse_type;
  _emergencyContainer_lightBarSirenInUse_type emergencyContainer_lightBarSirenInUse;

   typedef uint8_t _emergencyContainer_incidentIndicationPresent_type;
  _emergencyContainer_incidentIndicationPresent_type emergencyContainer_incidentIndicationPresent;

   typedef uint8_t _emergencyContainer_incidentIndication_causeCode_type;
  _emergencyContainer_incidentIndication_causeCode_type emergencyContainer_incidentIndication_causeCode;

   typedef uint8_t _emergencyContainer_incidentIndication_subCauseCode_type;
  _emergencyContainer_incidentIndication_subCauseCode_type emergencyContainer_incidentIndication_subCauseCode;

   typedef uint8_t _emergencyContainer_emergencyPriorityPresent_type;
  _emergencyContainer_emergencyPriorityPresent_type emergencyContainer_emergencyPriorityPresent;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _emergencyContainer_emergencyPriority_type;
  _emergencyContainer_emergencyPriority_type emergencyContainer_emergencyPriority;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _safetyCarContainer_lightBarSirenInUse_type;
  _safetyCarContainer_lightBarSirenInUse_type safetyCarContainer_lightBarSirenInUse;

   typedef uint8_t _safetyCarContainer_incidentIndicationPresent_type;
  _safetyCarContainer_incidentIndicationPresent_type safetyCarContainer_incidentIndicationPresent;

   typedef uint8_t _safetyCarContainer_incidentIndication_causeCode_type;
  _safetyCarContainer_incidentIndication_causeCode_type safetyCarContainer_incidentIndication_causeCode;

   typedef uint8_t _safetyCarContainer_incidentIndication_subCauseCode_type;
  _safetyCarContainer_incidentIndication_subCauseCode_type safetyCarContainer_incidentIndication_subCauseCode;

   typedef uint8_t _safetyCarContainer_trafficRulePresent_type;
  _safetyCarContainer_trafficRulePresent_type safetyCarContainer_trafficRulePresent;

   typedef uint8_t _safetyCarContainer_trafficRule_type;
  _safetyCarContainer_trafficRule_type safetyCarContainer_trafficRule;

   typedef uint8_t _safetyCarContainer_speedLimitPresent_type;
  _safetyCarContainer_speedLimitPresent_type safetyCarContainer_speedLimitPresent;

   typedef uint8_t _safetyCarContainer_speedLimit_type;
  _safetyCarContainer_speedLimit_type safetyCarContainer_speedLimit;





  typedef boost::shared_ptr< ::definitions::v2x_CAM_special_container_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_CAM_special_container_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_CAM_special_container_

typedef ::definitions::v2x_CAM_special_container_<std::allocator<void> > v2x_CAM_special_container;

typedef boost::shared_ptr< ::definitions::v2x_CAM_special_container > v2x_CAM_special_containerPtr;
typedef boost::shared_ptr< ::definitions::v2x_CAM_special_container const> v2x_CAM_special_containerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_CAM_special_container_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_CAM_special_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_special_container_<ContainerAllocator2> & rhs)
{
  return lhs.containerType == rhs.containerType &&
    lhs.publicTransportContainer_embarkationStatus == rhs.publicTransportContainer_embarkationStatus &&
    lhs.publicTransportContainer_ptActivationPresent == rhs.publicTransportContainer_ptActivationPresent &&
    lhs.publicTransportContainer_ptActivation_ptActivationType == rhs.publicTransportContainer_ptActivation_ptActivationType &&
    lhs.publicTransportContainer_ptActivation_ptActivationData == rhs.publicTransportContainer_ptActivation_ptActivationData &&
    lhs.specialTransportContainer_specialTransportType == rhs.specialTransportContainer_specialTransportType &&
    lhs.specialTransportContainer_lightBarSirenInUse == rhs.specialTransportContainer_lightBarSirenInUse &&
    lhs.dangerousGoodsContainer_dangerousGoodsBasic == rhs.dangerousGoodsContainer_dangerousGoodsBasic &&
    lhs.roadWorksContainerBasic_roadworksSubCauseCodePresent == rhs.roadWorksContainerBasic_roadworksSubCauseCodePresent &&
    lhs.roadWorksContainerBasic_roadworksSubCauseCode == rhs.roadWorksContainerBasic_roadworksSubCauseCode &&
    lhs.roadWorksContainerBasic_lightBarSirenInUse == rhs.roadWorksContainerBasic_lightBarSirenInUse &&
    lhs.roadWorksContainerBasic_closedLanesPresent == rhs.roadWorksContainerBasic_closedLanesPresent &&
    lhs.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent == rhs.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent &&
    lhs.roadWorksContainerBasic_closedLanes_hardShoulderStatus == rhs.roadWorksContainerBasic_closedLanes_hardShoulderStatus &&
    lhs.roadWorksContainerBasic_closedLanes_drivingLaneStatus == rhs.roadWorksContainerBasic_closedLanes_drivingLaneStatus &&
    lhs.rescueContainer_lightBarSirenInUse == rhs.rescueContainer_lightBarSirenInUse &&
    lhs.emergencyContainer_lightBarSirenInUse == rhs.emergencyContainer_lightBarSirenInUse &&
    lhs.emergencyContainer_incidentIndicationPresent == rhs.emergencyContainer_incidentIndicationPresent &&
    lhs.emergencyContainer_incidentIndication_causeCode == rhs.emergencyContainer_incidentIndication_causeCode &&
    lhs.emergencyContainer_incidentIndication_subCauseCode == rhs.emergencyContainer_incidentIndication_subCauseCode &&
    lhs.emergencyContainer_emergencyPriorityPresent == rhs.emergencyContainer_emergencyPriorityPresent &&
    lhs.emergencyContainer_emergencyPriority == rhs.emergencyContainer_emergencyPriority &&
    lhs.safetyCarContainer_lightBarSirenInUse == rhs.safetyCarContainer_lightBarSirenInUse &&
    lhs.safetyCarContainer_incidentIndicationPresent == rhs.safetyCarContainer_incidentIndicationPresent &&
    lhs.safetyCarContainer_incidentIndication_causeCode == rhs.safetyCarContainer_incidentIndication_causeCode &&
    lhs.safetyCarContainer_incidentIndication_subCauseCode == rhs.safetyCarContainer_incidentIndication_subCauseCode &&
    lhs.safetyCarContainer_trafficRulePresent == rhs.safetyCarContainer_trafficRulePresent &&
    lhs.safetyCarContainer_trafficRule == rhs.safetyCarContainer_trafficRule &&
    lhs.safetyCarContainer_speedLimitPresent == rhs.safetyCarContainer_speedLimitPresent &&
    lhs.safetyCarContainer_speedLimit == rhs.safetyCarContainer_speedLimit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_CAM_special_container_<ContainerAllocator1> & lhs, const ::definitions::v2x_CAM_special_container_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_CAM_special_container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_CAM_special_container_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_CAM_special_container_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c47a5bda8811d9d0a2e0d50fa6729fc";
  }

  static const char* value(const ::definitions::v2x_CAM_special_container_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c47a5bda8811d9dULL;
  static const uint64_t static_value2 = 0x0a2e0d50fa6729fcULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_CAM_special_container";
  }

  static const char* value(const ::definitions::v2x_CAM_special_container_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SpecialVehicleContainer (OPTIONAL)\n"
"uint8 containerType # 0 = Absent, 1 = publicTransportContainer, 2 = ...\n"
"    # PublicTransportContainer\n"
"        bool publicTransportContainer_embarkationStatus\n"
"        # PtActivation (OPTIONAL)\n"
"        bool publicTransportContainer_ptActivationPresent\n"
"            uint8 publicTransportContainer_ptActivation_ptActivationType\n"
"            uint8[] publicTransportContainer_ptActivation_ptActivationData\n"
"    # SpecialTransportContainer\n"
"        ASN_bitstring specialTransportContainer_specialTransportType\n"
"        ASN_bitstring specialTransportContainer_lightBarSirenInUse\n"
"    # DangerousGoodsContainer\n"
"        uint8 dangerousGoodsContainer_dangerousGoodsBasic\n"
"    # RoadWorksContainerBasic\n"
"        bool roadWorksContainerBasic_roadworksSubCauseCodePresent\n"
"        uint8 roadWorksContainerBasic_roadworksSubCauseCode\n"
"        ASN_bitstring roadWorksContainerBasic_lightBarSirenInUse\n"
"        # ClosedLanes\n"
"        bool roadWorksContainerBasic_closedLanesPresent\n"
"            bool roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent\n"
"            uint8 roadWorksContainerBasic_closedLanes_hardShoulderStatus\n"
"            ASN_bitstring roadWorksContainerBasic_closedLanes_drivingLaneStatus\n"
"    # RescueContainer\n"
"        ASN_bitstring rescueContainer_lightBarSirenInUse\n"
"    # EmergencyContainer\n"
"        ASN_bitstring emergencyContainer_lightBarSirenInUse\n"
"        # CauseCode\n"
"        bool emergencyContainer_incidentIndicationPresent\n"
"            uint8 emergencyContainer_incidentIndication_causeCode\n"
"            uint8 emergencyContainer_incidentIndication_subCauseCode\n"
"        bool emergencyContainer_emergencyPriorityPresent\n"
"        ASN_bitstring emergencyContainer_emergencyPriority\n"
"    # SafetyCarContainer\n"
"        ASN_bitstring safetyCarContainer_lightBarSirenInUse\n"
"        # CauseCode\n"
"        bool safetyCarContainer_incidentIndicationPresent\n"
"            uint8 safetyCarContainer_incidentIndication_causeCode\n"
"            uint8 safetyCarContainer_incidentIndication_subCauseCode\n"
"        bool safetyCarContainer_trafficRulePresent\n"
"        uint8 safetyCarContainer_trafficRule\n"
"        bool safetyCarContainer_speedLimitPresent\n"
"        uint8 safetyCarContainer_speedLimit\n"
"================================================================================\n"
"MSG: definitions/ASN_bitstring\n"
"uint8[] buf\n"
"uint8 bits_unused\n"
;
  }

  static const char* value(const ::definitions::v2x_CAM_special_container_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.containerType);
      stream.next(m.publicTransportContainer_embarkationStatus);
      stream.next(m.publicTransportContainer_ptActivationPresent);
      stream.next(m.publicTransportContainer_ptActivation_ptActivationType);
      stream.next(m.publicTransportContainer_ptActivation_ptActivationData);
      stream.next(m.specialTransportContainer_specialTransportType);
      stream.next(m.specialTransportContainer_lightBarSirenInUse);
      stream.next(m.dangerousGoodsContainer_dangerousGoodsBasic);
      stream.next(m.roadWorksContainerBasic_roadworksSubCauseCodePresent);
      stream.next(m.roadWorksContainerBasic_roadworksSubCauseCode);
      stream.next(m.roadWorksContainerBasic_lightBarSirenInUse);
      stream.next(m.roadWorksContainerBasic_closedLanesPresent);
      stream.next(m.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent);
      stream.next(m.roadWorksContainerBasic_closedLanes_hardShoulderStatus);
      stream.next(m.roadWorksContainerBasic_closedLanes_drivingLaneStatus);
      stream.next(m.rescueContainer_lightBarSirenInUse);
      stream.next(m.emergencyContainer_lightBarSirenInUse);
      stream.next(m.emergencyContainer_incidentIndicationPresent);
      stream.next(m.emergencyContainer_incidentIndication_causeCode);
      stream.next(m.emergencyContainer_incidentIndication_subCauseCode);
      stream.next(m.emergencyContainer_emergencyPriorityPresent);
      stream.next(m.emergencyContainer_emergencyPriority);
      stream.next(m.safetyCarContainer_lightBarSirenInUse);
      stream.next(m.safetyCarContainer_incidentIndicationPresent);
      stream.next(m.safetyCarContainer_incidentIndication_causeCode);
      stream.next(m.safetyCarContainer_incidentIndication_subCauseCode);
      stream.next(m.safetyCarContainer_trafficRulePresent);
      stream.next(m.safetyCarContainer_trafficRule);
      stream.next(m.safetyCarContainer_speedLimitPresent);
      stream.next(m.safetyCarContainer_speedLimit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_CAM_special_container_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_CAM_special_container_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_CAM_special_container_<ContainerAllocator>& v)
  {
    s << indent << "containerType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.containerType);
    s << indent << "publicTransportContainer_embarkationStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.publicTransportContainer_embarkationStatus);
    s << indent << "publicTransportContainer_ptActivationPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.publicTransportContainer_ptActivationPresent);
    s << indent << "publicTransportContainer_ptActivation_ptActivationType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.publicTransportContainer_ptActivation_ptActivationType);
    s << indent << "publicTransportContainer_ptActivation_ptActivationData[]" << std::endl;
    for (size_t i = 0; i < v.publicTransportContainer_ptActivation_ptActivationData.size(); ++i)
    {
      s << indent << "  publicTransportContainer_ptActivation_ptActivationData[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.publicTransportContainer_ptActivation_ptActivationData[i]);
    }
    s << indent << "specialTransportContainer_specialTransportType: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.specialTransportContainer_specialTransportType);
    s << indent << "specialTransportContainer_lightBarSirenInUse: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.specialTransportContainer_lightBarSirenInUse);
    s << indent << "dangerousGoodsContainer_dangerousGoodsBasic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dangerousGoodsContainer_dangerousGoodsBasic);
    s << indent << "roadWorksContainerBasic_roadworksSubCauseCodePresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roadWorksContainerBasic_roadworksSubCauseCodePresent);
    s << indent << "roadWorksContainerBasic_roadworksSubCauseCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roadWorksContainerBasic_roadworksSubCauseCode);
    s << indent << "roadWorksContainerBasic_lightBarSirenInUse: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.roadWorksContainerBasic_lightBarSirenInUse);
    s << indent << "roadWorksContainerBasic_closedLanesPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roadWorksContainerBasic_closedLanesPresent);
    s << indent << "roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent);
    s << indent << "roadWorksContainerBasic_closedLanes_hardShoulderStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roadWorksContainerBasic_closedLanes_hardShoulderStatus);
    s << indent << "roadWorksContainerBasic_closedLanes_drivingLaneStatus: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.roadWorksContainerBasic_closedLanes_drivingLaneStatus);
    s << indent << "rescueContainer_lightBarSirenInUse: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.rescueContainer_lightBarSirenInUse);
    s << indent << "emergencyContainer_lightBarSirenInUse: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.emergencyContainer_lightBarSirenInUse);
    s << indent << "emergencyContainer_incidentIndicationPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergencyContainer_incidentIndicationPresent);
    s << indent << "emergencyContainer_incidentIndication_causeCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergencyContainer_incidentIndication_causeCode);
    s << indent << "emergencyContainer_incidentIndication_subCauseCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergencyContainer_incidentIndication_subCauseCode);
    s << indent << "emergencyContainer_emergencyPriorityPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergencyContainer_emergencyPriorityPresent);
    s << indent << "emergencyContainer_emergencyPriority: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.emergencyContainer_emergencyPriority);
    s << indent << "safetyCarContainer_lightBarSirenInUse: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.safetyCarContainer_lightBarSirenInUse);
    s << indent << "safetyCarContainer_incidentIndicationPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safetyCarContainer_incidentIndicationPresent);
    s << indent << "safetyCarContainer_incidentIndication_causeCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safetyCarContainer_incidentIndication_causeCode);
    s << indent << "safetyCarContainer_incidentIndication_subCauseCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safetyCarContainer_incidentIndication_subCauseCode);
    s << indent << "safetyCarContainer_trafficRulePresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safetyCarContainer_trafficRulePresent);
    s << indent << "safetyCarContainer_trafficRule: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safetyCarContainer_trafficRule);
    s << indent << "safetyCarContainer_speedLimitPresent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safetyCarContainer_speedLimitPresent);
    s << indent << "safetyCarContainer_speedLimit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safetyCarContainer_speedLimit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_CAM_SPECIAL_CONTAINER_H
