// Generated by gencpp from file definitions/v2x_MAP.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_MAP_H
#define DEFINITIONS_MESSAGE_V2X_MAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/v2x_MAP_Intersection.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_MAP_
{
  typedef v2x_MAP_<ContainerAllocator> Type;

  v2x_MAP_()
    : intersections()
    , layerIDs()  {
    }
  v2x_MAP_(const ContainerAllocator& _alloc)
    : intersections(_alloc)
    , layerIDs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >::other >  _intersections_type;
  _intersections_type intersections;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _layerIDs_type;
  _layerIDs_type layerIDs;





  typedef boost::shared_ptr< ::definitions::v2x_MAP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_MAP_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_MAP_

typedef ::definitions::v2x_MAP_<std::allocator<void> > v2x_MAP;

typedef boost::shared_ptr< ::definitions::v2x_MAP > v2x_MAPPtr;
typedef boost::shared_ptr< ::definitions::v2x_MAP const> v2x_MAPConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_MAP_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_MAP_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_MAP_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_<ContainerAllocator2> & rhs)
{
  return lhs.intersections == rhs.intersections &&
    lhs.layerIDs == rhs.layerIDs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_MAP_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_MAP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d4ab11f239542c98de4ee314e01377a";
  }

  static const char* value(const ::definitions::v2x_MAP_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d4ab11f239542c9ULL;
  static const uint64_t static_value2 = 0x8de4ee314e01377aULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_MAP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_MAP";
  }

  static const char* value(const ::definitions::v2x_MAP_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_MAP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Conversion of MAP intersections with adjacent lanes to lanelet map format \n"
"v2x_MAP_Intersection[] intersections\n"
"int32[] layerIDs\n"
"================================================================================\n"
"MSG: definitions/v2x_MAP_Intersection\n"
"#header\n"
"Header header\n"
"\n"
"# intersectionReferenceId\n"
"int32 id\n"
"\n"
"# refPoint of Intersection in local coordinate system generated by ll2 projector\n"
"float32 refPoint_x\n"
"float32 refPoint_y\n"
"float32 refPoint_z\n"
"\n"
"# area that is covered by lanes (relevant for extracting submap from ll2 map)\n"
"float32 maxPointX\n"
"float32 maxPointY\n"
"float32 minPointX\n"
"float32 minPointY\n"
"\n"
"\n"
"#Information of the different adjacent lanes\n"
"v2x_MAP_Lane[] adjacent_lanes\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_MAP_Lane\n"
"#enum directionalUse\n"
"uint8 LaneDirection_ingressPath = 0\n"
"uint8 LaneDirection_egressPath = 1\n"
"###############################################################\n"
"\n"
"#general laneInformation \n"
"    uint8 laneId\n"
"    uint8 directionalUse\n"
"    uint8 laneType  # Values as defined in SAE J 2735, \"LaneTypeAttributes\"\n"
"                    # 0: Vehicle, 2: Bike Lane\n"
"\n"
"#coordinates of lane as flat earth projection from refPoint\n"
"    geometry_msgs/Point[] lane_coordinates\n"
"\n"
"#list of lane connections\n"
"    v2x_MAP_Connection[] connections\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_MAP_Connection\n"
"#Connection\n"
"    #ConnectingLane\n"
"    uint8 connectingLane_laneId\n"
"    uint16 intersectionId #optional\n"
"    bool signalGroupId_present\n"
"    uint8 signalGroupId #optional\n"
;
  }

  static const char* value(const ::definitions::v2x_MAP_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_MAP_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intersections);
      stream.next(m.layerIDs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_MAP_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_MAP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_MAP_<ContainerAllocator>& v)
  {
    s << indent << "intersections[]" << std::endl;
    for (size_t i = 0; i < v.intersections.size(); ++i)
    {
      s << indent << "  intersections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >::stream(s, indent + "    ", v.intersections[i]);
    }
    s << indent << "layerIDs[]" << std::endl;
    for (size_t i = 0; i < v.layerIDs.size(); ++i)
    {
      s << indent << "  layerIDs[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.layerIDs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_MAP_H
