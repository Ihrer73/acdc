// Generated by gencpp from file definitions/v2x_MAP_Connection.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_MAP_CONNECTION_H
#define DEFINITIONS_MESSAGE_V2X_MAP_CONNECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct v2x_MAP_Connection_
{
  typedef v2x_MAP_Connection_<ContainerAllocator> Type;

  v2x_MAP_Connection_()
    : connectingLane_laneId(0)
    , intersectionId(0)
    , signalGroupId_present(false)
    , signalGroupId(0)  {
    }
  v2x_MAP_Connection_(const ContainerAllocator& _alloc)
    : connectingLane_laneId(0)
    , intersectionId(0)
    , signalGroupId_present(false)
    , signalGroupId(0)  {
  (void)_alloc;
    }



   typedef uint8_t _connectingLane_laneId_type;
  _connectingLane_laneId_type connectingLane_laneId;

   typedef uint16_t _intersectionId_type;
  _intersectionId_type intersectionId;

   typedef uint8_t _signalGroupId_present_type;
  _signalGroupId_present_type signalGroupId_present;

   typedef uint8_t _signalGroupId_type;
  _signalGroupId_type signalGroupId;





  typedef boost::shared_ptr< ::definitions::v2x_MAP_Connection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_MAP_Connection_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_MAP_Connection_

typedef ::definitions::v2x_MAP_Connection_<std::allocator<void> > v2x_MAP_Connection;

typedef boost::shared_ptr< ::definitions::v2x_MAP_Connection > v2x_MAP_ConnectionPtr;
typedef boost::shared_ptr< ::definitions::v2x_MAP_Connection const> v2x_MAP_ConnectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_MAP_Connection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_MAP_Connection_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_Connection_<ContainerAllocator2> & rhs)
{
  return lhs.connectingLane_laneId == rhs.connectingLane_laneId &&
    lhs.intersectionId == rhs.intersectionId &&
    lhs.signalGroupId_present == rhs.signalGroupId_present &&
    lhs.signalGroupId == rhs.signalGroupId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_MAP_Connection_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_Connection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_Connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_Connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_Connection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d4ece53e3635363f76ffd5de20a744f";
  }

  static const char* value(const ::definitions::v2x_MAP_Connection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d4ece53e3635363ULL;
  static const uint64_t static_value2 = 0xf76ffd5de20a744fULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_MAP_Connection";
  }

  static const char* value(const ::definitions::v2x_MAP_Connection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Connection\n"
"    #ConnectingLane\n"
"    uint8 connectingLane_laneId\n"
"    uint16 intersectionId #optional\n"
"    bool signalGroupId_present\n"
"    uint8 signalGroupId #optional\n"
;
  }

  static const char* value(const ::definitions::v2x_MAP_Connection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.connectingLane_laneId);
      stream.next(m.intersectionId);
      stream.next(m.signalGroupId_present);
      stream.next(m.signalGroupId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_MAP_Connection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_MAP_Connection_<ContainerAllocator>& v)
  {
    s << indent << "connectingLane_laneId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connectingLane_laneId);
    s << indent << "intersectionId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.intersectionId);
    s << indent << "signalGroupId_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signalGroupId_present);
    s << indent << "signalGroupId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signalGroupId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_MAP_CONNECTION_H
