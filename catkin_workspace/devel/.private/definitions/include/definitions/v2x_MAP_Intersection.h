// Generated by gencpp from file definitions/v2x_MAP_Intersection.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_MAP_INTERSECTION_H
#define DEFINITIONS_MESSAGE_V2X_MAP_INTERSECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <definitions/v2x_MAP_Lane.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_MAP_Intersection_
{
  typedef v2x_MAP_Intersection_<ContainerAllocator> Type;

  v2x_MAP_Intersection_()
    : header()
    , id(0)
    , refPoint_x(0.0)
    , refPoint_y(0.0)
    , refPoint_z(0.0)
    , maxPointX(0.0)
    , maxPointY(0.0)
    , minPointX(0.0)
    , minPointY(0.0)
    , adjacent_lanes()  {
    }
  v2x_MAP_Intersection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , refPoint_x(0.0)
    , refPoint_y(0.0)
    , refPoint_z(0.0)
    , maxPointX(0.0)
    , maxPointY(0.0)
    , minPointX(0.0)
    , minPointY(0.0)
    , adjacent_lanes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef float _refPoint_x_type;
  _refPoint_x_type refPoint_x;

   typedef float _refPoint_y_type;
  _refPoint_y_type refPoint_y;

   typedef float _refPoint_z_type;
  _refPoint_z_type refPoint_z;

   typedef float _maxPointX_type;
  _maxPointX_type maxPointX;

   typedef float _maxPointY_type;
  _maxPointY_type maxPointY;

   typedef float _minPointX_type;
  _minPointX_type minPointX;

   typedef float _minPointY_type;
  _minPointY_type minPointY;

   typedef std::vector< ::definitions::v2x_MAP_Lane_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >::other >  _adjacent_lanes_type;
  _adjacent_lanes_type adjacent_lanes;





  typedef boost::shared_ptr< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_MAP_Intersection_

typedef ::definitions::v2x_MAP_Intersection_<std::allocator<void> > v2x_MAP_Intersection;

typedef boost::shared_ptr< ::definitions::v2x_MAP_Intersection > v2x_MAP_IntersectionPtr;
typedef boost::shared_ptr< ::definitions::v2x_MAP_Intersection const> v2x_MAP_IntersectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_MAP_Intersection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_MAP_Intersection_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_Intersection_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.refPoint_x == rhs.refPoint_x &&
    lhs.refPoint_y == rhs.refPoint_y &&
    lhs.refPoint_z == rhs.refPoint_z &&
    lhs.maxPointX == rhs.maxPointX &&
    lhs.maxPointY == rhs.maxPointY &&
    lhs.minPointX == rhs.minPointX &&
    lhs.minPointY == rhs.minPointY &&
    lhs.adjacent_lanes == rhs.adjacent_lanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_MAP_Intersection_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_Intersection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db4117367e9fe43d11d41d81e64e15ca";
  }

  static const char* value(const ::definitions::v2x_MAP_Intersection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb4117367e9fe43dULL;
  static const uint64_t static_value2 = 0x11d41d81e64e15caULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_MAP_Intersection";
  }

  static const char* value(const ::definitions::v2x_MAP_Intersection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#header\n"
"Header header\n"
"\n"
"# intersectionReferenceId\n"
"int32 id\n"
"\n"
"# refPoint of Intersection in local coordinate system generated by ll2 projector\n"
"float32 refPoint_x\n"
"float32 refPoint_y\n"
"float32 refPoint_z\n"
"\n"
"# area that is covered by lanes (relevant for extracting submap from ll2 map)\n"
"float32 maxPointX\n"
"float32 maxPointY\n"
"float32 minPointX\n"
"float32 minPointY\n"
"\n"
"\n"
"#Information of the different adjacent lanes\n"
"v2x_MAP_Lane[] adjacent_lanes\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_MAP_Lane\n"
"#enum directionalUse\n"
"uint8 LaneDirection_ingressPath = 0\n"
"uint8 LaneDirection_egressPath = 1\n"
"###############################################################\n"
"\n"
"#general laneInformation \n"
"    uint8 laneId\n"
"    uint8 directionalUse\n"
"    uint8 laneType  # Values as defined in SAE J 2735, \"LaneTypeAttributes\"\n"
"                    # 0: Vehicle, 2: Bike Lane\n"
"\n"
"#coordinates of lane as flat earth projection from refPoint\n"
"    geometry_msgs/Point[] lane_coordinates\n"
"\n"
"#list of lane connections\n"
"    v2x_MAP_Connection[] connections\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_MAP_Connection\n"
"#Connection\n"
"    #ConnectingLane\n"
"    uint8 connectingLane_laneId\n"
"    uint16 intersectionId #optional\n"
"    bool signalGroupId_present\n"
"    uint8 signalGroupId #optional\n"
;
  }

  static const char* value(const ::definitions::v2x_MAP_Intersection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.refPoint_x);
      stream.next(m.refPoint_y);
      stream.next(m.refPoint_z);
      stream.next(m.maxPointX);
      stream.next(m.maxPointY);
      stream.next(m.minPointX);
      stream.next(m.minPointY);
      stream.next(m.adjacent_lanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_MAP_Intersection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_MAP_Intersection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_MAP_Intersection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "refPoint_x: ";
    Printer<float>::stream(s, indent + "  ", v.refPoint_x);
    s << indent << "refPoint_y: ";
    Printer<float>::stream(s, indent + "  ", v.refPoint_y);
    s << indent << "refPoint_z: ";
    Printer<float>::stream(s, indent + "  ", v.refPoint_z);
    s << indent << "maxPointX: ";
    Printer<float>::stream(s, indent + "  ", v.maxPointX);
    s << indent << "maxPointY: ";
    Printer<float>::stream(s, indent + "  ", v.maxPointY);
    s << indent << "minPointX: ";
    Printer<float>::stream(s, indent + "  ", v.minPointX);
    s << indent << "minPointY: ";
    Printer<float>::stream(s, indent + "  ", v.minPointY);
    s << indent << "adjacent_lanes[]" << std::endl;
    for (size_t i = 0; i < v.adjacent_lanes.size(); ++i)
    {
      s << indent << "  adjacent_lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >::stream(s, indent + "    ", v.adjacent_lanes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_MAP_INTERSECTION_H
