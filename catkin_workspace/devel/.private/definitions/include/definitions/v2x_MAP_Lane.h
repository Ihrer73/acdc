// Generated by gencpp from file definitions/v2x_MAP_Lane.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_MAP_LANE_H
#define DEFINITIONS_MESSAGE_V2X_MAP_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <definitions/v2x_MAP_Connection.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_MAP_Lane_
{
  typedef v2x_MAP_Lane_<ContainerAllocator> Type;

  v2x_MAP_Lane_()
    : laneId(0)
    , directionalUse(0)
    , laneType(0)
    , lane_coordinates()
    , connections()  {
    }
  v2x_MAP_Lane_(const ContainerAllocator& _alloc)
    : laneId(0)
    , directionalUse(0)
    , laneType(0)
    , lane_coordinates(_alloc)
    , connections(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _laneId_type;
  _laneId_type laneId;

   typedef uint8_t _directionalUse_type;
  _directionalUse_type directionalUse;

   typedef uint8_t _laneType_type;
  _laneType_type laneType;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _lane_coordinates_type;
  _lane_coordinates_type lane_coordinates;

   typedef std::vector< ::definitions::v2x_MAP_Connection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >::other >  _connections_type;
  _connections_type connections;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LaneDirection_ingressPath)
  #undef LaneDirection_ingressPath
#endif
#if defined(_WIN32) && defined(LaneDirection_egressPath)
  #undef LaneDirection_egressPath
#endif

  enum {
    LaneDirection_ingressPath = 0u,
    LaneDirection_egressPath = 1u,
  };


  typedef boost::shared_ptr< ::definitions::v2x_MAP_Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_MAP_Lane_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_MAP_Lane_

typedef ::definitions::v2x_MAP_Lane_<std::allocator<void> > v2x_MAP_Lane;

typedef boost::shared_ptr< ::definitions::v2x_MAP_Lane > v2x_MAP_LanePtr;
typedef boost::shared_ptr< ::definitions::v2x_MAP_Lane const> v2x_MAP_LaneConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_MAP_Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_MAP_Lane_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_Lane_<ContainerAllocator2> & rhs)
{
  return lhs.laneId == rhs.laneId &&
    lhs.directionalUse == rhs.directionalUse &&
    lhs.laneType == rhs.laneType &&
    lhs.lane_coordinates == rhs.lane_coordinates &&
    lhs.connections == rhs.connections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_MAP_Lane_<ContainerAllocator1> & lhs, const ::definitions::v2x_MAP_Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_MAP_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_MAP_Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_MAP_Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa29c07980c0d0dce29dbad848847c6d";
  }

  static const char* value(const ::definitions::v2x_MAP_Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa29c07980c0d0dcULL;
  static const uint64_t static_value2 = 0xe29dbad848847c6dULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_MAP_Lane";
  }

  static const char* value(const ::definitions::v2x_MAP_Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#enum directionalUse\n"
"uint8 LaneDirection_ingressPath = 0\n"
"uint8 LaneDirection_egressPath = 1\n"
"###############################################################\n"
"\n"
"#general laneInformation \n"
"    uint8 laneId\n"
"    uint8 directionalUse\n"
"    uint8 laneType  # Values as defined in SAE J 2735, \"LaneTypeAttributes\"\n"
"                    # 0: Vehicle, 2: Bike Lane\n"
"\n"
"#coordinates of lane as flat earth projection from refPoint\n"
"    geometry_msgs/Point[] lane_coordinates\n"
"\n"
"#list of lane connections\n"
"    v2x_MAP_Connection[] connections\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_MAP_Connection\n"
"#Connection\n"
"    #ConnectingLane\n"
"    uint8 connectingLane_laneId\n"
"    uint16 intersectionId #optional\n"
"    bool signalGroupId_present\n"
"    uint8 signalGroupId #optional\n"
;
  }

  static const char* value(const ::definitions::v2x_MAP_Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.laneId);
      stream.next(m.directionalUse);
      stream.next(m.laneType);
      stream.next(m.lane_coordinates);
      stream.next(m.connections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_MAP_Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_MAP_Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_MAP_Lane_<ContainerAllocator>& v)
  {
    s << indent << "laneId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laneId);
    s << indent << "directionalUse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.directionalUse);
    s << indent << "laneType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laneType);
    s << indent << "lane_coordinates[]" << std::endl;
    for (size_t i = 0; i < v.lane_coordinates.size(); ++i)
    {
      s << indent << "  lane_coordinates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.lane_coordinates[i]);
    }
    s << indent << "connections[]" << std::endl;
    for (size_t i = 0; i < v.connections.size(); ++i)
    {
      s << indent << "  connections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_MAP_Connection_<ContainerAllocator> >::stream(s, indent + "    ", v.connections[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_MAP_LANE_H
