// Generated by gencpp from file definitions/v2x_SPAT.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_SPAT_H
#define DEFINITIONS_MESSAGE_V2X_SPAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/v2x_SPAT_IntersectionState.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_SPAT_
{
  typedef v2x_SPAT_<ContainerAllocator> Type;

  v2x_SPAT_()
    : header_protocolVersion(0)
    , header_messageID(0)
    , header_stationID(0)
    , spatData_msgID(0)
    , spatData_msgSubID(0)
    , spatData_msgSubID_present(false)
    , spatData_name()
    , spatData_name_present(false)
    , spatData_intersections()
    , spatData_regional_present(false)  {
    }
  v2x_SPAT_(const ContainerAllocator& _alloc)
    : header_protocolVersion(0)
    , header_messageID(0)
    , header_stationID(0)
    , spatData_msgID(0)
    , spatData_msgSubID(0)
    , spatData_msgSubID_present(false)
    , spatData_name(_alloc)
    , spatData_name_present(false)
    , spatData_intersections(_alloc)
    , spatData_regional_present(false)  {
  (void)_alloc;
    }



   typedef uint8_t _header_protocolVersion_type;
  _header_protocolVersion_type header_protocolVersion;

   typedef uint8_t _header_messageID_type;
  _header_messageID_type header_messageID;

   typedef uint32_t _header_stationID_type;
  _header_stationID_type header_stationID;

   typedef uint8_t _spatData_msgID_type;
  _spatData_msgID_type spatData_msgID;

   typedef uint8_t _spatData_msgSubID_type;
  _spatData_msgSubID_type spatData_msgSubID;

   typedef uint8_t _spatData_msgSubID_present_type;
  _spatData_msgSubID_present_type spatData_msgSubID_present;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _spatData_name_type;
  _spatData_name_type spatData_name;

   typedef uint8_t _spatData_name_present_type;
  _spatData_name_present_type spatData_name_present;

   typedef std::vector< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >::other >  _spatData_intersections_type;
  _spatData_intersections_type spatData_intersections;

   typedef uint8_t _spatData_regional_present_type;
  _spatData_regional_present_type spatData_regional_present;





  typedef boost::shared_ptr< ::definitions::v2x_SPAT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_SPAT_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_SPAT_

typedef ::definitions::v2x_SPAT_<std::allocator<void> > v2x_SPAT;

typedef boost::shared_ptr< ::definitions::v2x_SPAT > v2x_SPATPtr;
typedef boost::shared_ptr< ::definitions::v2x_SPAT const> v2x_SPATConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_SPAT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_SPAT_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_SPAT_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_<ContainerAllocator2> & rhs)
{
  return lhs.header_protocolVersion == rhs.header_protocolVersion &&
    lhs.header_messageID == rhs.header_messageID &&
    lhs.header_stationID == rhs.header_stationID &&
    lhs.spatData_msgID == rhs.spatData_msgID &&
    lhs.spatData_msgSubID == rhs.spatData_msgSubID &&
    lhs.spatData_msgSubID_present == rhs.spatData_msgSubID_present &&
    lhs.spatData_name == rhs.spatData_name &&
    lhs.spatData_name_present == rhs.spatData_name_present &&
    lhs.spatData_intersections == rhs.spatData_intersections &&
    lhs.spatData_regional_present == rhs.spatData_regional_present;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_SPAT_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_SPAT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d60adafab96e8d4c04947395b81dc49";
  }

  static const char* value(const ::definitions::v2x_SPAT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d60adafab96e8d4ULL;
  static const uint64_t static_value2 = 0xc04947395b81dc49ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_SPAT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_SPAT";
  }

  static const char* value(const ::definitions::v2x_SPAT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_SPAT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SPAT.msg\n"
"#\n"
"# \n"
"# Values of data type float64 (aka double) are in si units (but deg is used instead of radiant!)\n"
"#\n"
"\n"
"#ItsPduHeader header\n"
"    uint8 header_protocolVersion\n"
"    uint8 header_messageID\n"
"    uint32 header_stationID\n"
"#SPAT spatData\n"
"    uint8 spatData_msgID\n"
"    uint8 spatData_msgSubID\n"
"    bool spatData_msgSubID_present\n"
"    string spatData_name\n"
"    bool spatData_name_present\n"
"    v2x_SPAT_IntersectionState[] spatData_intersections\n"
"    \n"
"    #unsed\n"
"    #RegionalSPAT_regional\n"
"    #uint8[] spatData_regional unused\n"
"    bool spatData_regional_present\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_IntersectionState\n"
"string name \n"
"bool name_present\n"
"#IntersectionReferenceID id\n"
"    uint16 id_region\n"
"    bool id_region_present\n"
"    uint16 id_id\n"
"uint8 revision\n"
"ASN_bitstring status\n"
"uint32 moy\n"
"bool moy_present\n"
"uint32 timeStamp\n"
"bool timeStamp_present\n"
"#uint8[] enabledLanes #alternative \n"
"v2x_SPAT_LaneID[] enabledLanes\n"
"bool enabledLanes_present\n"
"v2x_SPAT_MovementState[] states#enumerated\n"
"v2x_SPAT_ConnectionManeuverAssist[] maneuverAssistList\n"
"bool maneuverAssistList_present\n"
"uint8[] priority#octet string\n"
"bool priority_present\n"
"uint8[] preempt#octet string\n"
"bool preempt_present\n"
"v2x_SPAT_PrioritizationResponse[] regional #enumerated\n"
"bool regional_present\n"
"================================================================================\n"
"MSG: definitions/ASN_bitstring\n"
"uint8[] buf\n"
"uint8 bits_unused\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_LaneID\n"
"uint8 laneID\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_MovementState\n"
"string movementName\n"
"bool movementName_present\n"
"uint8 signalGroup\n"
"v2x_SPAT_MovementEvent[] state_time_speed#enumerated\n"
"v2x_SPAT_ConnectionManeuverAssist[] maneuverAssistList\n"
"bool maneuverAssistList_present\n"
"\n"
"#unused\n"
"#RegionalMovementState_regional\n"
"#bool RegionalMovementState_regional_present\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_MovementEvent\n"
"uint8 eventState#states\n"
"#TimeChangeDetails timing OPTIONAL\n"
"    uint16 timing_startTime\n"
"    bool timing_startTime_present\n"
"    uint16 timing_minEndTime\n"
"    uint16 timing_maxEndTime\n"
"    bool timing_maxEndTime_present\n"
"    uint16 timing_likelyTime\n"
"    bool timing_likelyTime_present\n"
"    uint8 timing_confidence\n"
"    bool timing_confidence_present\n"
"    uint16 timing_nextTime\n"
"    bool timing_nextTime_present\n"
"bool timing_present\n"
"v2x_SPAT_AdvisorySpeed[] speeds#enumerated\n"
"bool speeds_present\n"
"# regional unused\n"
"bool regional_present\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_AdvisorySpeed\n"
"uint8 type#enumerated\n"
"uint16 speed\n"
"bool speed_present\n"
"uint8 confidence\n"
"bool confidence_present\n"
"uint16 distance\n"
"bool distance_present\n"
"uint8 classID\n"
"bool classID_present\n"
"#uint8 regional #unused\n"
"bool regional_present \n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_ConnectionManeuverAssist\n"
"uint8 connectionID\n"
"uint16 queueLength\n"
"bool queueLength_present\n"
"uint16 availableStorageLength\n"
"bool availableStorageLength_present\n"
"bool waitOnStop\n"
"bool waitOnStop_present\n"
"bool pedBicycleDetect\n"
"bool pedBicycleDetect_present\n"
"\n"
"#RegionalConnectionManeuverAssist regional\n"
"    v2x_SPAT_VehicleToLanePosition[] regional_vehicleToLanePositions\n"
"    #NodeOffsetPoint OPTIONAL\n"
"        uint8 regional_rsuDistanceFromAnchor_choice\n"
"        #not used choice=0 \n"
"        #Node-XY-20b choice=20\n"
"        #Node-XY-22b choice=22\n"
"        #Node-XY-24b choice=24\n"
"        #Node-XY-26b choice=26\n"
"        #Node-XY-28b choice=28\n"
"        #Node-XY-32b choice=32\n"
"        #Node-LLmD-64b choice=64\n"
"          \n"
"        int32 regional_rsuDistanceFromAnchor_node_x_lat\n"
"        int32 regional_rsuDistanceFromAnchor_node_y_lon\n"
"        #unused\n"
"        #node-Regional\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_VehicleToLanePosition\n"
"uint32 stationID\n"
"uint8 laneID\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_PrioritizationResponse\n"
"uint32 stationID\n"
"uint8 priorState#enumerated\n"
"uint8 signalGroup\n"
;
  }

  static const char* value(const ::definitions::v2x_SPAT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_SPAT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header_protocolVersion);
      stream.next(m.header_messageID);
      stream.next(m.header_stationID);
      stream.next(m.spatData_msgID);
      stream.next(m.spatData_msgSubID);
      stream.next(m.spatData_msgSubID_present);
      stream.next(m.spatData_name);
      stream.next(m.spatData_name_present);
      stream.next(m.spatData_intersections);
      stream.next(m.spatData_regional_present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_SPAT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_SPAT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_SPAT_<ContainerAllocator>& v)
  {
    s << indent << "header_protocolVersion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.header_protocolVersion);
    s << indent << "header_messageID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.header_messageID);
    s << indent << "header_stationID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.header_stationID);
    s << indent << "spatData_msgID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spatData_msgID);
    s << indent << "spatData_msgSubID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spatData_msgSubID);
    s << indent << "spatData_msgSubID_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spatData_msgSubID_present);
    s << indent << "spatData_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.spatData_name);
    s << indent << "spatData_name_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spatData_name_present);
    s << indent << "spatData_intersections[]" << std::endl;
    for (size_t i = 0; i < v.spatData_intersections.size(); ++i)
    {
      s << indent << "  spatData_intersections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >::stream(s, indent + "    ", v.spatData_intersections[i]);
    }
    s << indent << "spatData_regional_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spatData_regional_present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_SPAT_H
