// Generated by gencpp from file definitions/v2x_SPAT_AdvisorySpeed.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_SPAT_ADVISORYSPEED_H
#define DEFINITIONS_MESSAGE_V2X_SPAT_ADVISORYSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace definitions
{
template <class ContainerAllocator>
struct v2x_SPAT_AdvisorySpeed_
{
  typedef v2x_SPAT_AdvisorySpeed_<ContainerAllocator> Type;

  v2x_SPAT_AdvisorySpeed_()
    : type(0)
    , speed(0)
    , speed_present(false)
    , confidence(0)
    , confidence_present(false)
    , distance(0)
    , distance_present(false)
    , classID(0)
    , classID_present(false)
    , regional_present(false)  {
    }
  v2x_SPAT_AdvisorySpeed_(const ContainerAllocator& _alloc)
    : type(0)
    , speed(0)
    , speed_present(false)
    , confidence(0)
    , confidence_present(false)
    , distance(0)
    , distance_present(false)
    , classID(0)
    , classID_present(false)
    , regional_present(false)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint16_t _speed_type;
  _speed_type speed;

   typedef uint8_t _speed_present_type;
  _speed_present_type speed_present;

   typedef uint8_t _confidence_type;
  _confidence_type confidence;

   typedef uint8_t _confidence_present_type;
  _confidence_present_type confidence_present;

   typedef uint16_t _distance_type;
  _distance_type distance;

   typedef uint8_t _distance_present_type;
  _distance_present_type distance_present;

   typedef uint8_t _classID_type;
  _classID_type classID;

   typedef uint8_t _classID_present_type;
  _classID_present_type classID_present;

   typedef uint8_t _regional_present_type;
  _regional_present_type regional_present;





  typedef boost::shared_ptr< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_SPAT_AdvisorySpeed_

typedef ::definitions::v2x_SPAT_AdvisorySpeed_<std::allocator<void> > v2x_SPAT_AdvisorySpeed;

typedef boost::shared_ptr< ::definitions::v2x_SPAT_AdvisorySpeed > v2x_SPAT_AdvisorySpeedPtr;
typedef boost::shared_ptr< ::definitions::v2x_SPAT_AdvisorySpeed const> v2x_SPAT_AdvisorySpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.speed == rhs.speed &&
    lhs.speed_present == rhs.speed_present &&
    lhs.confidence == rhs.confidence &&
    lhs.confidence_present == rhs.confidence_present &&
    lhs.distance == rhs.distance &&
    lhs.distance_present == rhs.distance_present &&
    lhs.classID == rhs.classID &&
    lhs.classID_present == rhs.classID_present &&
    lhs.regional_present == rhs.regional_present;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9b985f243f7d5dd34f7bc6cd3bc9c5a";
  }

  static const char* value(const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9b985f243f7d5ddULL;
  static const uint64_t static_value2 = 0x34f7bc6cd3bc9c5aULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_SPAT_AdvisorySpeed";
  }

  static const char* value(const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 type#enumerated\n"
"uint16 speed\n"
"bool speed_present\n"
"uint8 confidence\n"
"bool confidence_present\n"
"uint16 distance\n"
"bool distance_present\n"
"uint8 classID\n"
"bool classID_present\n"
"#uint8 regional #unused\n"
"bool regional_present \n"
;
  }

  static const char* value(const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.speed);
      stream.next(m.speed_present);
      stream.next(m.confidence);
      stream.next(m.confidence_present);
      stream.next(m.distance);
      stream.next(m.distance_present);
      stream.next(m.classID);
      stream.next(m.classID_present);
      stream.next(m.regional_present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_SPAT_AdvisorySpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed);
    s << indent << "speed_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_present);
    s << indent << "confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confidence);
    s << indent << "confidence_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confidence_present);
    s << indent << "distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance);
    s << indent << "distance_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.distance_present);
    s << indent << "classID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classID);
    s << indent << "classID_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classID_present);
    s << indent << "regional_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.regional_present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_SPAT_ADVISORYSPEED_H
