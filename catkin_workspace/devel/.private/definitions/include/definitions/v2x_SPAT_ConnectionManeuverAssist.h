// Generated by gencpp from file definitions/v2x_SPAT_ConnectionManeuverAssist.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_SPAT_CONNECTIONMANEUVERASSIST_H
#define DEFINITIONS_MESSAGE_V2X_SPAT_CONNECTIONMANEUVERASSIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/v2x_SPAT_VehicleToLanePosition.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_SPAT_ConnectionManeuverAssist_
{
  typedef v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> Type;

  v2x_SPAT_ConnectionManeuverAssist_()
    : connectionID(0)
    , queueLength(0)
    , queueLength_present(false)
    , availableStorageLength(0)
    , availableStorageLength_present(false)
    , waitOnStop(false)
    , waitOnStop_present(false)
    , pedBicycleDetect(false)
    , pedBicycleDetect_present(false)
    , regional_vehicleToLanePositions()
    , regional_rsuDistanceFromAnchor_choice(0)
    , regional_rsuDistanceFromAnchor_node_x_lat(0)
    , regional_rsuDistanceFromAnchor_node_y_lon(0)  {
    }
  v2x_SPAT_ConnectionManeuverAssist_(const ContainerAllocator& _alloc)
    : connectionID(0)
    , queueLength(0)
    , queueLength_present(false)
    , availableStorageLength(0)
    , availableStorageLength_present(false)
    , waitOnStop(false)
    , waitOnStop_present(false)
    , pedBicycleDetect(false)
    , pedBicycleDetect_present(false)
    , regional_vehicleToLanePositions(_alloc)
    , regional_rsuDistanceFromAnchor_choice(0)
    , regional_rsuDistanceFromAnchor_node_x_lat(0)
    , regional_rsuDistanceFromAnchor_node_y_lon(0)  {
  (void)_alloc;
    }



   typedef uint8_t _connectionID_type;
  _connectionID_type connectionID;

   typedef uint16_t _queueLength_type;
  _queueLength_type queueLength;

   typedef uint8_t _queueLength_present_type;
  _queueLength_present_type queueLength_present;

   typedef uint16_t _availableStorageLength_type;
  _availableStorageLength_type availableStorageLength;

   typedef uint8_t _availableStorageLength_present_type;
  _availableStorageLength_present_type availableStorageLength_present;

   typedef uint8_t _waitOnStop_type;
  _waitOnStop_type waitOnStop;

   typedef uint8_t _waitOnStop_present_type;
  _waitOnStop_present_type waitOnStop_present;

   typedef uint8_t _pedBicycleDetect_type;
  _pedBicycleDetect_type pedBicycleDetect;

   typedef uint8_t _pedBicycleDetect_present_type;
  _pedBicycleDetect_present_type pedBicycleDetect_present;

   typedef std::vector< ::definitions::v2x_SPAT_VehicleToLanePosition_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_VehicleToLanePosition_<ContainerAllocator> >::other >  _regional_vehicleToLanePositions_type;
  _regional_vehicleToLanePositions_type regional_vehicleToLanePositions;

   typedef uint8_t _regional_rsuDistanceFromAnchor_choice_type;
  _regional_rsuDistanceFromAnchor_choice_type regional_rsuDistanceFromAnchor_choice;

   typedef int32_t _regional_rsuDistanceFromAnchor_node_x_lat_type;
  _regional_rsuDistanceFromAnchor_node_x_lat_type regional_rsuDistanceFromAnchor_node_x_lat;

   typedef int32_t _regional_rsuDistanceFromAnchor_node_y_lon_type;
  _regional_rsuDistanceFromAnchor_node_y_lon_type regional_rsuDistanceFromAnchor_node_y_lon;





  typedef boost::shared_ptr< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_SPAT_ConnectionManeuverAssist_

typedef ::definitions::v2x_SPAT_ConnectionManeuverAssist_<std::allocator<void> > v2x_SPAT_ConnectionManeuverAssist;

typedef boost::shared_ptr< ::definitions::v2x_SPAT_ConnectionManeuverAssist > v2x_SPAT_ConnectionManeuverAssistPtr;
typedef boost::shared_ptr< ::definitions::v2x_SPAT_ConnectionManeuverAssist const> v2x_SPAT_ConnectionManeuverAssistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator2> & rhs)
{
  return lhs.connectionID == rhs.connectionID &&
    lhs.queueLength == rhs.queueLength &&
    lhs.queueLength_present == rhs.queueLength_present &&
    lhs.availableStorageLength == rhs.availableStorageLength &&
    lhs.availableStorageLength_present == rhs.availableStorageLength_present &&
    lhs.waitOnStop == rhs.waitOnStop &&
    lhs.waitOnStop_present == rhs.waitOnStop_present &&
    lhs.pedBicycleDetect == rhs.pedBicycleDetect &&
    lhs.pedBicycleDetect_present == rhs.pedBicycleDetect_present &&
    lhs.regional_vehicleToLanePositions == rhs.regional_vehicleToLanePositions &&
    lhs.regional_rsuDistanceFromAnchor_choice == rhs.regional_rsuDistanceFromAnchor_choice &&
    lhs.regional_rsuDistanceFromAnchor_node_x_lat == rhs.regional_rsuDistanceFromAnchor_node_x_lat &&
    lhs.regional_rsuDistanceFromAnchor_node_y_lon == rhs.regional_rsuDistanceFromAnchor_node_y_lon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfd5c06153f691c0e5fca16d1db151cc";
  }

  static const char* value(const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfd5c06153f691c0ULL;
  static const uint64_t static_value2 = 0xe5fca16d1db151ccULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_SPAT_ConnectionManeuverAssist";
  }

  static const char* value(const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 connectionID\n"
"uint16 queueLength\n"
"bool queueLength_present\n"
"uint16 availableStorageLength\n"
"bool availableStorageLength_present\n"
"bool waitOnStop\n"
"bool waitOnStop_present\n"
"bool pedBicycleDetect\n"
"bool pedBicycleDetect_present\n"
"\n"
"#RegionalConnectionManeuverAssist regional\n"
"    v2x_SPAT_VehicleToLanePosition[] regional_vehicleToLanePositions\n"
"    #NodeOffsetPoint OPTIONAL\n"
"        uint8 regional_rsuDistanceFromAnchor_choice\n"
"        #not used choice=0 \n"
"        #Node-XY-20b choice=20\n"
"        #Node-XY-22b choice=22\n"
"        #Node-XY-24b choice=24\n"
"        #Node-XY-26b choice=26\n"
"        #Node-XY-28b choice=28\n"
"        #Node-XY-32b choice=32\n"
"        #Node-LLmD-64b choice=64\n"
"          \n"
"        int32 regional_rsuDistanceFromAnchor_node_x_lat\n"
"        int32 regional_rsuDistanceFromAnchor_node_y_lon\n"
"        #unused\n"
"        #node-Regional\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_VehicleToLanePosition\n"
"uint32 stationID\n"
"uint8 laneID\n"
;
  }

  static const char* value(const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.connectionID);
      stream.next(m.queueLength);
      stream.next(m.queueLength_present);
      stream.next(m.availableStorageLength);
      stream.next(m.availableStorageLength_present);
      stream.next(m.waitOnStop);
      stream.next(m.waitOnStop_present);
      stream.next(m.pedBicycleDetect);
      stream.next(m.pedBicycleDetect_present);
      stream.next(m.regional_vehicleToLanePositions);
      stream.next(m.regional_rsuDistanceFromAnchor_choice);
      stream.next(m.regional_rsuDistanceFromAnchor_node_x_lat);
      stream.next(m.regional_rsuDistanceFromAnchor_node_y_lon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_SPAT_ConnectionManeuverAssist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator>& v)
  {
    s << indent << "connectionID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connectionID);
    s << indent << "queueLength: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.queueLength);
    s << indent << "queueLength_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.queueLength_present);
    s << indent << "availableStorageLength: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.availableStorageLength);
    s << indent << "availableStorageLength_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.availableStorageLength_present);
    s << indent << "waitOnStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waitOnStop);
    s << indent << "waitOnStop_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waitOnStop_present);
    s << indent << "pedBicycleDetect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pedBicycleDetect);
    s << indent << "pedBicycleDetect_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pedBicycleDetect_present);
    s << indent << "regional_vehicleToLanePositions[]" << std::endl;
    for (size_t i = 0; i < v.regional_vehicleToLanePositions.size(); ++i)
    {
      s << indent << "  regional_vehicleToLanePositions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_VehicleToLanePosition_<ContainerAllocator> >::stream(s, indent + "    ", v.regional_vehicleToLanePositions[i]);
    }
    s << indent << "regional_rsuDistanceFromAnchor_choice: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.regional_rsuDistanceFromAnchor_choice);
    s << indent << "regional_rsuDistanceFromAnchor_node_x_lat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.regional_rsuDistanceFromAnchor_node_x_lat);
    s << indent << "regional_rsuDistanceFromAnchor_node_y_lon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.regional_rsuDistanceFromAnchor_node_y_lon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_SPAT_CONNECTIONMANEUVERASSIST_H
