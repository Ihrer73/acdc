// Generated by gencpp from file definitions/v2x_SPAT_IntersectionState.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_SPAT_INTERSECTIONSTATE_H
#define DEFINITIONS_MESSAGE_V2X_SPAT_INTERSECTIONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/ASN_bitstring.h>
#include <definitions/v2x_SPAT_LaneID.h>
#include <definitions/v2x_SPAT_MovementState.h>
#include <definitions/v2x_SPAT_ConnectionManeuverAssist.h>
#include <definitions/v2x_SPAT_PrioritizationResponse.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_SPAT_IntersectionState_
{
  typedef v2x_SPAT_IntersectionState_<ContainerAllocator> Type;

  v2x_SPAT_IntersectionState_()
    : name()
    , name_present(false)
    , id_region(0)
    , id_region_present(false)
    , id_id(0)
    , revision(0)
    , status()
    , moy(0)
    , moy_present(false)
    , timeStamp(0)
    , timeStamp_present(false)
    , enabledLanes()
    , enabledLanes_present(false)
    , states()
    , maneuverAssistList()
    , maneuverAssistList_present(false)
    , priority()
    , priority_present(false)
    , preempt()
    , preempt_present(false)
    , regional()
    , regional_present(false)  {
    }
  v2x_SPAT_IntersectionState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , name_present(false)
    , id_region(0)
    , id_region_present(false)
    , id_id(0)
    , revision(0)
    , status(_alloc)
    , moy(0)
    , moy_present(false)
    , timeStamp(0)
    , timeStamp_present(false)
    , enabledLanes(_alloc)
    , enabledLanes_present(false)
    , states(_alloc)
    , maneuverAssistList(_alloc)
    , maneuverAssistList_present(false)
    , priority(_alloc)
    , priority_present(false)
    , preempt(_alloc)
    , preempt_present(false)
    , regional(_alloc)
    , regional_present(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _name_present_type;
  _name_present_type name_present;

   typedef uint16_t _id_region_type;
  _id_region_type id_region;

   typedef uint8_t _id_region_present_type;
  _id_region_present_type id_region_present;

   typedef uint16_t _id_id_type;
  _id_id_type id_id;

   typedef uint8_t _revision_type;
  _revision_type revision;

   typedef  ::definitions::ASN_bitstring_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef uint32_t _moy_type;
  _moy_type moy;

   typedef uint8_t _moy_present_type;
  _moy_present_type moy_present;

   typedef uint32_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef uint8_t _timeStamp_present_type;
  _timeStamp_present_type timeStamp_present;

   typedef std::vector< ::definitions::v2x_SPAT_LaneID_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_LaneID_<ContainerAllocator> >::other >  _enabledLanes_type;
  _enabledLanes_type enabledLanes;

   typedef uint8_t _enabledLanes_present_type;
  _enabledLanes_present_type enabledLanes_present;

   typedef std::vector< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >::other >  _states_type;
  _states_type states;

   typedef std::vector< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >::other >  _maneuverAssistList_type;
  _maneuverAssistList_type maneuverAssistList;

   typedef uint8_t _maneuverAssistList_present_type;
  _maneuverAssistList_present_type maneuverAssistList_present;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _priority_type;
  _priority_type priority;

   typedef uint8_t _priority_present_type;
  _priority_present_type priority_present;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _preempt_type;
  _preempt_type preempt;

   typedef uint8_t _preempt_present_type;
  _preempt_present_type preempt_present;

   typedef std::vector< ::definitions::v2x_SPAT_PrioritizationResponse_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_PrioritizationResponse_<ContainerAllocator> >::other >  _regional_type;
  _regional_type regional;

   typedef uint8_t _regional_present_type;
  _regional_present_type regional_present;





  typedef boost::shared_ptr< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_SPAT_IntersectionState_

typedef ::definitions::v2x_SPAT_IntersectionState_<std::allocator<void> > v2x_SPAT_IntersectionState;

typedef boost::shared_ptr< ::definitions::v2x_SPAT_IntersectionState > v2x_SPAT_IntersectionStatePtr;
typedef boost::shared_ptr< ::definitions::v2x_SPAT_IntersectionState const> v2x_SPAT_IntersectionStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.name_present == rhs.name_present &&
    lhs.id_region == rhs.id_region &&
    lhs.id_region_present == rhs.id_region_present &&
    lhs.id_id == rhs.id_id &&
    lhs.revision == rhs.revision &&
    lhs.status == rhs.status &&
    lhs.moy == rhs.moy &&
    lhs.moy_present == rhs.moy_present &&
    lhs.timeStamp == rhs.timeStamp &&
    lhs.timeStamp_present == rhs.timeStamp_present &&
    lhs.enabledLanes == rhs.enabledLanes &&
    lhs.enabledLanes_present == rhs.enabledLanes_present &&
    lhs.states == rhs.states &&
    lhs.maneuverAssistList == rhs.maneuverAssistList &&
    lhs.maneuverAssistList_present == rhs.maneuverAssistList_present &&
    lhs.priority == rhs.priority &&
    lhs.priority_present == rhs.priority_present &&
    lhs.preempt == rhs.preempt &&
    lhs.preempt_present == rhs.preempt_present &&
    lhs.regional == rhs.regional &&
    lhs.regional_present == rhs.regional_present;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "224b7a034dedbe593efc810a744dc511";
  }

  static const char* value(const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x224b7a034dedbe59ULL;
  static const uint64_t static_value2 = 0x3efc810a744dc511ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_SPAT_IntersectionState";
  }

  static const char* value(const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name \n"
"bool name_present\n"
"#IntersectionReferenceID id\n"
"    uint16 id_region\n"
"    bool id_region_present\n"
"    uint16 id_id\n"
"uint8 revision\n"
"ASN_bitstring status\n"
"uint32 moy\n"
"bool moy_present\n"
"uint32 timeStamp\n"
"bool timeStamp_present\n"
"#uint8[] enabledLanes #alternative \n"
"v2x_SPAT_LaneID[] enabledLanes\n"
"bool enabledLanes_present\n"
"v2x_SPAT_MovementState[] states#enumerated\n"
"v2x_SPAT_ConnectionManeuverAssist[] maneuverAssistList\n"
"bool maneuverAssistList_present\n"
"uint8[] priority#octet string\n"
"bool priority_present\n"
"uint8[] preempt#octet string\n"
"bool preempt_present\n"
"v2x_SPAT_PrioritizationResponse[] regional #enumerated\n"
"bool regional_present\n"
"================================================================================\n"
"MSG: definitions/ASN_bitstring\n"
"uint8[] buf\n"
"uint8 bits_unused\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_LaneID\n"
"uint8 laneID\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_MovementState\n"
"string movementName\n"
"bool movementName_present\n"
"uint8 signalGroup\n"
"v2x_SPAT_MovementEvent[] state_time_speed#enumerated\n"
"v2x_SPAT_ConnectionManeuverAssist[] maneuverAssistList\n"
"bool maneuverAssistList_present\n"
"\n"
"#unused\n"
"#RegionalMovementState_regional\n"
"#bool RegionalMovementState_regional_present\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_MovementEvent\n"
"uint8 eventState#states\n"
"#TimeChangeDetails timing OPTIONAL\n"
"    uint16 timing_startTime\n"
"    bool timing_startTime_present\n"
"    uint16 timing_minEndTime\n"
"    uint16 timing_maxEndTime\n"
"    bool timing_maxEndTime_present\n"
"    uint16 timing_likelyTime\n"
"    bool timing_likelyTime_present\n"
"    uint8 timing_confidence\n"
"    bool timing_confidence_present\n"
"    uint16 timing_nextTime\n"
"    bool timing_nextTime_present\n"
"bool timing_present\n"
"v2x_SPAT_AdvisorySpeed[] speeds#enumerated\n"
"bool speeds_present\n"
"# regional unused\n"
"bool regional_present\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_AdvisorySpeed\n"
"uint8 type#enumerated\n"
"uint16 speed\n"
"bool speed_present\n"
"uint8 confidence\n"
"bool confidence_present\n"
"uint16 distance\n"
"bool distance_present\n"
"uint8 classID\n"
"bool classID_present\n"
"#uint8 regional #unused\n"
"bool regional_present \n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_ConnectionManeuverAssist\n"
"uint8 connectionID\n"
"uint16 queueLength\n"
"bool queueLength_present\n"
"uint16 availableStorageLength\n"
"bool availableStorageLength_present\n"
"bool waitOnStop\n"
"bool waitOnStop_present\n"
"bool pedBicycleDetect\n"
"bool pedBicycleDetect_present\n"
"\n"
"#RegionalConnectionManeuverAssist regional\n"
"    v2x_SPAT_VehicleToLanePosition[] regional_vehicleToLanePositions\n"
"    #NodeOffsetPoint OPTIONAL\n"
"        uint8 regional_rsuDistanceFromAnchor_choice\n"
"        #not used choice=0 \n"
"        #Node-XY-20b choice=20\n"
"        #Node-XY-22b choice=22\n"
"        #Node-XY-24b choice=24\n"
"        #Node-XY-26b choice=26\n"
"        #Node-XY-28b choice=28\n"
"        #Node-XY-32b choice=32\n"
"        #Node-LLmD-64b choice=64\n"
"          \n"
"        int32 regional_rsuDistanceFromAnchor_node_x_lat\n"
"        int32 regional_rsuDistanceFromAnchor_node_y_lon\n"
"        #unused\n"
"        #node-Regional\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_VehicleToLanePosition\n"
"uint32 stationID\n"
"uint8 laneID\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_PrioritizationResponse\n"
"uint32 stationID\n"
"uint8 priorState#enumerated\n"
"uint8 signalGroup\n"
;
  }

  static const char* value(const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.name_present);
      stream.next(m.id_region);
      stream.next(m.id_region_present);
      stream.next(m.id_id);
      stream.next(m.revision);
      stream.next(m.status);
      stream.next(m.moy);
      stream.next(m.moy_present);
      stream.next(m.timeStamp);
      stream.next(m.timeStamp_present);
      stream.next(m.enabledLanes);
      stream.next(m.enabledLanes_present);
      stream.next(m.states);
      stream.next(m.maneuverAssistList);
      stream.next(m.maneuverAssistList_present);
      stream.next(m.priority);
      stream.next(m.priority_present);
      stream.next(m.preempt);
      stream.next(m.preempt_present);
      stream.next(m.regional);
      stream.next(m.regional_present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_SPAT_IntersectionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_SPAT_IntersectionState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "name_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.name_present);
    s << indent << "id_region: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id_region);
    s << indent << "id_region_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id_region_present);
    s << indent << "id_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id_id);
    s << indent << "revision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.revision);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::definitions::ASN_bitstring_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "moy: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.moy);
    s << indent << "moy_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moy_present);
    s << indent << "timeStamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "timeStamp_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timeStamp_present);
    s << indent << "enabledLanes[]" << std::endl;
    for (size_t i = 0; i < v.enabledLanes.size(); ++i)
    {
      s << indent << "  enabledLanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_LaneID_<ContainerAllocator> >::stream(s, indent + "    ", v.enabledLanes[i]);
    }
    s << indent << "enabledLanes_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabledLanes_present);
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >::stream(s, indent + "    ", v.states[i]);
    }
    s << indent << "maneuverAssistList[]" << std::endl;
    for (size_t i = 0; i < v.maneuverAssistList.size(); ++i)
    {
      s << indent << "  maneuverAssistList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >::stream(s, indent + "    ", v.maneuverAssistList[i]);
    }
    s << indent << "maneuverAssistList_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maneuverAssistList_present);
    s << indent << "priority[]" << std::endl;
    for (size_t i = 0; i < v.priority.size(); ++i)
    {
      s << indent << "  priority[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.priority[i]);
    }
    s << indent << "priority_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority_present);
    s << indent << "preempt[]" << std::endl;
    for (size_t i = 0; i < v.preempt.size(); ++i)
    {
      s << indent << "  preempt[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.preempt[i]);
    }
    s << indent << "preempt_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.preempt_present);
    s << indent << "regional[]" << std::endl;
    for (size_t i = 0; i < v.regional.size(); ++i)
    {
      s << indent << "  regional[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_PrioritizationResponse_<ContainerAllocator> >::stream(s, indent + "    ", v.regional[i]);
    }
    s << indent << "regional_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.regional_present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_SPAT_INTERSECTIONSTATE_H
