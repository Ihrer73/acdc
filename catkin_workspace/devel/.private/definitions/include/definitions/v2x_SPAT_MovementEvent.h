// Generated by gencpp from file definitions/v2x_SPAT_MovementEvent.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_SPAT_MOVEMENTEVENT_H
#define DEFINITIONS_MESSAGE_V2X_SPAT_MOVEMENTEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/v2x_SPAT_AdvisorySpeed.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_SPAT_MovementEvent_
{
  typedef v2x_SPAT_MovementEvent_<ContainerAllocator> Type;

  v2x_SPAT_MovementEvent_()
    : eventState(0)
    , timing_startTime(0)
    , timing_startTime_present(false)
    , timing_minEndTime(0)
    , timing_maxEndTime(0)
    , timing_maxEndTime_present(false)
    , timing_likelyTime(0)
    , timing_likelyTime_present(false)
    , timing_confidence(0)
    , timing_confidence_present(false)
    , timing_nextTime(0)
    , timing_nextTime_present(false)
    , timing_present(false)
    , speeds()
    , speeds_present(false)
    , regional_present(false)  {
    }
  v2x_SPAT_MovementEvent_(const ContainerAllocator& _alloc)
    : eventState(0)
    , timing_startTime(0)
    , timing_startTime_present(false)
    , timing_minEndTime(0)
    , timing_maxEndTime(0)
    , timing_maxEndTime_present(false)
    , timing_likelyTime(0)
    , timing_likelyTime_present(false)
    , timing_confidence(0)
    , timing_confidence_present(false)
    , timing_nextTime(0)
    , timing_nextTime_present(false)
    , timing_present(false)
    , speeds(_alloc)
    , speeds_present(false)
    , regional_present(false)  {
  (void)_alloc;
    }



   typedef uint8_t _eventState_type;
  _eventState_type eventState;

   typedef uint16_t _timing_startTime_type;
  _timing_startTime_type timing_startTime;

   typedef uint8_t _timing_startTime_present_type;
  _timing_startTime_present_type timing_startTime_present;

   typedef uint16_t _timing_minEndTime_type;
  _timing_minEndTime_type timing_minEndTime;

   typedef uint16_t _timing_maxEndTime_type;
  _timing_maxEndTime_type timing_maxEndTime;

   typedef uint8_t _timing_maxEndTime_present_type;
  _timing_maxEndTime_present_type timing_maxEndTime_present;

   typedef uint16_t _timing_likelyTime_type;
  _timing_likelyTime_type timing_likelyTime;

   typedef uint8_t _timing_likelyTime_present_type;
  _timing_likelyTime_present_type timing_likelyTime_present;

   typedef uint8_t _timing_confidence_type;
  _timing_confidence_type timing_confidence;

   typedef uint8_t _timing_confidence_present_type;
  _timing_confidence_present_type timing_confidence_present;

   typedef uint16_t _timing_nextTime_type;
  _timing_nextTime_type timing_nextTime;

   typedef uint8_t _timing_nextTime_present_type;
  _timing_nextTime_present_type timing_nextTime_present;

   typedef uint8_t _timing_present_type;
  _timing_present_type timing_present;

   typedef std::vector< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >::other >  _speeds_type;
  _speeds_type speeds;

   typedef uint8_t _speeds_present_type;
  _speeds_present_type speeds_present;

   typedef uint8_t _regional_present_type;
  _regional_present_type regional_present;





  typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_SPAT_MovementEvent_

typedef ::definitions::v2x_SPAT_MovementEvent_<std::allocator<void> > v2x_SPAT_MovementEvent;

typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementEvent > v2x_SPAT_MovementEventPtr;
typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementEvent const> v2x_SPAT_MovementEventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator2> & rhs)
{
  return lhs.eventState == rhs.eventState &&
    lhs.timing_startTime == rhs.timing_startTime &&
    lhs.timing_startTime_present == rhs.timing_startTime_present &&
    lhs.timing_minEndTime == rhs.timing_minEndTime &&
    lhs.timing_maxEndTime == rhs.timing_maxEndTime &&
    lhs.timing_maxEndTime_present == rhs.timing_maxEndTime_present &&
    lhs.timing_likelyTime == rhs.timing_likelyTime &&
    lhs.timing_likelyTime_present == rhs.timing_likelyTime_present &&
    lhs.timing_confidence == rhs.timing_confidence &&
    lhs.timing_confidence_present == rhs.timing_confidence_present &&
    lhs.timing_nextTime == rhs.timing_nextTime &&
    lhs.timing_nextTime_present == rhs.timing_nextTime_present &&
    lhs.timing_present == rhs.timing_present &&
    lhs.speeds == rhs.speeds &&
    lhs.speeds_present == rhs.speeds_present &&
    lhs.regional_present == rhs.regional_present;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "610b762ffa0933b41e08372a63dda623";
  }

  static const char* value(const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x610b762ffa0933b4ULL;
  static const uint64_t static_value2 = 0x1e08372a63dda623ULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_SPAT_MovementEvent";
  }

  static const char* value(const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 eventState#states\n"
"#TimeChangeDetails timing OPTIONAL\n"
"    uint16 timing_startTime\n"
"    bool timing_startTime_present\n"
"    uint16 timing_minEndTime\n"
"    uint16 timing_maxEndTime\n"
"    bool timing_maxEndTime_present\n"
"    uint16 timing_likelyTime\n"
"    bool timing_likelyTime_present\n"
"    uint8 timing_confidence\n"
"    bool timing_confidence_present\n"
"    uint16 timing_nextTime\n"
"    bool timing_nextTime_present\n"
"bool timing_present\n"
"v2x_SPAT_AdvisorySpeed[] speeds#enumerated\n"
"bool speeds_present\n"
"# regional unused\n"
"bool regional_present\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_AdvisorySpeed\n"
"uint8 type#enumerated\n"
"uint16 speed\n"
"bool speed_present\n"
"uint8 confidence\n"
"bool confidence_present\n"
"uint16 distance\n"
"bool distance_present\n"
"uint8 classID\n"
"bool classID_present\n"
"#uint8 regional #unused\n"
"bool regional_present \n"
;
  }

  static const char* value(const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eventState);
      stream.next(m.timing_startTime);
      stream.next(m.timing_startTime_present);
      stream.next(m.timing_minEndTime);
      stream.next(m.timing_maxEndTime);
      stream.next(m.timing_maxEndTime_present);
      stream.next(m.timing_likelyTime);
      stream.next(m.timing_likelyTime_present);
      stream.next(m.timing_confidence);
      stream.next(m.timing_confidence_present);
      stream.next(m.timing_nextTime);
      stream.next(m.timing_nextTime_present);
      stream.next(m.timing_present);
      stream.next(m.speeds);
      stream.next(m.speeds_present);
      stream.next(m.regional_present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_SPAT_MovementEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator>& v)
  {
    s << indent << "eventState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eventState);
    s << indent << "timing_startTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timing_startTime);
    s << indent << "timing_startTime_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timing_startTime_present);
    s << indent << "timing_minEndTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timing_minEndTime);
    s << indent << "timing_maxEndTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timing_maxEndTime);
    s << indent << "timing_maxEndTime_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timing_maxEndTime_present);
    s << indent << "timing_likelyTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timing_likelyTime);
    s << indent << "timing_likelyTime_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timing_likelyTime_present);
    s << indent << "timing_confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timing_confidence);
    s << indent << "timing_confidence_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timing_confidence_present);
    s << indent << "timing_nextTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timing_nextTime);
    s << indent << "timing_nextTime_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timing_nextTime_present);
    s << indent << "timing_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timing_present);
    s << indent << "speeds[]" << std::endl;
    for (size_t i = 0; i < v.speeds.size(); ++i)
    {
      s << indent << "  speeds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_AdvisorySpeed_<ContainerAllocator> >::stream(s, indent + "    ", v.speeds[i]);
    }
    s << indent << "speeds_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speeds_present);
    s << indent << "regional_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.regional_present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_SPAT_MOVEMENTEVENT_H
