// Generated by gencpp from file definitions/v2x_SPAT_MovementState.msg
// DO NOT EDIT!


#ifndef DEFINITIONS_MESSAGE_V2X_SPAT_MOVEMENTSTATE_H
#define DEFINITIONS_MESSAGE_V2X_SPAT_MOVEMENTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <definitions/v2x_SPAT_MovementEvent.h>
#include <definitions/v2x_SPAT_ConnectionManeuverAssist.h>

namespace definitions
{
template <class ContainerAllocator>
struct v2x_SPAT_MovementState_
{
  typedef v2x_SPAT_MovementState_<ContainerAllocator> Type;

  v2x_SPAT_MovementState_()
    : movementName()
    , movementName_present(false)
    , signalGroup(0)
    , state_time_speed()
    , maneuverAssistList()
    , maneuverAssistList_present(false)  {
    }
  v2x_SPAT_MovementState_(const ContainerAllocator& _alloc)
    : movementName(_alloc)
    , movementName_present(false)
    , signalGroup(0)
    , state_time_speed(_alloc)
    , maneuverAssistList(_alloc)
    , maneuverAssistList_present(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _movementName_type;
  _movementName_type movementName;

   typedef uint8_t _movementName_present_type;
  _movementName_present_type movementName_present;

   typedef uint8_t _signalGroup_type;
  _signalGroup_type signalGroup;

   typedef std::vector< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >::other >  _state_time_speed_type;
  _state_time_speed_type state_time_speed;

   typedef std::vector< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >::other >  _maneuverAssistList_type;
  _maneuverAssistList_type maneuverAssistList;

   typedef uint8_t _maneuverAssistList_present_type;
  _maneuverAssistList_present_type maneuverAssistList_present;





  typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_SPAT_MovementState_

typedef ::definitions::v2x_SPAT_MovementState_<std::allocator<void> > v2x_SPAT_MovementState;

typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementState > v2x_SPAT_MovementStatePtr;
typedef boost::shared_ptr< ::definitions::v2x_SPAT_MovementState const> v2x_SPAT_MovementStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator2> & rhs)
{
  return lhs.movementName == rhs.movementName &&
    lhs.movementName_present == rhs.movementName_present &&
    lhs.signalGroup == rhs.signalGroup &&
    lhs.state_time_speed == rhs.state_time_speed &&
    lhs.maneuverAssistList == rhs.maneuverAssistList &&
    lhs.maneuverAssistList_present == rhs.maneuverAssistList_present;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator1> & lhs, const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace definitions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1a6d19d6d33948823b4f9051c9bec8e";
  }

  static const char* value(const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1a6d19d6d339488ULL;
  static const uint64_t static_value2 = 0x23b4f9051c9bec8eULL;
};

template<class ContainerAllocator>
struct DataType< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "definitions/v2x_SPAT_MovementState";
  }

  static const char* value(const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string movementName\n"
"bool movementName_present\n"
"uint8 signalGroup\n"
"v2x_SPAT_MovementEvent[] state_time_speed#enumerated\n"
"v2x_SPAT_ConnectionManeuverAssist[] maneuverAssistList\n"
"bool maneuverAssistList_present\n"
"\n"
"#unused\n"
"#RegionalMovementState_regional\n"
"#bool RegionalMovementState_regional_present\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_MovementEvent\n"
"uint8 eventState#states\n"
"#TimeChangeDetails timing OPTIONAL\n"
"    uint16 timing_startTime\n"
"    bool timing_startTime_present\n"
"    uint16 timing_minEndTime\n"
"    uint16 timing_maxEndTime\n"
"    bool timing_maxEndTime_present\n"
"    uint16 timing_likelyTime\n"
"    bool timing_likelyTime_present\n"
"    uint8 timing_confidence\n"
"    bool timing_confidence_present\n"
"    uint16 timing_nextTime\n"
"    bool timing_nextTime_present\n"
"bool timing_present\n"
"v2x_SPAT_AdvisorySpeed[] speeds#enumerated\n"
"bool speeds_present\n"
"# regional unused\n"
"bool regional_present\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_AdvisorySpeed\n"
"uint8 type#enumerated\n"
"uint16 speed\n"
"bool speed_present\n"
"uint8 confidence\n"
"bool confidence_present\n"
"uint16 distance\n"
"bool distance_present\n"
"uint8 classID\n"
"bool classID_present\n"
"#uint8 regional #unused\n"
"bool regional_present \n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_ConnectionManeuverAssist\n"
"uint8 connectionID\n"
"uint16 queueLength\n"
"bool queueLength_present\n"
"uint16 availableStorageLength\n"
"bool availableStorageLength_present\n"
"bool waitOnStop\n"
"bool waitOnStop_present\n"
"bool pedBicycleDetect\n"
"bool pedBicycleDetect_present\n"
"\n"
"#RegionalConnectionManeuverAssist regional\n"
"    v2x_SPAT_VehicleToLanePosition[] regional_vehicleToLanePositions\n"
"    #NodeOffsetPoint OPTIONAL\n"
"        uint8 regional_rsuDistanceFromAnchor_choice\n"
"        #not used choice=0 \n"
"        #Node-XY-20b choice=20\n"
"        #Node-XY-22b choice=22\n"
"        #Node-XY-24b choice=24\n"
"        #Node-XY-26b choice=26\n"
"        #Node-XY-28b choice=28\n"
"        #Node-XY-32b choice=32\n"
"        #Node-LLmD-64b choice=64\n"
"          \n"
"        int32 regional_rsuDistanceFromAnchor_node_x_lat\n"
"        int32 regional_rsuDistanceFromAnchor_node_y_lon\n"
"        #unused\n"
"        #node-Regional\n"
"================================================================================\n"
"MSG: definitions/v2x_SPAT_VehicleToLanePosition\n"
"uint32 stationID\n"
"uint8 laneID\n"
;
  }

  static const char* value(const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.movementName);
      stream.next(m.movementName_present);
      stream.next(m.signalGroup);
      stream.next(m.state_time_speed);
      stream.next(m.maneuverAssistList);
      stream.next(m.maneuverAssistList_present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_SPAT_MovementState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::definitions::v2x_SPAT_MovementState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::definitions::v2x_SPAT_MovementState_<ContainerAllocator>& v)
  {
    s << indent << "movementName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.movementName);
    s << indent << "movementName_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.movementName_present);
    s << indent << "signalGroup: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signalGroup);
    s << indent << "state_time_speed[]" << std::endl;
    for (size_t i = 0; i < v.state_time_speed.size(); ++i)
    {
      s << indent << "  state_time_speed[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_MovementEvent_<ContainerAllocator> >::stream(s, indent + "    ", v.state_time_speed[i]);
    }
    s << indent << "maneuverAssistList[]" << std::endl;
    for (size_t i = 0; i < v.maneuverAssistList.size(); ++i)
    {
      s << indent << "  maneuverAssistList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::definitions::v2x_SPAT_ConnectionManeuverAssist_<ContainerAllocator> >::stream(s, indent + "    ", v.maneuverAssistList[i]);
    }
    s << indent << "maneuverAssistList_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maneuverAssistList_present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFINITIONS_MESSAGE_V2X_SPAT_MOVEMENTSTATE_H
