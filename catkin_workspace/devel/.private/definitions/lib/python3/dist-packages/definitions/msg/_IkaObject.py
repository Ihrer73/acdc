# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/IkaObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg
import genpy
import std_msgs.msg

class IkaObject(genpy.Message):
  _md5sum = "24431825d49834ab804cd1c3932b32b4"
  _type = "definitions/IkaObject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# Motion Model Attributes
uint8 IdMotionModel				 # Motionmodel type 0=UNKNOWN; 1=CV; 2=CA; 3=CTRV; 4=CTRA
float32[] fMean                  # Statevector, containing attributes depend on chosen motion model
float32[] fCovariance            # Covariance-Matrix, containing attributes depend on chosen motion model

# additional relative properties
# reference is moving base_link instead of zero velocity base_link
float32 fRelVelX
float32 fRelVelY
float32 fRelAccX
float32 fRelAccY			

# Reference Point
uint8 RefLocation				# Sensor's object reference location
float32 fRefX					# X-Position of the reference point
float32 fRefY					# Y-Position of the reference point

# Object Meta Data
uint16 IdInternal               # Internal ID of the object inside the sensor.
int16 IdLane                    # Id of the lane the car is driving on. usually not used.
uint16 IdType                   # Type of the detected object.
float32[] fClassProbability		# Vector of class-wise probabilities [0..1] sum of all entries is always 1
float32 fExistenceProbability   # [0..1]

# Measurement Meta Data
uint16 IdExternal               # Source ID of the sensor.
IkaSensorStamp[] measHist       # History of measurements of this object.
time birthStamp                 # ROS time stamp of first occurrence of object
bool bObjectValid               # true if object contains any relevant information. false for gaps in objects vector.
bool bObjectNew                 # true if object got measured for the first time in the current time stamp.
bool bObjectMeasured            # true if object is being measured by a sensor in the current time stamp.

#for enum types see definitions/include/definitions/utility/object_definitions.h
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: definitions/IkaSensorStamp
uint16 IdSensor                 # Source ID of the measuring sensor (see enums)
uint16 IdObjectWithinSensor     # IdInternal of the measured object within the sensor's object list
time measuredStamp              # ROS time stamp of when the sensor measured the object

#for enum types see definitions/utility/object_definitions.h
"""
  __slots__ = ['header','IdMotionModel','fMean','fCovariance','fRelVelX','fRelVelY','fRelAccX','fRelAccY','RefLocation','fRefX','fRefY','IdInternal','IdLane','IdType','fClassProbability','fExistenceProbability','IdExternal','measHist','birthStamp','bObjectValid','bObjectNew','bObjectMeasured']
  _slot_types = ['std_msgs/Header','uint8','float32[]','float32[]','float32','float32','float32','float32','uint8','float32','float32','uint16','int16','uint16','float32[]','float32','uint16','definitions/IkaSensorStamp[]','time','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,IdMotionModel,fMean,fCovariance,fRelVelX,fRelVelY,fRelAccX,fRelAccY,RefLocation,fRefX,fRefY,IdInternal,IdLane,IdType,fClassProbability,fExistenceProbability,IdExternal,measHist,birthStamp,bObjectValid,bObjectNew,bObjectMeasured

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IkaObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.IdMotionModel is None:
        self.IdMotionModel = 0
      if self.fMean is None:
        self.fMean = []
      if self.fCovariance is None:
        self.fCovariance = []
      if self.fRelVelX is None:
        self.fRelVelX = 0.
      if self.fRelVelY is None:
        self.fRelVelY = 0.
      if self.fRelAccX is None:
        self.fRelAccX = 0.
      if self.fRelAccY is None:
        self.fRelAccY = 0.
      if self.RefLocation is None:
        self.RefLocation = 0
      if self.fRefX is None:
        self.fRefX = 0.
      if self.fRefY is None:
        self.fRefY = 0.
      if self.IdInternal is None:
        self.IdInternal = 0
      if self.IdLane is None:
        self.IdLane = 0
      if self.IdType is None:
        self.IdType = 0
      if self.fClassProbability is None:
        self.fClassProbability = []
      if self.fExistenceProbability is None:
        self.fExistenceProbability = 0.
      if self.IdExternal is None:
        self.IdExternal = 0
      if self.measHist is None:
        self.measHist = []
      if self.birthStamp is None:
        self.birthStamp = genpy.Time()
      if self.bObjectValid is None:
        self.bObjectValid = False
      if self.bObjectNew is None:
        self.bObjectNew = False
      if self.bObjectMeasured is None:
        self.bObjectMeasured = False
    else:
      self.header = std_msgs.msg.Header()
      self.IdMotionModel = 0
      self.fMean = []
      self.fCovariance = []
      self.fRelVelX = 0.
      self.fRelVelY = 0.
      self.fRelAccX = 0.
      self.fRelAccY = 0.
      self.RefLocation = 0
      self.fRefX = 0.
      self.fRefY = 0.
      self.IdInternal = 0
      self.IdLane = 0
      self.IdType = 0
      self.fClassProbability = []
      self.fExistenceProbability = 0.
      self.IdExternal = 0
      self.measHist = []
      self.birthStamp = genpy.Time()
      self.bObjectValid = False
      self.bObjectNew = False
      self.bObjectMeasured = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IdMotionModel
      buff.write(_get_struct_B().pack(_x))
      length = len(self.fMean)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fMean))
      length = len(self.fCovariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fCovariance))
      _x = self
      buff.write(_get_struct_4fB2fHhH().pack(_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType))
      length = len(self.fClassProbability)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fClassProbability))
      _x = self
      buff.write(_get_struct_fH().pack(_x.fExistenceProbability, _x.IdExternal))
      length = len(self.measHist)
      buff.write(_struct_I.pack(length))
      for val1 in self.measHist:
        _x = val1
        buff.write(_get_struct_2H().pack(_x.IdSensor, _x.IdObjectWithinSensor))
        _v1 = val1.measuredStamp
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_2I3B().pack(_x.birthStamp.secs, _x.birthStamp.nsecs, _x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.measHist is None:
        self.measHist = None
      if self.birthStamp is None:
        self.birthStamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.IdMotionModel,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fMean = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fCovariance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 31
      (_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType,) = _get_struct_4fB2fHhH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fClassProbability = s.unpack(str[start:end])
      _x = self
      start = end
      end += 6
      (_x.fExistenceProbability, _x.IdExternal,) = _get_struct_fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.measHist = []
      for i in range(0, length):
        val1 = definitions.msg.IkaSensorStamp()
        _x = val1
        start = end
        end += 4
        (_x.IdSensor, _x.IdObjectWithinSensor,) = _get_struct_2H().unpack(str[start:end])
        _v2 = val1.measuredStamp
        _x = _v2
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.measHist.append(val1)
      _x = self
      start = end
      end += 11
      (_x.birthStamp.secs, _x.birthStamp.nsecs, _x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured,) = _get_struct_2I3B().unpack(str[start:end])
      self.bObjectValid = bool(self.bObjectValid)
      self.bObjectNew = bool(self.bObjectNew)
      self.bObjectMeasured = bool(self.bObjectMeasured)
      self.birthStamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IdMotionModel
      buff.write(_get_struct_B().pack(_x))
      length = len(self.fMean)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fMean.tostring())
      length = len(self.fCovariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fCovariance.tostring())
      _x = self
      buff.write(_get_struct_4fB2fHhH().pack(_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType))
      length = len(self.fClassProbability)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fClassProbability.tostring())
      _x = self
      buff.write(_get_struct_fH().pack(_x.fExistenceProbability, _x.IdExternal))
      length = len(self.measHist)
      buff.write(_struct_I.pack(length))
      for val1 in self.measHist:
        _x = val1
        buff.write(_get_struct_2H().pack(_x.IdSensor, _x.IdObjectWithinSensor))
        _v3 = val1.measuredStamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_2I3B().pack(_x.birthStamp.secs, _x.birthStamp.nsecs, _x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.measHist is None:
        self.measHist = None
      if self.birthStamp is None:
        self.birthStamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.IdMotionModel,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fMean = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fCovariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 31
      (_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType,) = _get_struct_4fB2fHhH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fClassProbability = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 6
      (_x.fExistenceProbability, _x.IdExternal,) = _get_struct_fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.measHist = []
      for i in range(0, length):
        val1 = definitions.msg.IkaSensorStamp()
        _x = val1
        start = end
        end += 4
        (_x.IdSensor, _x.IdObjectWithinSensor,) = _get_struct_2H().unpack(str[start:end])
        _v4 = val1.measuredStamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.measHist.append(val1)
      _x = self
      start = end
      end += 11
      (_x.birthStamp.secs, _x.birthStamp.nsecs, _x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured,) = _get_struct_2I3B().unpack(str[start:end])
      self.bObjectValid = bool(self.bObjectValid)
      self.bObjectNew = bool(self.bObjectNew)
      self.bObjectMeasured = bool(self.bObjectMeasured)
      self.birthStamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2I3B = None
def _get_struct_2I3B():
    global _struct_2I3B
    if _struct_2I3B is None:
        _struct_2I3B = struct.Struct("<2I3B")
    return _struct_2I3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4fB2fHhH = None
def _get_struct_4fB2fHhH():
    global _struct_4fB2fHhH
    if _struct_4fB2fHhH is None:
        _struct_4fB2fHhH = struct.Struct("<4fB2fHhH")
    return _struct_4fB2fHhH
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_fH = None
def _get_struct_fH():
    global _struct_fH
    if _struct_fH is None:
        _struct_fH = struct.Struct("<fH")
    return _struct_fH
