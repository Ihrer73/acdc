# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/IkaObjectList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg
import genpy
import std_msgs.msg

class IkaObjectList(genpy.Message):
  _md5sum = "a997953d24fa0f3e837de98bfab1882a"
  _type = "definitions/IkaObjectList"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# List meta information
uint8 IdSource #see definitions/utility/object_definitions.h for enum of Sensors

# Actually objects
IkaObject[] objects

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: definitions/IkaObject
std_msgs/Header header

# Motion Model Attributes
uint8 IdMotionModel				 # Motionmodel type 0=UNKNOWN; 1=CV; 2=CA; 3=CTRV; 4=CTRA
float32[] fMean                  # Statevector, containing attributes depend on chosen motion model
float32[] fCovariance            # Covariance-Matrix, containing attributes depend on chosen motion model

# additional relative properties
# reference is moving base_link instead of zero velocity base_link
float32 fRelVelX
float32 fRelVelY
float32 fRelAccX
float32 fRelAccY			

# Reference Point
uint8 RefLocation				# Sensor's object reference location
float32 fRefX					# X-Position of the reference point
float32 fRefY					# Y-Position of the reference point

# Object Meta Data
uint16 IdInternal               # Internal ID of the object inside the sensor.
int16 IdLane                    # Id of the lane the car is driving on. usually not used.
uint16 IdType                   # Type of the detected object.
float32[] fClassProbability		# Vector of class-wise probabilities [0..1] sum of all entries is always 1
float32 fExistenceProbability   # [0..1]

# Measurement Meta Data
uint16 IdExternal               # Source ID of the sensor.
IkaSensorStamp[] measHist       # History of measurements of this object.
time birthStamp                 # ROS time stamp of first occurrence of object
bool bObjectValid               # true if object contains any relevant information. false for gaps in objects vector.
bool bObjectNew                 # true if object got measured for the first time in the current time stamp.
bool bObjectMeasured            # true if object is being measured by a sensor in the current time stamp.

#for enum types see definitions/include/definitions/utility/object_definitions.h
================================================================================
MSG: definitions/IkaSensorStamp
uint16 IdSensor                 # Source ID of the measuring sensor (see enums)
uint16 IdObjectWithinSensor     # IdInternal of the measured object within the sensor's object list
time measuredStamp              # ROS time stamp of when the sensor measured the object

#for enum types see definitions/utility/object_definitions.h
"""
  __slots__ = ['header','IdSource','objects']
  _slot_types = ['std_msgs/Header','uint8','definitions/IkaObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,IdSource,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IkaObjectList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.IdSource is None:
        self.IdSource = 0
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.IdSource = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IdSource
      buff.write(_get_struct_B().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.IdMotionModel
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.fMean)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.fMean))
        length = len(val1.fCovariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.fCovariance))
        _x = val1
        buff.write(_get_struct_4fB2fHhH().pack(_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType))
        length = len(val1.fClassProbability)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.fClassProbability))
        _x = val1
        buff.write(_get_struct_fH().pack(_x.fExistenceProbability, _x.IdExternal))
        length = len(val1.measHist)
        buff.write(_struct_I.pack(length))
        for val2 in val1.measHist:
          _x = val2
          buff.write(_get_struct_2H().pack(_x.IdSensor, _x.IdObjectWithinSensor))
          _v3 = val2.measuredStamp
          _x = _v3
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v4 = val1.birthStamp
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3B().pack(_x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.IdSource,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = definitions.msg.IkaObject()
        _v5 = val1.header
        start = end
        end += 4
        (_v5.seq,) = _get_struct_I().unpack(str[start:end])
        _v6 = _v5.stamp
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v5.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v5.frame_id = str[start:end]
        start = end
        end += 1
        (val1.IdMotionModel,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fMean = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fCovariance = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 31
        (_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType,) = _get_struct_4fB2fHhH().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fClassProbability = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.fExistenceProbability, _x.IdExternal,) = _get_struct_fH().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.measHist = []
        for i in range(0, length):
          val2 = definitions.msg.IkaSensorStamp()
          _x = val2
          start = end
          end += 4
          (_x.IdSensor, _x.IdObjectWithinSensor,) = _get_struct_2H().unpack(str[start:end])
          _v7 = val2.measuredStamp
          _x = _v7
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          val1.measHist.append(val2)
        _v8 = val1.birthStamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured,) = _get_struct_3B().unpack(str[start:end])
        val1.bObjectValid = bool(val1.bObjectValid)
        val1.bObjectNew = bool(val1.bObjectNew)
        val1.bObjectMeasured = bool(val1.bObjectMeasured)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IdSource
      buff.write(_get_struct_B().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v9 = val1.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.IdMotionModel
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.fMean)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.fMean.tostring())
        length = len(val1.fCovariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.fCovariance.tostring())
        _x = val1
        buff.write(_get_struct_4fB2fHhH().pack(_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType))
        length = len(val1.fClassProbability)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.fClassProbability.tostring())
        _x = val1
        buff.write(_get_struct_fH().pack(_x.fExistenceProbability, _x.IdExternal))
        length = len(val1.measHist)
        buff.write(_struct_I.pack(length))
        for val2 in val1.measHist:
          _x = val2
          buff.write(_get_struct_2H().pack(_x.IdSensor, _x.IdObjectWithinSensor))
          _v11 = val2.measuredStamp
          _x = _v11
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v12 = val1.birthStamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3B().pack(_x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.IdSource,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = definitions.msg.IkaObject()
        _v13 = val1.header
        start = end
        end += 4
        (_v13.seq,) = _get_struct_I().unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.frame_id = str[start:end]
        start = end
        end += 1
        (val1.IdMotionModel,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fMean = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fCovariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 31
        (_x.fRelVelX, _x.fRelVelY, _x.fRelAccX, _x.fRelAccY, _x.RefLocation, _x.fRefX, _x.fRefY, _x.IdInternal, _x.IdLane, _x.IdType,) = _get_struct_4fB2fHhH().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fClassProbability = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 6
        (_x.fExistenceProbability, _x.IdExternal,) = _get_struct_fH().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.measHist = []
        for i in range(0, length):
          val2 = definitions.msg.IkaSensorStamp()
          _x = val2
          start = end
          end += 4
          (_x.IdSensor, _x.IdObjectWithinSensor,) = _get_struct_2H().unpack(str[start:end])
          _v15 = val2.measuredStamp
          _x = _v15
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          val1.measHist.append(val2)
        _v16 = val1.birthStamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.bObjectValid, _x.bObjectNew, _x.bObjectMeasured,) = _get_struct_3B().unpack(str[start:end])
        val1.bObjectValid = bool(val1.bObjectValid)
        val1.bObjectNew = bool(val1.bObjectNew)
        val1.bObjectMeasured = bool(val1.bObjectMeasured)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4fB2fHhH = None
def _get_struct_4fB2fHhH():
    global _struct_4fB2fHhH
    if _struct_4fB2fHhH is None:
        _struct_4fB2fHhH = struct.Struct("<4fB2fHhH")
    return _struct_4fB2fHhH
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_fH = None
def _get_struct_fH():
    global _struct_fH
    if _struct_fH is None:
        _struct_fH = struct.Struct("<fH")
    return _struct_fH
