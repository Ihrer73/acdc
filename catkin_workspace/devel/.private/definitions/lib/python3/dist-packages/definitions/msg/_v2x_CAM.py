# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_CAM.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg

class v2x_CAM(genpy.Message):
  _md5sum = "d9cb9df941500a5794770dfa4f074823"
  _type = "definitions/v2x_CAM"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# CAM.msg
#
# Contains all transmittet cooperative awareness message information
# Values of data type float64 (aka double) are in si units (but deg is used instead of radiant!)
#

# ItsPduHeader
    uint8 header_protocolVersion
    uint8 header_messageID
    uint16 header_stationID  # stationID will be overwritten by the asn encoder
# CoopAwareness
    float64 cam_generationDeltaTime
    v2x_CAM_basic_container basic_container         # BasicContainer
    v2x_CAM_high_freq_container high_freq_container # HighFrequencyContainer
    v2x_CAM_low_freq_container low_freq_container   # LowFrequencyContainer (OPTIONAL)
    v2x_CAM_special_container special_container     # SpecialVehicleContainer (OPTIONAL)
================================================================================
MSG: definitions/v2x_CAM_basic_container
# BasicContainer
    uint8 stationType
    # Reference Position
        float64 referencePosition_latitude
        float64 referencePosition_longitude
        # PosConfidenceEllipse
            uint16 referencePosition_positionConfidenceEllipse_semiMajorConfidence
            uint16 referencePosition_positionConfidenceEllipse_semiMinorConfidence
            uint16 referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue
        # Altitude
            int16 referencePosition_altitude_altitudeValue
            uint8 referencePosition_altitude_altitudeConfidence
================================================================================
MSG: definitions/v2x_CAM_high_freq_container
# HighFrequencyContainer
uint8 containerType
# BasicVehicleContainerHighFrequency
    # Heading
        float64 heading_headingValue
        uint8 heading_headingConfidence
    # Speed
        float64 speed_speedValue
        uint8 speed_speedConfidence
    uint8 driveDirection
    # VehicleLength
        float64 vehicleLength_vehicleLengthValue
        uint8 vehicleLength_vehicleLengthConfidenceIndication
    float64 vehicleWidth
    # LongitudinalAcceleration
        int16 longitudinalAcceleration_longitudinalAccelerationValue
        uint8 longitudinalAcceleration_longitudinalAccelerationConfidence
    # Curvature
        int16 curvature_curvatureValue
        uint8 curvature_curvatureConfidence
    uint8 curvatureCalculationMode
    # YawRate
        int16 yawRate_yawRateValue
        uint8 yawRate_yawRateConfidence
    bool accelerationControlPresent
    ASN_bitstring accelerationControl # Optional, Bitstring Size 7
    bool lanePositionPresent
    int8 lanePosition
    # SteeringWheelAngle
    bool steeringWheelAnglePresent
        int16 steeringWheelAngle_steeringWheelAngleValue
        uint8 steeringWheelAngle_steeringWheelAngleConfidence
    # LateralAcceleration
    bool lateralAccelerationPresent
        int16 lateralAcceleration_lateralAccelerationValue
        uint8 lateralAcceleration_lateralAccelerationConfidence
    # VerticalAcceleration
    bool verticalAccelerationPresent
        int16    verticalAcceleration_verticalAccelerationValue
        uint8 verticalAcceleration_verticallAccelerationConfidence
    bool performanceClassPresent
    uint8 performanceClass
    # CenDsrcTollingZone
    bool cenDsrcTollingZonePresent
        int32 cenDsrcTollingZone_cenDsrcTollingZoneLatitude
        int32 cenDsrcTollingZone_cenDsrcTollingZoneLongitude
        bool cenDsrcTollingZone_cenDsrcTollingZoneIDPresent
        uint32 cenDsrcTollingZone_cenDsrcTollingZoneID
# RSUContainerHighFrequency
    #ProtectedCommunicationZonesRSU
    bool rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent
        v2x_CAM_protectedCommunicationZone[] rsuContainerHighFrequency_protectedCommunicationZonesRSU
================================================================================
MSG: definitions/ASN_bitstring
uint8[] buf
uint8 bits_unused

================================================================================
MSG: definitions/v2x_CAM_protectedCommunicationZone
uint8    protectedZoneType
bool expiryTimePresent
uint64    expiryTime
int32    protectedZoneLatitude
int32    protectedZoneLongitude
bool protectedZoneRadiusPresent
uint8    protectedZoneRadius
uint32    protectedZoneID
bool protectedZoneIDPresent

================================================================================
MSG: definitions/v2x_CAM_low_freq_container
# LowFrequencyContainer (OPTIONAL)
    #BasicVehicleContainerLowFrequency
    uint8 containerType # 0 = Absent, 1 = BasicVehicleContainerLowFrequency
        uint8 vehicleRole
        ASN_bitstring exteriorLights
        v2x_CAM_pathPoint[] pathHistory
================================================================================
MSG: definitions/v2x_CAM_pathPoint
int32 deltaLatitude
int32 deltaLongitude
int16 deltaAltitude
bool pathDeltaTimePresent
uint16 pathDeltaTime
================================================================================
MSG: definitions/v2x_CAM_special_container
# SpecialVehicleContainer (OPTIONAL)
uint8 containerType # 0 = Absent, 1 = publicTransportContainer, 2 = ...
    # PublicTransportContainer
        bool publicTransportContainer_embarkationStatus
        # PtActivation (OPTIONAL)
        bool publicTransportContainer_ptActivationPresent
            uint8 publicTransportContainer_ptActivation_ptActivationType
            uint8[] publicTransportContainer_ptActivation_ptActivationData
    # SpecialTransportContainer
        ASN_bitstring specialTransportContainer_specialTransportType
        ASN_bitstring specialTransportContainer_lightBarSirenInUse
    # DangerousGoodsContainer
        uint8 dangerousGoodsContainer_dangerousGoodsBasic
    # RoadWorksContainerBasic
        bool roadWorksContainerBasic_roadworksSubCauseCodePresent
        uint8 roadWorksContainerBasic_roadworksSubCauseCode
        ASN_bitstring roadWorksContainerBasic_lightBarSirenInUse
        # ClosedLanes
        bool roadWorksContainerBasic_closedLanesPresent
            bool roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent
            uint8 roadWorksContainerBasic_closedLanes_hardShoulderStatus
            ASN_bitstring roadWorksContainerBasic_closedLanes_drivingLaneStatus
    # RescueContainer
        ASN_bitstring rescueContainer_lightBarSirenInUse
    # EmergencyContainer
        ASN_bitstring emergencyContainer_lightBarSirenInUse
        # CauseCode
        bool emergencyContainer_incidentIndicationPresent
            uint8 emergencyContainer_incidentIndication_causeCode
            uint8 emergencyContainer_incidentIndication_subCauseCode
        bool emergencyContainer_emergencyPriorityPresent
        ASN_bitstring emergencyContainer_emergencyPriority
    # SafetyCarContainer
        ASN_bitstring safetyCarContainer_lightBarSirenInUse
        # CauseCode
        bool safetyCarContainer_incidentIndicationPresent
            uint8 safetyCarContainer_incidentIndication_causeCode
            uint8 safetyCarContainer_incidentIndication_subCauseCode
        bool safetyCarContainer_trafficRulePresent
        uint8 safetyCarContainer_trafficRule
        bool safetyCarContainer_speedLimitPresent
        uint8 safetyCarContainer_speedLimit"""
  __slots__ = ['header_protocolVersion','header_messageID','header_stationID','cam_generationDeltaTime','basic_container','high_freq_container','low_freq_container','special_container']
  _slot_types = ['uint8','uint8','uint16','float64','definitions/v2x_CAM_basic_container','definitions/v2x_CAM_high_freq_container','definitions/v2x_CAM_low_freq_container','definitions/v2x_CAM_special_container']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header_protocolVersion,header_messageID,header_stationID,cam_generationDeltaTime,basic_container,high_freq_container,low_freq_container,special_container

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_CAM, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header_protocolVersion is None:
        self.header_protocolVersion = 0
      if self.header_messageID is None:
        self.header_messageID = 0
      if self.header_stationID is None:
        self.header_stationID = 0
      if self.cam_generationDeltaTime is None:
        self.cam_generationDeltaTime = 0.
      if self.basic_container is None:
        self.basic_container = definitions.msg.v2x_CAM_basic_container()
      if self.high_freq_container is None:
        self.high_freq_container = definitions.msg.v2x_CAM_high_freq_container()
      if self.low_freq_container is None:
        self.low_freq_container = definitions.msg.v2x_CAM_low_freq_container()
      if self.special_container is None:
        self.special_container = definitions.msg.v2x_CAM_special_container()
    else:
      self.header_protocolVersion = 0
      self.header_messageID = 0
      self.header_stationID = 0
      self.cam_generationDeltaTime = 0.
      self.basic_container = definitions.msg.v2x_CAM_basic_container()
      self.high_freq_container = definitions.msg.v2x_CAM_high_freq_container()
      self.low_freq_container = definitions.msg.v2x_CAM_low_freq_container()
      self.special_container = definitions.msg.v2x_CAM_special_container()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B().pack(_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.cam_generationDeltaTime, _x.basic_container.stationType, _x.basic_container.referencePosition_latitude, _x.basic_container.referencePosition_longitude, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMinorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue, _x.basic_container.referencePosition_altitude_altitudeValue, _x.basic_container.referencePosition_altitude_altitudeConfidence, _x.high_freq_container.containerType, _x.high_freq_container.heading_headingValue, _x.high_freq_container.heading_headingConfidence, _x.high_freq_container.speed_speedValue, _x.high_freq_container.speed_speedConfidence, _x.high_freq_container.driveDirection, _x.high_freq_container.vehicleLength_vehicleLengthValue, _x.high_freq_container.vehicleLength_vehicleLengthConfidenceIndication, _x.high_freq_container.vehicleWidth, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationValue, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.high_freq_container.curvature_curvatureValue, _x.high_freq_container.curvature_curvatureConfidence, _x.high_freq_container.curvatureCalculationMode, _x.high_freq_container.yawRate_yawRateValue, _x.high_freq_container.yawRate_yawRateConfidence, _x.high_freq_container.accelerationControlPresent))
      _x = self.high_freq_container.accelerationControl.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BbBh2Bh2Bh4B2iBIB().pack(_x.high_freq_container.accelerationControl.bits_unused, _x.high_freq_container.lanePositionPresent, _x.high_freq_container.lanePosition, _x.high_freq_container.steeringWheelAnglePresent, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleValue, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleConfidence, _x.high_freq_container.lateralAccelerationPresent, _x.high_freq_container.lateralAcceleration_lateralAccelerationValue, _x.high_freq_container.lateralAcceleration_lateralAccelerationConfidence, _x.high_freq_container.verticalAccelerationPresent, _x.high_freq_container.verticalAcceleration_verticalAccelerationValue, _x.high_freq_container.verticalAcceleration_verticallAccelerationConfidence, _x.high_freq_container.performanceClassPresent, _x.high_freq_container.performanceClass, _x.high_freq_container.cenDsrcTollingZonePresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent))
      length = len(self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU)
      buff.write(_struct_I.pack(length))
      for val1 in self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU:
        _x = val1
        buff.write(_get_struct_2BQ2i2BIB().pack(_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent))
      _x = self
      buff.write(_get_struct_2B().pack(_x.low_freq_container.containerType, _x.low_freq_container.vehicleRole))
      _x = self.low_freq_container.exteriorLights.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.low_freq_container.exteriorLights.bits_unused
      buff.write(_get_struct_B().pack(_x))
      length = len(self.low_freq_container.pathHistory)
      buff.write(_struct_I.pack(length))
      for val1 in self.low_freq_container.pathHistory:
        _x = val1
        buff.write(_get_struct_2ihBH().pack(_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime))
      _x = self
      buff.write(_get_struct_4B().pack(_x.special_container.containerType, _x.special_container.publicTransportContainer_embarkationStatus, _x.special_container.publicTransportContainer_ptActivationPresent, _x.special_container.publicTransportContainer_ptActivation_ptActivationType))
      _x = self.special_container.publicTransportContainer_ptActivation_ptActivationData
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.specialTransportContainer_specialTransportType.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.specialTransportContainer_specialTransportType.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.specialTransportContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.special_container.specialTransportContainer_lightBarSirenInUse.bits_unused, _x.special_container.dangerousGoodsContainer_dangerousGoodsBasic, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCode))
      _x = self.special_container.roadWorksContainerBasic_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.special_container.roadWorksContainerBasic_lightBarSirenInUse.bits_unused, _x.special_container.roadWorksContainerBasic_closedLanesPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatus))
      _x = self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.rescueContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.rescueContainer_lightBarSirenInUse.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.emergencyContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.special_container.emergencyContainer_lightBarSirenInUse.bits_unused, _x.special_container.emergencyContainer_incidentIndicationPresent, _x.special_container.emergencyContainer_incidentIndication_causeCode, _x.special_container.emergencyContainer_incidentIndication_subCauseCode, _x.special_container.emergencyContainer_emergencyPriorityPresent))
      _x = self.special_container.emergencyContainer_emergencyPriority.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.emergencyContainer_emergencyPriority.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.safetyCarContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.special_container.safetyCarContainer_lightBarSirenInUse.bits_unused, _x.special_container.safetyCarContainer_incidentIndicationPresent, _x.special_container.safetyCarContainer_incidentIndication_causeCode, _x.special_container.safetyCarContainer_incidentIndication_subCauseCode, _x.special_container.safetyCarContainer_trafficRulePresent, _x.special_container.safetyCarContainer_trafficRule, _x.special_container.safetyCarContainer_speedLimitPresent, _x.special_container.safetyCarContainer_speedLimit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.basic_container is None:
        self.basic_container = definitions.msg.v2x_CAM_basic_container()
      if self.high_freq_container is None:
        self.high_freq_container = definitions.msg.v2x_CAM_high_freq_container()
      if self.low_freq_container is None:
        self.low_freq_container = definitions.msg.v2x_CAM_low_freq_container()
      if self.special_container is None:
        self.special_container = definitions.msg.v2x_CAM_special_container()
      end = 0
      _x = self
      start = end
      end += 86
      (_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.cam_generationDeltaTime, _x.basic_container.stationType, _x.basic_container.referencePosition_latitude, _x.basic_container.referencePosition_longitude, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMinorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue, _x.basic_container.referencePosition_altitude_altitudeValue, _x.basic_container.referencePosition_altitude_altitudeConfidence, _x.high_freq_container.containerType, _x.high_freq_container.heading_headingValue, _x.high_freq_container.heading_headingConfidence, _x.high_freq_container.speed_speedValue, _x.high_freq_container.speed_speedConfidence, _x.high_freq_container.driveDirection, _x.high_freq_container.vehicleLength_vehicleLengthValue, _x.high_freq_container.vehicleLength_vehicleLengthConfidenceIndication, _x.high_freq_container.vehicleWidth, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationValue, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.high_freq_container.curvature_curvatureValue, _x.high_freq_container.curvature_curvatureConfidence, _x.high_freq_container.curvatureCalculationMode, _x.high_freq_container.yawRate_yawRateValue, _x.high_freq_container.yawRate_yawRateConfidence, _x.high_freq_container.accelerationControlPresent,) = _get_struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B().unpack(str[start:end])
      self.high_freq_container.accelerationControlPresent = bool(self.high_freq_container.accelerationControlPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.high_freq_container.accelerationControl.buf = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.high_freq_container.accelerationControl.bits_unused, _x.high_freq_container.lanePositionPresent, _x.high_freq_container.lanePosition, _x.high_freq_container.steeringWheelAnglePresent, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleValue, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleConfidence, _x.high_freq_container.lateralAccelerationPresent, _x.high_freq_container.lateralAcceleration_lateralAccelerationValue, _x.high_freq_container.lateralAcceleration_lateralAccelerationConfidence, _x.high_freq_container.verticalAccelerationPresent, _x.high_freq_container.verticalAcceleration_verticalAccelerationValue, _x.high_freq_container.verticalAcceleration_verticallAccelerationConfidence, _x.high_freq_container.performanceClassPresent, _x.high_freq_container.performanceClass, _x.high_freq_container.cenDsrcTollingZonePresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent,) = _get_struct_2BbBh2Bh2Bh4B2iBIB().unpack(str[start:end])
      self.high_freq_container.lanePositionPresent = bool(self.high_freq_container.lanePositionPresent)
      self.high_freq_container.steeringWheelAnglePresent = bool(self.high_freq_container.steeringWheelAnglePresent)
      self.high_freq_container.lateralAccelerationPresent = bool(self.high_freq_container.lateralAccelerationPresent)
      self.high_freq_container.verticalAccelerationPresent = bool(self.high_freq_container.verticalAccelerationPresent)
      self.high_freq_container.performanceClassPresent = bool(self.high_freq_container.performanceClassPresent)
      self.high_freq_container.cenDsrcTollingZonePresent = bool(self.high_freq_container.cenDsrcTollingZonePresent)
      self.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent = bool(self.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent)
      self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent = bool(self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_protectedCommunicationZone()
        _x = val1
        start = end
        end += 25
        (_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent,) = _get_struct_2BQ2i2BIB().unpack(str[start:end])
        val1.expiryTimePresent = bool(val1.expiryTimePresent)
        val1.protectedZoneRadiusPresent = bool(val1.protectedZoneRadiusPresent)
        val1.protectedZoneIDPresent = bool(val1.protectedZoneIDPresent)
        self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU.append(val1)
      _x = self
      start = end
      end += 2
      (_x.low_freq_container.containerType, _x.low_freq_container.vehicleRole,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.low_freq_container.exteriorLights.buf = str[start:end]
      start = end
      end += 1
      (self.low_freq_container.exteriorLights.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.low_freq_container.pathHistory = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_pathPoint()
        _x = val1
        start = end
        end += 13
        (_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime,) = _get_struct_2ihBH().unpack(str[start:end])
        val1.pathDeltaTimePresent = bool(val1.pathDeltaTimePresent)
        self.low_freq_container.pathHistory.append(val1)
      _x = self
      start = end
      end += 4
      (_x.special_container.containerType, _x.special_container.publicTransportContainer_embarkationStatus, _x.special_container.publicTransportContainer_ptActivationPresent, _x.special_container.publicTransportContainer_ptActivation_ptActivationType,) = _get_struct_4B().unpack(str[start:end])
      self.special_container.publicTransportContainer_embarkationStatus = bool(self.special_container.publicTransportContainer_embarkationStatus)
      self.special_container.publicTransportContainer_ptActivationPresent = bool(self.special_container.publicTransportContainer_ptActivationPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.publicTransportContainer_ptActivation_ptActivationData = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.specialTransportContainer_specialTransportType.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.specialTransportContainer_specialTransportType.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.specialTransportContainer_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.special_container.specialTransportContainer_lightBarSirenInUse.bits_unused, _x.special_container.dangerousGoodsContainer_dangerousGoodsBasic, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCode,) = _get_struct_4B().unpack(str[start:end])
      self.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent = bool(self.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.roadWorksContainerBasic_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.special_container.roadWorksContainerBasic_lightBarSirenInUse.bits_unused, _x.special_container.roadWorksContainerBasic_closedLanesPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatus,) = _get_struct_4B().unpack(str[start:end])
      self.special_container.roadWorksContainerBasic_closedLanesPresent = bool(self.special_container.roadWorksContainerBasic_closedLanesPresent)
      self.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent = bool(self.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.rescueContainer_lightBarSirenInUse.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.rescueContainer_lightBarSirenInUse.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.emergencyContainer_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.special_container.emergencyContainer_lightBarSirenInUse.bits_unused, _x.special_container.emergencyContainer_incidentIndicationPresent, _x.special_container.emergencyContainer_incidentIndication_causeCode, _x.special_container.emergencyContainer_incidentIndication_subCauseCode, _x.special_container.emergencyContainer_emergencyPriorityPresent,) = _get_struct_5B().unpack(str[start:end])
      self.special_container.emergencyContainer_incidentIndicationPresent = bool(self.special_container.emergencyContainer_incidentIndicationPresent)
      self.special_container.emergencyContainer_emergencyPriorityPresent = bool(self.special_container.emergencyContainer_emergencyPriorityPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.emergencyContainer_emergencyPriority.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.emergencyContainer_emergencyPriority.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.safetyCarContainer_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.special_container.safetyCarContainer_lightBarSirenInUse.bits_unused, _x.special_container.safetyCarContainer_incidentIndicationPresent, _x.special_container.safetyCarContainer_incidentIndication_causeCode, _x.special_container.safetyCarContainer_incidentIndication_subCauseCode, _x.special_container.safetyCarContainer_trafficRulePresent, _x.special_container.safetyCarContainer_trafficRule, _x.special_container.safetyCarContainer_speedLimitPresent, _x.special_container.safetyCarContainer_speedLimit,) = _get_struct_8B().unpack(str[start:end])
      self.special_container.safetyCarContainer_incidentIndicationPresent = bool(self.special_container.safetyCarContainer_incidentIndicationPresent)
      self.special_container.safetyCarContainer_trafficRulePresent = bool(self.special_container.safetyCarContainer_trafficRulePresent)
      self.special_container.safetyCarContainer_speedLimitPresent = bool(self.special_container.safetyCarContainer_speedLimitPresent)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B().pack(_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.cam_generationDeltaTime, _x.basic_container.stationType, _x.basic_container.referencePosition_latitude, _x.basic_container.referencePosition_longitude, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMinorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue, _x.basic_container.referencePosition_altitude_altitudeValue, _x.basic_container.referencePosition_altitude_altitudeConfidence, _x.high_freq_container.containerType, _x.high_freq_container.heading_headingValue, _x.high_freq_container.heading_headingConfidence, _x.high_freq_container.speed_speedValue, _x.high_freq_container.speed_speedConfidence, _x.high_freq_container.driveDirection, _x.high_freq_container.vehicleLength_vehicleLengthValue, _x.high_freq_container.vehicleLength_vehicleLengthConfidenceIndication, _x.high_freq_container.vehicleWidth, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationValue, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.high_freq_container.curvature_curvatureValue, _x.high_freq_container.curvature_curvatureConfidence, _x.high_freq_container.curvatureCalculationMode, _x.high_freq_container.yawRate_yawRateValue, _x.high_freq_container.yawRate_yawRateConfidence, _x.high_freq_container.accelerationControlPresent))
      _x = self.high_freq_container.accelerationControl.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BbBh2Bh2Bh4B2iBIB().pack(_x.high_freq_container.accelerationControl.bits_unused, _x.high_freq_container.lanePositionPresent, _x.high_freq_container.lanePosition, _x.high_freq_container.steeringWheelAnglePresent, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleValue, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleConfidence, _x.high_freq_container.lateralAccelerationPresent, _x.high_freq_container.lateralAcceleration_lateralAccelerationValue, _x.high_freq_container.lateralAcceleration_lateralAccelerationConfidence, _x.high_freq_container.verticalAccelerationPresent, _x.high_freq_container.verticalAcceleration_verticalAccelerationValue, _x.high_freq_container.verticalAcceleration_verticallAccelerationConfidence, _x.high_freq_container.performanceClassPresent, _x.high_freq_container.performanceClass, _x.high_freq_container.cenDsrcTollingZonePresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent))
      length = len(self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU)
      buff.write(_struct_I.pack(length))
      for val1 in self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU:
        _x = val1
        buff.write(_get_struct_2BQ2i2BIB().pack(_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent))
      _x = self
      buff.write(_get_struct_2B().pack(_x.low_freq_container.containerType, _x.low_freq_container.vehicleRole))
      _x = self.low_freq_container.exteriorLights.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.low_freq_container.exteriorLights.bits_unused
      buff.write(_get_struct_B().pack(_x))
      length = len(self.low_freq_container.pathHistory)
      buff.write(_struct_I.pack(length))
      for val1 in self.low_freq_container.pathHistory:
        _x = val1
        buff.write(_get_struct_2ihBH().pack(_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime))
      _x = self
      buff.write(_get_struct_4B().pack(_x.special_container.containerType, _x.special_container.publicTransportContainer_embarkationStatus, _x.special_container.publicTransportContainer_ptActivationPresent, _x.special_container.publicTransportContainer_ptActivation_ptActivationType))
      _x = self.special_container.publicTransportContainer_ptActivation_ptActivationData
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.specialTransportContainer_specialTransportType.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.specialTransportContainer_specialTransportType.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.specialTransportContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.special_container.specialTransportContainer_lightBarSirenInUse.bits_unused, _x.special_container.dangerousGoodsContainer_dangerousGoodsBasic, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCode))
      _x = self.special_container.roadWorksContainerBasic_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.special_container.roadWorksContainerBasic_lightBarSirenInUse.bits_unused, _x.special_container.roadWorksContainerBasic_closedLanesPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatus))
      _x = self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.rescueContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.rescueContainer_lightBarSirenInUse.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.emergencyContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.special_container.emergencyContainer_lightBarSirenInUse.bits_unused, _x.special_container.emergencyContainer_incidentIndicationPresent, _x.special_container.emergencyContainer_incidentIndication_causeCode, _x.special_container.emergencyContainer_incidentIndication_subCauseCode, _x.special_container.emergencyContainer_emergencyPriorityPresent))
      _x = self.special_container.emergencyContainer_emergencyPriority.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.special_container.emergencyContainer_emergencyPriority.bits_unused
      buff.write(_get_struct_B().pack(_x))
      _x = self.special_container.safetyCarContainer_lightBarSirenInUse.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.special_container.safetyCarContainer_lightBarSirenInUse.bits_unused, _x.special_container.safetyCarContainer_incidentIndicationPresent, _x.special_container.safetyCarContainer_incidentIndication_causeCode, _x.special_container.safetyCarContainer_incidentIndication_subCauseCode, _x.special_container.safetyCarContainer_trafficRulePresent, _x.special_container.safetyCarContainer_trafficRule, _x.special_container.safetyCarContainer_speedLimitPresent, _x.special_container.safetyCarContainer_speedLimit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.basic_container is None:
        self.basic_container = definitions.msg.v2x_CAM_basic_container()
      if self.high_freq_container is None:
        self.high_freq_container = definitions.msg.v2x_CAM_high_freq_container()
      if self.low_freq_container is None:
        self.low_freq_container = definitions.msg.v2x_CAM_low_freq_container()
      if self.special_container is None:
        self.special_container = definitions.msg.v2x_CAM_special_container()
      end = 0
      _x = self
      start = end
      end += 86
      (_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.cam_generationDeltaTime, _x.basic_container.stationType, _x.basic_container.referencePosition_latitude, _x.basic_container.referencePosition_longitude, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMinorConfidence, _x.basic_container.referencePosition_positionConfidenceEllipse_semiMajorOrientationheadingValue, _x.basic_container.referencePosition_altitude_altitudeValue, _x.basic_container.referencePosition_altitude_altitudeConfidence, _x.high_freq_container.containerType, _x.high_freq_container.heading_headingValue, _x.high_freq_container.heading_headingConfidence, _x.high_freq_container.speed_speedValue, _x.high_freq_container.speed_speedConfidence, _x.high_freq_container.driveDirection, _x.high_freq_container.vehicleLength_vehicleLengthValue, _x.high_freq_container.vehicleLength_vehicleLengthConfidenceIndication, _x.high_freq_container.vehicleWidth, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationValue, _x.high_freq_container.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.high_freq_container.curvature_curvatureValue, _x.high_freq_container.curvature_curvatureConfidence, _x.high_freq_container.curvatureCalculationMode, _x.high_freq_container.yawRate_yawRateValue, _x.high_freq_container.yawRate_yawRateConfidence, _x.high_freq_container.accelerationControlPresent,) = _get_struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B().unpack(str[start:end])
      self.high_freq_container.accelerationControlPresent = bool(self.high_freq_container.accelerationControlPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.high_freq_container.accelerationControl.buf = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.high_freq_container.accelerationControl.bits_unused, _x.high_freq_container.lanePositionPresent, _x.high_freq_container.lanePosition, _x.high_freq_container.steeringWheelAnglePresent, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleValue, _x.high_freq_container.steeringWheelAngle_steeringWheelAngleConfidence, _x.high_freq_container.lateralAccelerationPresent, _x.high_freq_container.lateralAcceleration_lateralAccelerationValue, _x.high_freq_container.lateralAcceleration_lateralAccelerationConfidence, _x.high_freq_container.verticalAccelerationPresent, _x.high_freq_container.verticalAcceleration_verticalAccelerationValue, _x.high_freq_container.verticalAcceleration_verticallAccelerationConfidence, _x.high_freq_container.performanceClassPresent, _x.high_freq_container.performanceClass, _x.high_freq_container.cenDsrcTollingZonePresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent,) = _get_struct_2BbBh2Bh2Bh4B2iBIB().unpack(str[start:end])
      self.high_freq_container.lanePositionPresent = bool(self.high_freq_container.lanePositionPresent)
      self.high_freq_container.steeringWheelAnglePresent = bool(self.high_freq_container.steeringWheelAnglePresent)
      self.high_freq_container.lateralAccelerationPresent = bool(self.high_freq_container.lateralAccelerationPresent)
      self.high_freq_container.verticalAccelerationPresent = bool(self.high_freq_container.verticalAccelerationPresent)
      self.high_freq_container.performanceClassPresent = bool(self.high_freq_container.performanceClassPresent)
      self.high_freq_container.cenDsrcTollingZonePresent = bool(self.high_freq_container.cenDsrcTollingZonePresent)
      self.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent = bool(self.high_freq_container.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent)
      self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent = bool(self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_protectedCommunicationZone()
        _x = val1
        start = end
        end += 25
        (_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent,) = _get_struct_2BQ2i2BIB().unpack(str[start:end])
        val1.expiryTimePresent = bool(val1.expiryTimePresent)
        val1.protectedZoneRadiusPresent = bool(val1.protectedZoneRadiusPresent)
        val1.protectedZoneIDPresent = bool(val1.protectedZoneIDPresent)
        self.high_freq_container.rsuContainerHighFrequency_protectedCommunicationZonesRSU.append(val1)
      _x = self
      start = end
      end += 2
      (_x.low_freq_container.containerType, _x.low_freq_container.vehicleRole,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.low_freq_container.exteriorLights.buf = str[start:end]
      start = end
      end += 1
      (self.low_freq_container.exteriorLights.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.low_freq_container.pathHistory = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_pathPoint()
        _x = val1
        start = end
        end += 13
        (_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime,) = _get_struct_2ihBH().unpack(str[start:end])
        val1.pathDeltaTimePresent = bool(val1.pathDeltaTimePresent)
        self.low_freq_container.pathHistory.append(val1)
      _x = self
      start = end
      end += 4
      (_x.special_container.containerType, _x.special_container.publicTransportContainer_embarkationStatus, _x.special_container.publicTransportContainer_ptActivationPresent, _x.special_container.publicTransportContainer_ptActivation_ptActivationType,) = _get_struct_4B().unpack(str[start:end])
      self.special_container.publicTransportContainer_embarkationStatus = bool(self.special_container.publicTransportContainer_embarkationStatus)
      self.special_container.publicTransportContainer_ptActivationPresent = bool(self.special_container.publicTransportContainer_ptActivationPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.publicTransportContainer_ptActivation_ptActivationData = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.specialTransportContainer_specialTransportType.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.specialTransportContainer_specialTransportType.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.specialTransportContainer_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.special_container.specialTransportContainer_lightBarSirenInUse.bits_unused, _x.special_container.dangerousGoodsContainer_dangerousGoodsBasic, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent, _x.special_container.roadWorksContainerBasic_roadworksSubCauseCode,) = _get_struct_4B().unpack(str[start:end])
      self.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent = bool(self.special_container.roadWorksContainerBasic_roadworksSubCauseCodePresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.roadWorksContainerBasic_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.special_container.roadWorksContainerBasic_lightBarSirenInUse.bits_unused, _x.special_container.roadWorksContainerBasic_closedLanesPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent, _x.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatus,) = _get_struct_4B().unpack(str[start:end])
      self.special_container.roadWorksContainerBasic_closedLanesPresent = bool(self.special_container.roadWorksContainerBasic_closedLanesPresent)
      self.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent = bool(self.special_container.roadWorksContainerBasic_closedLanes_hardShoulderStatusPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.roadWorksContainerBasic_closedLanes_drivingLaneStatus.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.rescueContainer_lightBarSirenInUse.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.rescueContainer_lightBarSirenInUse.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.emergencyContainer_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.special_container.emergencyContainer_lightBarSirenInUse.bits_unused, _x.special_container.emergencyContainer_incidentIndicationPresent, _x.special_container.emergencyContainer_incidentIndication_causeCode, _x.special_container.emergencyContainer_incidentIndication_subCauseCode, _x.special_container.emergencyContainer_emergencyPriorityPresent,) = _get_struct_5B().unpack(str[start:end])
      self.special_container.emergencyContainer_incidentIndicationPresent = bool(self.special_container.emergencyContainer_incidentIndicationPresent)
      self.special_container.emergencyContainer_emergencyPriorityPresent = bool(self.special_container.emergencyContainer_emergencyPriorityPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.emergencyContainer_emergencyPriority.buf = str[start:end]
      start = end
      end += 1
      (self.special_container.emergencyContainer_emergencyPriority.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.special_container.safetyCarContainer_lightBarSirenInUse.buf = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.special_container.safetyCarContainer_lightBarSirenInUse.bits_unused, _x.special_container.safetyCarContainer_incidentIndicationPresent, _x.special_container.safetyCarContainer_incidentIndication_causeCode, _x.special_container.safetyCarContainer_incidentIndication_subCauseCode, _x.special_container.safetyCarContainer_trafficRulePresent, _x.special_container.safetyCarContainer_trafficRule, _x.special_container.safetyCarContainer_speedLimitPresent, _x.special_container.safetyCarContainer_speedLimit,) = _get_struct_8B().unpack(str[start:end])
      self.special_container.safetyCarContainer_incidentIndicationPresent = bool(self.special_container.safetyCarContainer_incidentIndicationPresent)
      self.special_container.safetyCarContainer_trafficRulePresent = bool(self.special_container.safetyCarContainer_trafficRulePresent)
      self.special_container.safetyCarContainer_speedLimitPresent = bool(self.special_container.safetyCarContainer_speedLimitPresent)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B = None
def _get_struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B():
    global _struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B
    if _struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B is None:
        _struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B = struct.Struct("<2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B")
    return _struct_2BHdB2d3Hh2BdBd2BdBdhBh2Bh2B
_struct_2BQ2i2BIB = None
def _get_struct_2BQ2i2BIB():
    global _struct_2BQ2i2BIB
    if _struct_2BQ2i2BIB is None:
        _struct_2BQ2i2BIB = struct.Struct("<2BQ2i2BIB")
    return _struct_2BQ2i2BIB
_struct_2BbBh2Bh2Bh4B2iBIB = None
def _get_struct_2BbBh2Bh2Bh4B2iBIB():
    global _struct_2BbBh2Bh2Bh4B2iBIB
    if _struct_2BbBh2Bh2Bh4B2iBIB is None:
        _struct_2BbBh2Bh2Bh4B2iBIB = struct.Struct("<2BbBh2Bh2Bh4B2iBIB")
    return _struct_2BbBh2Bh2Bh4B2iBIB
_struct_2ihBH = None
def _get_struct_2ihBH():
    global _struct_2ihBH
    if _struct_2ihBH is None:
        _struct_2ihBH = struct.Struct("<2ihBH")
    return _struct_2ihBH
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
