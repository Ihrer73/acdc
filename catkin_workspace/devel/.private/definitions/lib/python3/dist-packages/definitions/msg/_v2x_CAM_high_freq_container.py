# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_CAM_high_freq_container.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg

class v2x_CAM_high_freq_container(genpy.Message):
  _md5sum = "5a57c9f5804d4d24442e42f1e23574f5"
  _type = "definitions/v2x_CAM_high_freq_container"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# HighFrequencyContainer
uint8 containerType
# BasicVehicleContainerHighFrequency
    # Heading
        float64 heading_headingValue
        uint8 heading_headingConfidence
    # Speed
        float64 speed_speedValue
        uint8 speed_speedConfidence
    uint8 driveDirection
    # VehicleLength
        float64 vehicleLength_vehicleLengthValue
        uint8 vehicleLength_vehicleLengthConfidenceIndication
    float64 vehicleWidth
    # LongitudinalAcceleration
        int16 longitudinalAcceleration_longitudinalAccelerationValue
        uint8 longitudinalAcceleration_longitudinalAccelerationConfidence
    # Curvature
        int16 curvature_curvatureValue
        uint8 curvature_curvatureConfidence
    uint8 curvatureCalculationMode
    # YawRate
        int16 yawRate_yawRateValue
        uint8 yawRate_yawRateConfidence
    bool accelerationControlPresent
    ASN_bitstring accelerationControl # Optional, Bitstring Size 7
    bool lanePositionPresent
    int8 lanePosition
    # SteeringWheelAngle
    bool steeringWheelAnglePresent
        int16 steeringWheelAngle_steeringWheelAngleValue
        uint8 steeringWheelAngle_steeringWheelAngleConfidence
    # LateralAcceleration
    bool lateralAccelerationPresent
        int16 lateralAcceleration_lateralAccelerationValue
        uint8 lateralAcceleration_lateralAccelerationConfidence
    # VerticalAcceleration
    bool verticalAccelerationPresent
        int16    verticalAcceleration_verticalAccelerationValue
        uint8 verticalAcceleration_verticallAccelerationConfidence
    bool performanceClassPresent
    uint8 performanceClass
    # CenDsrcTollingZone
    bool cenDsrcTollingZonePresent
        int32 cenDsrcTollingZone_cenDsrcTollingZoneLatitude
        int32 cenDsrcTollingZone_cenDsrcTollingZoneLongitude
        bool cenDsrcTollingZone_cenDsrcTollingZoneIDPresent
        uint32 cenDsrcTollingZone_cenDsrcTollingZoneID
# RSUContainerHighFrequency
    #ProtectedCommunicationZonesRSU
    bool rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent
        v2x_CAM_protectedCommunicationZone[] rsuContainerHighFrequency_protectedCommunicationZonesRSU
================================================================================
MSG: definitions/ASN_bitstring
uint8[] buf
uint8 bits_unused

================================================================================
MSG: definitions/v2x_CAM_protectedCommunicationZone
uint8    protectedZoneType
bool expiryTimePresent
uint64    expiryTime
int32    protectedZoneLatitude
int32    protectedZoneLongitude
bool protectedZoneRadiusPresent
uint8    protectedZoneRadius
uint32    protectedZoneID
bool protectedZoneIDPresent
"""
  __slots__ = ['containerType','heading_headingValue','heading_headingConfidence','speed_speedValue','speed_speedConfidence','driveDirection','vehicleLength_vehicleLengthValue','vehicleLength_vehicleLengthConfidenceIndication','vehicleWidth','longitudinalAcceleration_longitudinalAccelerationValue','longitudinalAcceleration_longitudinalAccelerationConfidence','curvature_curvatureValue','curvature_curvatureConfidence','curvatureCalculationMode','yawRate_yawRateValue','yawRate_yawRateConfidence','accelerationControlPresent','accelerationControl','lanePositionPresent','lanePosition','steeringWheelAnglePresent','steeringWheelAngle_steeringWheelAngleValue','steeringWheelAngle_steeringWheelAngleConfidence','lateralAccelerationPresent','lateralAcceleration_lateralAccelerationValue','lateralAcceleration_lateralAccelerationConfidence','verticalAccelerationPresent','verticalAcceleration_verticalAccelerationValue','verticalAcceleration_verticallAccelerationConfidence','performanceClassPresent','performanceClass','cenDsrcTollingZonePresent','cenDsrcTollingZone_cenDsrcTollingZoneLatitude','cenDsrcTollingZone_cenDsrcTollingZoneLongitude','cenDsrcTollingZone_cenDsrcTollingZoneIDPresent','cenDsrcTollingZone_cenDsrcTollingZoneID','rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent','rsuContainerHighFrequency_protectedCommunicationZonesRSU']
  _slot_types = ['uint8','float64','uint8','float64','uint8','uint8','float64','uint8','float64','int16','uint8','int16','uint8','uint8','int16','uint8','bool','definitions/ASN_bitstring','bool','int8','bool','int16','uint8','bool','int16','uint8','bool','int16','uint8','bool','uint8','bool','int32','int32','bool','uint32','bool','definitions/v2x_CAM_protectedCommunicationZone[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       containerType,heading_headingValue,heading_headingConfidence,speed_speedValue,speed_speedConfidence,driveDirection,vehicleLength_vehicleLengthValue,vehicleLength_vehicleLengthConfidenceIndication,vehicleWidth,longitudinalAcceleration_longitudinalAccelerationValue,longitudinalAcceleration_longitudinalAccelerationConfidence,curvature_curvatureValue,curvature_curvatureConfidence,curvatureCalculationMode,yawRate_yawRateValue,yawRate_yawRateConfidence,accelerationControlPresent,accelerationControl,lanePositionPresent,lanePosition,steeringWheelAnglePresent,steeringWheelAngle_steeringWheelAngleValue,steeringWheelAngle_steeringWheelAngleConfidence,lateralAccelerationPresent,lateralAcceleration_lateralAccelerationValue,lateralAcceleration_lateralAccelerationConfidence,verticalAccelerationPresent,verticalAcceleration_verticalAccelerationValue,verticalAcceleration_verticallAccelerationConfidence,performanceClassPresent,performanceClass,cenDsrcTollingZonePresent,cenDsrcTollingZone_cenDsrcTollingZoneLatitude,cenDsrcTollingZone_cenDsrcTollingZoneLongitude,cenDsrcTollingZone_cenDsrcTollingZoneIDPresent,cenDsrcTollingZone_cenDsrcTollingZoneID,rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent,rsuContainerHighFrequency_protectedCommunicationZonesRSU

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_CAM_high_freq_container, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.containerType is None:
        self.containerType = 0
      if self.heading_headingValue is None:
        self.heading_headingValue = 0.
      if self.heading_headingConfidence is None:
        self.heading_headingConfidence = 0
      if self.speed_speedValue is None:
        self.speed_speedValue = 0.
      if self.speed_speedConfidence is None:
        self.speed_speedConfidence = 0
      if self.driveDirection is None:
        self.driveDirection = 0
      if self.vehicleLength_vehicleLengthValue is None:
        self.vehicleLength_vehicleLengthValue = 0.
      if self.vehicleLength_vehicleLengthConfidenceIndication is None:
        self.vehicleLength_vehicleLengthConfidenceIndication = 0
      if self.vehicleWidth is None:
        self.vehicleWidth = 0.
      if self.longitudinalAcceleration_longitudinalAccelerationValue is None:
        self.longitudinalAcceleration_longitudinalAccelerationValue = 0
      if self.longitudinalAcceleration_longitudinalAccelerationConfidence is None:
        self.longitudinalAcceleration_longitudinalAccelerationConfidence = 0
      if self.curvature_curvatureValue is None:
        self.curvature_curvatureValue = 0
      if self.curvature_curvatureConfidence is None:
        self.curvature_curvatureConfidence = 0
      if self.curvatureCalculationMode is None:
        self.curvatureCalculationMode = 0
      if self.yawRate_yawRateValue is None:
        self.yawRate_yawRateValue = 0
      if self.yawRate_yawRateConfidence is None:
        self.yawRate_yawRateConfidence = 0
      if self.accelerationControlPresent is None:
        self.accelerationControlPresent = False
      if self.accelerationControl is None:
        self.accelerationControl = definitions.msg.ASN_bitstring()
      if self.lanePositionPresent is None:
        self.lanePositionPresent = False
      if self.lanePosition is None:
        self.lanePosition = 0
      if self.steeringWheelAnglePresent is None:
        self.steeringWheelAnglePresent = False
      if self.steeringWheelAngle_steeringWheelAngleValue is None:
        self.steeringWheelAngle_steeringWheelAngleValue = 0
      if self.steeringWheelAngle_steeringWheelAngleConfidence is None:
        self.steeringWheelAngle_steeringWheelAngleConfidence = 0
      if self.lateralAccelerationPresent is None:
        self.lateralAccelerationPresent = False
      if self.lateralAcceleration_lateralAccelerationValue is None:
        self.lateralAcceleration_lateralAccelerationValue = 0
      if self.lateralAcceleration_lateralAccelerationConfidence is None:
        self.lateralAcceleration_lateralAccelerationConfidence = 0
      if self.verticalAccelerationPresent is None:
        self.verticalAccelerationPresent = False
      if self.verticalAcceleration_verticalAccelerationValue is None:
        self.verticalAcceleration_verticalAccelerationValue = 0
      if self.verticalAcceleration_verticallAccelerationConfidence is None:
        self.verticalAcceleration_verticallAccelerationConfidence = 0
      if self.performanceClassPresent is None:
        self.performanceClassPresent = False
      if self.performanceClass is None:
        self.performanceClass = 0
      if self.cenDsrcTollingZonePresent is None:
        self.cenDsrcTollingZonePresent = False
      if self.cenDsrcTollingZone_cenDsrcTollingZoneLatitude is None:
        self.cenDsrcTollingZone_cenDsrcTollingZoneLatitude = 0
      if self.cenDsrcTollingZone_cenDsrcTollingZoneLongitude is None:
        self.cenDsrcTollingZone_cenDsrcTollingZoneLongitude = 0
      if self.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent is None:
        self.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent = False
      if self.cenDsrcTollingZone_cenDsrcTollingZoneID is None:
        self.cenDsrcTollingZone_cenDsrcTollingZoneID = 0
      if self.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent is None:
        self.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent = False
      if self.rsuContainerHighFrequency_protectedCommunicationZonesRSU is None:
        self.rsuContainerHighFrequency_protectedCommunicationZonesRSU = []
    else:
      self.containerType = 0
      self.heading_headingValue = 0.
      self.heading_headingConfidence = 0
      self.speed_speedValue = 0.
      self.speed_speedConfidence = 0
      self.driveDirection = 0
      self.vehicleLength_vehicleLengthValue = 0.
      self.vehicleLength_vehicleLengthConfidenceIndication = 0
      self.vehicleWidth = 0.
      self.longitudinalAcceleration_longitudinalAccelerationValue = 0
      self.longitudinalAcceleration_longitudinalAccelerationConfidence = 0
      self.curvature_curvatureValue = 0
      self.curvature_curvatureConfidence = 0
      self.curvatureCalculationMode = 0
      self.yawRate_yawRateValue = 0
      self.yawRate_yawRateConfidence = 0
      self.accelerationControlPresent = False
      self.accelerationControl = definitions.msg.ASN_bitstring()
      self.lanePositionPresent = False
      self.lanePosition = 0
      self.steeringWheelAnglePresent = False
      self.steeringWheelAngle_steeringWheelAngleValue = 0
      self.steeringWheelAngle_steeringWheelAngleConfidence = 0
      self.lateralAccelerationPresent = False
      self.lateralAcceleration_lateralAccelerationValue = 0
      self.lateralAcceleration_lateralAccelerationConfidence = 0
      self.verticalAccelerationPresent = False
      self.verticalAcceleration_verticalAccelerationValue = 0
      self.verticalAcceleration_verticallAccelerationConfidence = 0
      self.performanceClassPresent = False
      self.performanceClass = 0
      self.cenDsrcTollingZonePresent = False
      self.cenDsrcTollingZone_cenDsrcTollingZoneLatitude = 0
      self.cenDsrcTollingZone_cenDsrcTollingZoneLongitude = 0
      self.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent = False
      self.cenDsrcTollingZone_cenDsrcTollingZoneID = 0
      self.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent = False
      self.rsuContainerHighFrequency_protectedCommunicationZonesRSU = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BdBd2BdBdhBh2Bh2B().pack(_x.containerType, _x.heading_headingValue, _x.heading_headingConfidence, _x.speed_speedValue, _x.speed_speedConfidence, _x.driveDirection, _x.vehicleLength_vehicleLengthValue, _x.vehicleLength_vehicleLengthConfidenceIndication, _x.vehicleWidth, _x.longitudinalAcceleration_longitudinalAccelerationValue, _x.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.curvature_curvatureValue, _x.curvature_curvatureConfidence, _x.curvatureCalculationMode, _x.yawRate_yawRateValue, _x.yawRate_yawRateConfidence, _x.accelerationControlPresent))
      _x = self.accelerationControl.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BbBh2Bh2Bh4B2iBIB().pack(_x.accelerationControl.bits_unused, _x.lanePositionPresent, _x.lanePosition, _x.steeringWheelAnglePresent, _x.steeringWheelAngle_steeringWheelAngleValue, _x.steeringWheelAngle_steeringWheelAngleConfidence, _x.lateralAccelerationPresent, _x.lateralAcceleration_lateralAccelerationValue, _x.lateralAcceleration_lateralAccelerationConfidence, _x.verticalAccelerationPresent, _x.verticalAcceleration_verticalAccelerationValue, _x.verticalAcceleration_verticallAccelerationConfidence, _x.performanceClassPresent, _x.performanceClass, _x.cenDsrcTollingZonePresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent))
      length = len(self.rsuContainerHighFrequency_protectedCommunicationZonesRSU)
      buff.write(_struct_I.pack(length))
      for val1 in self.rsuContainerHighFrequency_protectedCommunicationZonesRSU:
        _x = val1
        buff.write(_get_struct_2BQ2i2BIB().pack(_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.accelerationControl is None:
        self.accelerationControl = definitions.msg.ASN_bitstring()
      if self.rsuContainerHighFrequency_protectedCommunicationZonesRSU is None:
        self.rsuContainerHighFrequency_protectedCommunicationZonesRSU = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.containerType, _x.heading_headingValue, _x.heading_headingConfidence, _x.speed_speedValue, _x.speed_speedConfidence, _x.driveDirection, _x.vehicleLength_vehicleLengthValue, _x.vehicleLength_vehicleLengthConfidenceIndication, _x.vehicleWidth, _x.longitudinalAcceleration_longitudinalAccelerationValue, _x.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.curvature_curvatureValue, _x.curvature_curvatureConfidence, _x.curvatureCalculationMode, _x.yawRate_yawRateValue, _x.yawRate_yawRateConfidence, _x.accelerationControlPresent,) = _get_struct_BdBd2BdBdhBh2Bh2B().unpack(str[start:end])
      self.accelerationControlPresent = bool(self.accelerationControlPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.accelerationControl.buf = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.accelerationControl.bits_unused, _x.lanePositionPresent, _x.lanePosition, _x.steeringWheelAnglePresent, _x.steeringWheelAngle_steeringWheelAngleValue, _x.steeringWheelAngle_steeringWheelAngleConfidence, _x.lateralAccelerationPresent, _x.lateralAcceleration_lateralAccelerationValue, _x.lateralAcceleration_lateralAccelerationConfidence, _x.verticalAccelerationPresent, _x.verticalAcceleration_verticalAccelerationValue, _x.verticalAcceleration_verticallAccelerationConfidence, _x.performanceClassPresent, _x.performanceClass, _x.cenDsrcTollingZonePresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent,) = _get_struct_2BbBh2Bh2Bh4B2iBIB().unpack(str[start:end])
      self.lanePositionPresent = bool(self.lanePositionPresent)
      self.steeringWheelAnglePresent = bool(self.steeringWheelAnglePresent)
      self.lateralAccelerationPresent = bool(self.lateralAccelerationPresent)
      self.verticalAccelerationPresent = bool(self.verticalAccelerationPresent)
      self.performanceClassPresent = bool(self.performanceClassPresent)
      self.cenDsrcTollingZonePresent = bool(self.cenDsrcTollingZonePresent)
      self.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent = bool(self.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent)
      self.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent = bool(self.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rsuContainerHighFrequency_protectedCommunicationZonesRSU = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_protectedCommunicationZone()
        _x = val1
        start = end
        end += 25
        (_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent,) = _get_struct_2BQ2i2BIB().unpack(str[start:end])
        val1.expiryTimePresent = bool(val1.expiryTimePresent)
        val1.protectedZoneRadiusPresent = bool(val1.protectedZoneRadiusPresent)
        val1.protectedZoneIDPresent = bool(val1.protectedZoneIDPresent)
        self.rsuContainerHighFrequency_protectedCommunicationZonesRSU.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BdBd2BdBdhBh2Bh2B().pack(_x.containerType, _x.heading_headingValue, _x.heading_headingConfidence, _x.speed_speedValue, _x.speed_speedConfidence, _x.driveDirection, _x.vehicleLength_vehicleLengthValue, _x.vehicleLength_vehicleLengthConfidenceIndication, _x.vehicleWidth, _x.longitudinalAcceleration_longitudinalAccelerationValue, _x.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.curvature_curvatureValue, _x.curvature_curvatureConfidence, _x.curvatureCalculationMode, _x.yawRate_yawRateValue, _x.yawRate_yawRateConfidence, _x.accelerationControlPresent))
      _x = self.accelerationControl.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BbBh2Bh2Bh4B2iBIB().pack(_x.accelerationControl.bits_unused, _x.lanePositionPresent, _x.lanePosition, _x.steeringWheelAnglePresent, _x.steeringWheelAngle_steeringWheelAngleValue, _x.steeringWheelAngle_steeringWheelAngleConfidence, _x.lateralAccelerationPresent, _x.lateralAcceleration_lateralAccelerationValue, _x.lateralAcceleration_lateralAccelerationConfidence, _x.verticalAccelerationPresent, _x.verticalAcceleration_verticalAccelerationValue, _x.verticalAcceleration_verticallAccelerationConfidence, _x.performanceClassPresent, _x.performanceClass, _x.cenDsrcTollingZonePresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent))
      length = len(self.rsuContainerHighFrequency_protectedCommunicationZonesRSU)
      buff.write(_struct_I.pack(length))
      for val1 in self.rsuContainerHighFrequency_protectedCommunicationZonesRSU:
        _x = val1
        buff.write(_get_struct_2BQ2i2BIB().pack(_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.accelerationControl is None:
        self.accelerationControl = definitions.msg.ASN_bitstring()
      if self.rsuContainerHighFrequency_protectedCommunicationZonesRSU is None:
        self.rsuContainerHighFrequency_protectedCommunicationZonesRSU = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.containerType, _x.heading_headingValue, _x.heading_headingConfidence, _x.speed_speedValue, _x.speed_speedConfidence, _x.driveDirection, _x.vehicleLength_vehicleLengthValue, _x.vehicleLength_vehicleLengthConfidenceIndication, _x.vehicleWidth, _x.longitudinalAcceleration_longitudinalAccelerationValue, _x.longitudinalAcceleration_longitudinalAccelerationConfidence, _x.curvature_curvatureValue, _x.curvature_curvatureConfidence, _x.curvatureCalculationMode, _x.yawRate_yawRateValue, _x.yawRate_yawRateConfidence, _x.accelerationControlPresent,) = _get_struct_BdBd2BdBdhBh2Bh2B().unpack(str[start:end])
      self.accelerationControlPresent = bool(self.accelerationControlPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.accelerationControl.buf = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.accelerationControl.bits_unused, _x.lanePositionPresent, _x.lanePosition, _x.steeringWheelAnglePresent, _x.steeringWheelAngle_steeringWheelAngleValue, _x.steeringWheelAngle_steeringWheelAngleConfidence, _x.lateralAccelerationPresent, _x.lateralAcceleration_lateralAccelerationValue, _x.lateralAcceleration_lateralAccelerationConfidence, _x.verticalAccelerationPresent, _x.verticalAcceleration_verticalAccelerationValue, _x.verticalAcceleration_verticallAccelerationConfidence, _x.performanceClassPresent, _x.performanceClass, _x.cenDsrcTollingZonePresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneLatitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneLongitude, _x.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent, _x.cenDsrcTollingZone_cenDsrcTollingZoneID, _x.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent,) = _get_struct_2BbBh2Bh2Bh4B2iBIB().unpack(str[start:end])
      self.lanePositionPresent = bool(self.lanePositionPresent)
      self.steeringWheelAnglePresent = bool(self.steeringWheelAnglePresent)
      self.lateralAccelerationPresent = bool(self.lateralAccelerationPresent)
      self.verticalAccelerationPresent = bool(self.verticalAccelerationPresent)
      self.performanceClassPresent = bool(self.performanceClassPresent)
      self.cenDsrcTollingZonePresent = bool(self.cenDsrcTollingZonePresent)
      self.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent = bool(self.cenDsrcTollingZone_cenDsrcTollingZoneIDPresent)
      self.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent = bool(self.rsuContainerHighFrequency_protectedCommunicationZonesRSUPresent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rsuContainerHighFrequency_protectedCommunicationZonesRSU = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_protectedCommunicationZone()
        _x = val1
        start = end
        end += 25
        (_x.protectedZoneType, _x.expiryTimePresent, _x.expiryTime, _x.protectedZoneLatitude, _x.protectedZoneLongitude, _x.protectedZoneRadiusPresent, _x.protectedZoneRadius, _x.protectedZoneID, _x.protectedZoneIDPresent,) = _get_struct_2BQ2i2BIB().unpack(str[start:end])
        val1.expiryTimePresent = bool(val1.expiryTimePresent)
        val1.protectedZoneRadiusPresent = bool(val1.protectedZoneRadiusPresent)
        val1.protectedZoneIDPresent = bool(val1.protectedZoneIDPresent)
        self.rsuContainerHighFrequency_protectedCommunicationZonesRSU.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BQ2i2BIB = None
def _get_struct_2BQ2i2BIB():
    global _struct_2BQ2i2BIB
    if _struct_2BQ2i2BIB is None:
        _struct_2BQ2i2BIB = struct.Struct("<2BQ2i2BIB")
    return _struct_2BQ2i2BIB
_struct_2BbBh2Bh2Bh4B2iBIB = None
def _get_struct_2BbBh2Bh2Bh4B2iBIB():
    global _struct_2BbBh2Bh2Bh4B2iBIB
    if _struct_2BbBh2Bh2Bh4B2iBIB is None:
        _struct_2BbBh2Bh2Bh4B2iBIB = struct.Struct("<2BbBh2Bh2Bh4B2iBIB")
    return _struct_2BbBh2Bh2Bh4B2iBIB
_struct_BdBd2BdBdhBh2Bh2B = None
def _get_struct_BdBd2BdBdhBh2Bh2B():
    global _struct_BdBd2BdBdhBh2Bh2B
    if _struct_BdBd2BdBdhBh2Bh2B is None:
        _struct_BdBd2BdBdhBh2Bh2B = struct.Struct("<BdBd2BdBdhBh2Bh2B")
    return _struct_BdBd2BdBdhBh2Bh2B
