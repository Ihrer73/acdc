# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_CAM_low_freq_container.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg

class v2x_CAM_low_freq_container(genpy.Message):
  _md5sum = "9343625224ba2ce234dfe0f790d1a19c"
  _type = "definitions/v2x_CAM_low_freq_container"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# LowFrequencyContainer (OPTIONAL)
    #BasicVehicleContainerLowFrequency
    uint8 containerType # 0 = Absent, 1 = BasicVehicleContainerLowFrequency
        uint8 vehicleRole
        ASN_bitstring exteriorLights
        v2x_CAM_pathPoint[] pathHistory
================================================================================
MSG: definitions/ASN_bitstring
uint8[] buf
uint8 bits_unused

================================================================================
MSG: definitions/v2x_CAM_pathPoint
int32 deltaLatitude
int32 deltaLongitude
int16 deltaAltitude
bool pathDeltaTimePresent
uint16 pathDeltaTime"""
  __slots__ = ['containerType','vehicleRole','exteriorLights','pathHistory']
  _slot_types = ['uint8','uint8','definitions/ASN_bitstring','definitions/v2x_CAM_pathPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       containerType,vehicleRole,exteriorLights,pathHistory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_CAM_low_freq_container, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.containerType is None:
        self.containerType = 0
      if self.vehicleRole is None:
        self.vehicleRole = 0
      if self.exteriorLights is None:
        self.exteriorLights = definitions.msg.ASN_bitstring()
      if self.pathHistory is None:
        self.pathHistory = []
    else:
      self.containerType = 0
      self.vehicleRole = 0
      self.exteriorLights = definitions.msg.ASN_bitstring()
      self.pathHistory = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.containerType, _x.vehicleRole))
      _x = self.exteriorLights.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exteriorLights.bits_unused
      buff.write(_get_struct_B().pack(_x))
      length = len(self.pathHistory)
      buff.write(_struct_I.pack(length))
      for val1 in self.pathHistory:
        _x = val1
        buff.write(_get_struct_2ihBH().pack(_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.exteriorLights is None:
        self.exteriorLights = definitions.msg.ASN_bitstring()
      if self.pathHistory is None:
        self.pathHistory = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.containerType, _x.vehicleRole,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.exteriorLights.buf = str[start:end]
      start = end
      end += 1
      (self.exteriorLights.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pathHistory = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_pathPoint()
        _x = val1
        start = end
        end += 13
        (_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime,) = _get_struct_2ihBH().unpack(str[start:end])
        val1.pathDeltaTimePresent = bool(val1.pathDeltaTimePresent)
        self.pathHistory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.containerType, _x.vehicleRole))
      _x = self.exteriorLights.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exteriorLights.bits_unused
      buff.write(_get_struct_B().pack(_x))
      length = len(self.pathHistory)
      buff.write(_struct_I.pack(length))
      for val1 in self.pathHistory:
        _x = val1
        buff.write(_get_struct_2ihBH().pack(_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.exteriorLights is None:
        self.exteriorLights = definitions.msg.ASN_bitstring()
      if self.pathHistory is None:
        self.pathHistory = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.containerType, _x.vehicleRole,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.exteriorLights.buf = str[start:end]
      start = end
      end += 1
      (self.exteriorLights.bits_unused,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pathHistory = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_CAM_pathPoint()
        _x = val1
        start = end
        end += 13
        (_x.deltaLatitude, _x.deltaLongitude, _x.deltaAltitude, _x.pathDeltaTimePresent, _x.pathDeltaTime,) = _get_struct_2ihBH().unpack(str[start:end])
        val1.pathDeltaTimePresent = bool(val1.pathDeltaTimePresent)
        self.pathHistory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2ihBH = None
def _get_struct_2ihBH():
    global _struct_2ihBH
    if _struct_2ihBH is None:
        _struct_2ihBH = struct.Struct("<2ihBH")
    return _struct_2ihBH
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
