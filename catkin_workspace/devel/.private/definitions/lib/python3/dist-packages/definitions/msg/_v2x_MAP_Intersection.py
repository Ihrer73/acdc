# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_MAP_Intersection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg
import geometry_msgs.msg
import std_msgs.msg

class v2x_MAP_Intersection(genpy.Message):
  _md5sum = "db4117367e9fe43d11d41d81e64e15ca"
  _type = "definitions/v2x_MAP_Intersection"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#header
Header header

# intersectionReferenceId
int32 id

# refPoint of Intersection in local coordinate system generated by ll2 projector
float32 refPoint_x
float32 refPoint_y
float32 refPoint_z

# area that is covered by lanes (relevant for extracting submap from ll2 map)
float32 maxPointX
float32 maxPointY
float32 minPointX
float32 minPointY


#Information of the different adjacent lanes
v2x_MAP_Lane[] adjacent_lanes


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: definitions/v2x_MAP_Lane
#enum directionalUse
uint8 LaneDirection_ingressPath = 0
uint8 LaneDirection_egressPath = 1
###############################################################

#general laneInformation 
    uint8 laneId
    uint8 directionalUse
    uint8 laneType  # Values as defined in SAE J 2735, "LaneTypeAttributes"
                    # 0: Vehicle, 2: Bike Lane

#coordinates of lane as flat earth projection from refPoint
    geometry_msgs/Point[] lane_coordinates

#list of lane connections
    v2x_MAP_Connection[] connections

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: definitions/v2x_MAP_Connection
#Connection
    #ConnectingLane
    uint8 connectingLane_laneId
    uint16 intersectionId #optional
    bool signalGroupId_present
    uint8 signalGroupId #optional
"""
  __slots__ = ['header','id','refPoint_x','refPoint_y','refPoint_z','maxPointX','maxPointY','minPointX','minPointY','adjacent_lanes']
  _slot_types = ['std_msgs/Header','int32','float32','float32','float32','float32','float32','float32','float32','definitions/v2x_MAP_Lane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,refPoint_x,refPoint_y,refPoint_z,maxPointX,maxPointY,minPointX,minPointY,adjacent_lanes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_MAP_Intersection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.refPoint_x is None:
        self.refPoint_x = 0.
      if self.refPoint_y is None:
        self.refPoint_y = 0.
      if self.refPoint_z is None:
        self.refPoint_z = 0.
      if self.maxPointX is None:
        self.maxPointX = 0.
      if self.maxPointY is None:
        self.maxPointY = 0.
      if self.minPointX is None:
        self.minPointX = 0.
      if self.minPointY is None:
        self.minPointY = 0.
      if self.adjacent_lanes is None:
        self.adjacent_lanes = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.refPoint_x = 0.
      self.refPoint_y = 0.
      self.refPoint_z = 0.
      self.maxPointX = 0.
      self.maxPointY = 0.
      self.minPointX = 0.
      self.minPointY = 0.
      self.adjacent_lanes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i7f().pack(_x.id, _x.refPoint_x, _x.refPoint_y, _x.refPoint_z, _x.maxPointX, _x.maxPointY, _x.minPointX, _x.minPointY))
      length = len(self.adjacent_lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.adjacent_lanes:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.laneId, _x.directionalUse, _x.laneType))
        length = len(val1.lane_coordinates)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lane_coordinates:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.connections)
        buff.write(_struct_I.pack(length))
        for val2 in val1.connections:
          _x = val2
          buff.write(_get_struct_BH2B().pack(_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.adjacent_lanes is None:
        self.adjacent_lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.id, _x.refPoint_x, _x.refPoint_y, _x.refPoint_z, _x.maxPointX, _x.maxPointY, _x.minPointX, _x.minPointY,) = _get_struct_i7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adjacent_lanes = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_MAP_Lane()
        _x = val1
        start = end
        end += 3
        (_x.laneId, _x.directionalUse, _x.laneType,) = _get_struct_3B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lane_coordinates = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.lane_coordinates.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.connections = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_MAP_Connection()
          _x = val2
          start = end
          end += 5
          (_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId,) = _get_struct_BH2B().unpack(str[start:end])
          val2.signalGroupId_present = bool(val2.signalGroupId_present)
          val1.connections.append(val2)
        self.adjacent_lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i7f().pack(_x.id, _x.refPoint_x, _x.refPoint_y, _x.refPoint_z, _x.maxPointX, _x.maxPointY, _x.minPointX, _x.minPointY))
      length = len(self.adjacent_lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.adjacent_lanes:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.laneId, _x.directionalUse, _x.laneType))
        length = len(val1.lane_coordinates)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lane_coordinates:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.connections)
        buff.write(_struct_I.pack(length))
        for val2 in val1.connections:
          _x = val2
          buff.write(_get_struct_BH2B().pack(_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.adjacent_lanes is None:
        self.adjacent_lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.id, _x.refPoint_x, _x.refPoint_y, _x.refPoint_z, _x.maxPointX, _x.maxPointY, _x.minPointX, _x.minPointY,) = _get_struct_i7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adjacent_lanes = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_MAP_Lane()
        _x = val1
        start = end
        end += 3
        (_x.laneId, _x.directionalUse, _x.laneType,) = _get_struct_3B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lane_coordinates = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.lane_coordinates.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.connections = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_MAP_Connection()
          _x = val2
          start = end
          end += 5
          (_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId,) = _get_struct_BH2B().unpack(str[start:end])
          val2.signalGroupId_present = bool(val2.signalGroupId_present)
          val1.connections.append(val2)
        self.adjacent_lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_BH2B = None
def _get_struct_BH2B():
    global _struct_BH2B
    if _struct_BH2B is None:
        _struct_BH2B = struct.Struct("<BH2B")
    return _struct_BH2B
_struct_i7f = None
def _get_struct_i7f():
    global _struct_i7f
    if _struct_i7f is None:
        _struct_i7f = struct.Struct("<i7f")
    return _struct_i7f
