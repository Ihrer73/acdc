# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_MAP_Lane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg
import geometry_msgs.msg

class v2x_MAP_Lane(genpy.Message):
  _md5sum = "aa29c07980c0d0dce29dbad848847c6d"
  _type = "definitions/v2x_MAP_Lane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#enum directionalUse
uint8 LaneDirection_ingressPath = 0
uint8 LaneDirection_egressPath = 1
###############################################################

#general laneInformation 
    uint8 laneId
    uint8 directionalUse
    uint8 laneType  # Values as defined in SAE J 2735, "LaneTypeAttributes"
                    # 0: Vehicle, 2: Bike Lane

#coordinates of lane as flat earth projection from refPoint
    geometry_msgs/Point[] lane_coordinates

#list of lane connections
    v2x_MAP_Connection[] connections

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: definitions/v2x_MAP_Connection
#Connection
    #ConnectingLane
    uint8 connectingLane_laneId
    uint16 intersectionId #optional
    bool signalGroupId_present
    uint8 signalGroupId #optional
"""
  # Pseudo-constants
  LaneDirection_ingressPath = 0
  LaneDirection_egressPath = 1

  __slots__ = ['laneId','directionalUse','laneType','lane_coordinates','connections']
  _slot_types = ['uint8','uint8','uint8','geometry_msgs/Point[]','definitions/v2x_MAP_Connection[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       laneId,directionalUse,laneType,lane_coordinates,connections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_MAP_Lane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.laneId is None:
        self.laneId = 0
      if self.directionalUse is None:
        self.directionalUse = 0
      if self.laneType is None:
        self.laneType = 0
      if self.lane_coordinates is None:
        self.lane_coordinates = []
      if self.connections is None:
        self.connections = []
    else:
      self.laneId = 0
      self.directionalUse = 0
      self.laneType = 0
      self.lane_coordinates = []
      self.connections = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.laneId, _x.directionalUse, _x.laneType))
      length = len(self.lane_coordinates)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_coordinates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.connections)
      buff.write(_struct_I.pack(length))
      for val1 in self.connections:
        _x = val1
        buff.write(_get_struct_BH2B().pack(_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_coordinates is None:
        self.lane_coordinates = None
      if self.connections is None:
        self.connections = None
      end = 0
      _x = self
      start = end
      end += 3
      (_x.laneId, _x.directionalUse, _x.laneType,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_coordinates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.lane_coordinates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.connections = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_MAP_Connection()
        _x = val1
        start = end
        end += 5
        (_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId,) = _get_struct_BH2B().unpack(str[start:end])
        val1.signalGroupId_present = bool(val1.signalGroupId_present)
        self.connections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.laneId, _x.directionalUse, _x.laneType))
      length = len(self.lane_coordinates)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_coordinates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.connections)
      buff.write(_struct_I.pack(length))
      for val1 in self.connections:
        _x = val1
        buff.write(_get_struct_BH2B().pack(_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_coordinates is None:
        self.lane_coordinates = None
      if self.connections is None:
        self.connections = None
      end = 0
      _x = self
      start = end
      end += 3
      (_x.laneId, _x.directionalUse, _x.laneType,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_coordinates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.lane_coordinates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.connections = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_MAP_Connection()
        _x = val1
        start = end
        end += 5
        (_x.connectingLane_laneId, _x.intersectionId, _x.signalGroupId_present, _x.signalGroupId,) = _get_struct_BH2B().unpack(str[start:end])
        val1.signalGroupId_present = bool(val1.signalGroupId_present)
        self.connections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_BH2B = None
def _get_struct_BH2B():
    global _struct_BH2B
    if _struct_BH2B is None:
        _struct_BH2B = struct.Struct("<BH2B")
    return _struct_BH2B
