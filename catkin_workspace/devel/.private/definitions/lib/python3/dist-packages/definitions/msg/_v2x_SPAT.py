# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_SPAT.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg

class v2x_SPAT(genpy.Message):
  _md5sum = "9d60adafab96e8d4c04947395b81dc49"
  _type = "definitions/v2x_SPAT"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# SPAT.msg
#
# 
# Values of data type float64 (aka double) are in si units (but deg is used instead of radiant!)
#

#ItsPduHeader header
    uint8 header_protocolVersion
    uint8 header_messageID
    uint32 header_stationID
#SPAT spatData
    uint8 spatData_msgID
    uint8 spatData_msgSubID
    bool spatData_msgSubID_present
    string spatData_name
    bool spatData_name_present
    v2x_SPAT_IntersectionState[] spatData_intersections
    
    #unsed
    #RegionalSPAT_regional
    #uint8[] spatData_regional unused
    bool spatData_regional_present
================================================================================
MSG: definitions/v2x_SPAT_IntersectionState
string name 
bool name_present
#IntersectionReferenceID id
    uint16 id_region
    bool id_region_present
    uint16 id_id
uint8 revision
ASN_bitstring status
uint32 moy
bool moy_present
uint32 timeStamp
bool timeStamp_present
#uint8[] enabledLanes #alternative 
v2x_SPAT_LaneID[] enabledLanes
bool enabledLanes_present
v2x_SPAT_MovementState[] states#enumerated
v2x_SPAT_ConnectionManeuverAssist[] maneuverAssistList
bool maneuverAssistList_present
uint8[] priority#octet string
bool priority_present
uint8[] preempt#octet string
bool preempt_present
v2x_SPAT_PrioritizationResponse[] regional #enumerated
bool regional_present
================================================================================
MSG: definitions/ASN_bitstring
uint8[] buf
uint8 bits_unused

================================================================================
MSG: definitions/v2x_SPAT_LaneID
uint8 laneID
================================================================================
MSG: definitions/v2x_SPAT_MovementState
string movementName
bool movementName_present
uint8 signalGroup
v2x_SPAT_MovementEvent[] state_time_speed#enumerated
v2x_SPAT_ConnectionManeuverAssist[] maneuverAssistList
bool maneuverAssistList_present

#unused
#RegionalMovementState_regional
#bool RegionalMovementState_regional_present
================================================================================
MSG: definitions/v2x_SPAT_MovementEvent
uint8 eventState#states
#TimeChangeDetails timing OPTIONAL
    uint16 timing_startTime
    bool timing_startTime_present
    uint16 timing_minEndTime
    uint16 timing_maxEndTime
    bool timing_maxEndTime_present
    uint16 timing_likelyTime
    bool timing_likelyTime_present
    uint8 timing_confidence
    bool timing_confidence_present
    uint16 timing_nextTime
    bool timing_nextTime_present
bool timing_present
v2x_SPAT_AdvisorySpeed[] speeds#enumerated
bool speeds_present
# regional unused
bool regional_present










================================================================================
MSG: definitions/v2x_SPAT_AdvisorySpeed
uint8 type#enumerated
uint16 speed
bool speed_present
uint8 confidence
bool confidence_present
uint16 distance
bool distance_present
uint8 classID
bool classID_present
#uint8 regional #unused
bool regional_present 
================================================================================
MSG: definitions/v2x_SPAT_ConnectionManeuverAssist
uint8 connectionID
uint16 queueLength
bool queueLength_present
uint16 availableStorageLength
bool availableStorageLength_present
bool waitOnStop
bool waitOnStop_present
bool pedBicycleDetect
bool pedBicycleDetect_present

#RegionalConnectionManeuverAssist regional
    v2x_SPAT_VehicleToLanePosition[] regional_vehicleToLanePositions
    #NodeOffsetPoint OPTIONAL
        uint8 regional_rsuDistanceFromAnchor_choice
        #not used choice=0 
        #Node-XY-20b choice=20
        #Node-XY-22b choice=22
        #Node-XY-24b choice=24
        #Node-XY-26b choice=26
        #Node-XY-28b choice=28
        #Node-XY-32b choice=32
        #Node-LLmD-64b choice=64
          
        int32 regional_rsuDistanceFromAnchor_node_x_lat
        int32 regional_rsuDistanceFromAnchor_node_y_lon
        #unused
        #node-Regional
================================================================================
MSG: definitions/v2x_SPAT_VehicleToLanePosition
uint32 stationID
uint8 laneID
================================================================================
MSG: definitions/v2x_SPAT_PrioritizationResponse
uint32 stationID
uint8 priorState#enumerated
uint8 signalGroup"""
  __slots__ = ['header_protocolVersion','header_messageID','header_stationID','spatData_msgID','spatData_msgSubID','spatData_msgSubID_present','spatData_name','spatData_name_present','spatData_intersections','spatData_regional_present']
  _slot_types = ['uint8','uint8','uint32','uint8','uint8','bool','string','bool','definitions/v2x_SPAT_IntersectionState[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header_protocolVersion,header_messageID,header_stationID,spatData_msgID,spatData_msgSubID,spatData_msgSubID_present,spatData_name,spatData_name_present,spatData_intersections,spatData_regional_present

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_SPAT, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header_protocolVersion is None:
        self.header_protocolVersion = 0
      if self.header_messageID is None:
        self.header_messageID = 0
      if self.header_stationID is None:
        self.header_stationID = 0
      if self.spatData_msgID is None:
        self.spatData_msgID = 0
      if self.spatData_msgSubID is None:
        self.spatData_msgSubID = 0
      if self.spatData_msgSubID_present is None:
        self.spatData_msgSubID_present = False
      if self.spatData_name is None:
        self.spatData_name = ''
      if self.spatData_name_present is None:
        self.spatData_name_present = False
      if self.spatData_intersections is None:
        self.spatData_intersections = []
      if self.spatData_regional_present is None:
        self.spatData_regional_present = False
    else:
      self.header_protocolVersion = 0
      self.header_messageID = 0
      self.header_stationID = 0
      self.spatData_msgID = 0
      self.spatData_msgSubID = 0
      self.spatData_msgSubID_present = False
      self.spatData_name = ''
      self.spatData_name_present = False
      self.spatData_intersections = []
      self.spatData_regional_present = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BI3B().pack(_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.spatData_msgID, _x.spatData_msgSubID, _x.spatData_msgSubID_present))
      _x = self.spatData_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.spatData_name_present
      buff.write(_get_struct_B().pack(_x))
      length = len(self.spatData_intersections)
      buff.write(_struct_I.pack(length))
      for val1 in self.spatData_intersections:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_BHBHB().pack(_x.name_present, _x.id_region, _x.id_region_present, _x.id_id, _x.revision))
        _v1 = val1.status
        _x = _v1.buf
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.bits_unused
        buff.write(_get_struct_B().pack(_x))
        _x = val1
        buff.write(_get_struct_IBIB().pack(_x.moy, _x.moy_present, _x.timeStamp, _x.timeStamp_present))
        length = len(val1.enabledLanes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.enabledLanes:
          _x = val2.laneID
          buff.write(_get_struct_B().pack(_x))
        _x = val1.enabledLanes_present
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.states)
        buff.write(_struct_I.pack(length))
        for val2 in val1.states:
          _x = val2.movementName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.movementName_present, _x.signalGroup))
          length = len(val2.state_time_speed)
          buff.write(_struct_I.pack(length))
          for val3 in val2.state_time_speed:
            _x = val3
            buff.write(_get_struct_BHB2HBH3BH2B().pack(_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present))
            length = len(val3.speeds)
            buff.write(_struct_I.pack(length))
            for val4 in val3.speeds:
              _x = val4
              buff.write(_get_struct_BH3BH4B().pack(_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present))
            _x = val3
            buff.write(_get_struct_2B().pack(_x.speeds_present, _x.regional_present))
          length = len(val2.maneuverAssistList)
          buff.write(_struct_I.pack(length))
          for val3 in val2.maneuverAssistList:
            _x = val3
            buff.write(_get_struct_BHBH5B().pack(_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present))
            length = len(val3.regional_vehicleToLanePositions)
            buff.write(_struct_I.pack(length))
            for val4 in val3.regional_vehicleToLanePositions:
              _x = val4
              buff.write(_get_struct_IB().pack(_x.stationID, _x.laneID))
            _x = val3
            buff.write(_get_struct_B2i().pack(_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon))
          _x = val2.maneuverAssistList_present
          buff.write(_get_struct_B().pack(_x))
        length = len(val1.maneuverAssistList)
        buff.write(_struct_I.pack(length))
        for val2 in val1.maneuverAssistList:
          _x = val2
          buff.write(_get_struct_BHBH5B().pack(_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present))
          length = len(val2.regional_vehicleToLanePositions)
          buff.write(_struct_I.pack(length))
          for val3 in val2.regional_vehicleToLanePositions:
            _x = val3
            buff.write(_get_struct_IB().pack(_x.stationID, _x.laneID))
          _x = val2
          buff.write(_get_struct_B2i().pack(_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon))
        _x = val1.maneuverAssistList_present
        buff.write(_get_struct_B().pack(_x))
        _x = val1.priority
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.priority_present
        buff.write(_get_struct_B().pack(_x))
        _x = val1.preempt
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.preempt_present
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.regional)
        buff.write(_struct_I.pack(length))
        for val2 in val1.regional:
          _x = val2
          buff.write(_get_struct_I2B().pack(_x.stationID, _x.priorState, _x.signalGroup))
        _x = val1.regional_present
        buff.write(_get_struct_B().pack(_x))
      _x = self.spatData_regional_present
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.spatData_intersections is None:
        self.spatData_intersections = None
      end = 0
      _x = self
      start = end
      end += 9
      (_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.spatData_msgID, _x.spatData_msgSubID, _x.spatData_msgSubID_present,) = _get_struct_2BI3B().unpack(str[start:end])
      self.spatData_msgSubID_present = bool(self.spatData_msgSubID_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.spatData_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.spatData_name = str[start:end]
      start = end
      end += 1
      (self.spatData_name_present,) = _get_struct_B().unpack(str[start:end])
      self.spatData_name_present = bool(self.spatData_name_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spatData_intersections = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_SPAT_IntersectionState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 7
        (_x.name_present, _x.id_region, _x.id_region_present, _x.id_id, _x.revision,) = _get_struct_BHBHB().unpack(str[start:end])
        val1.name_present = bool(val1.name_present)
        val1.id_region_present = bool(val1.id_region_present)
        _v2 = val1.status
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v2.buf = str[start:end]
        start = end
        end += 1
        (_v2.bits_unused,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.moy, _x.moy_present, _x.timeStamp, _x.timeStamp_present,) = _get_struct_IBIB().unpack(str[start:end])
        val1.moy_present = bool(val1.moy_present)
        val1.timeStamp_present = bool(val1.timeStamp_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.enabledLanes = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_LaneID()
          start = end
          end += 1
          (val2.laneID,) = _get_struct_B().unpack(str[start:end])
          val1.enabledLanes.append(val2)
        start = end
        end += 1
        (val1.enabledLanes_present,) = _get_struct_B().unpack(str[start:end])
        val1.enabledLanes_present = bool(val1.enabledLanes_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.states = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_MovementState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.movementName = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.movementName = str[start:end]
          _x = val2
          start = end
          end += 2
          (_x.movementName_present, _x.signalGroup,) = _get_struct_2B().unpack(str[start:end])
          val2.movementName_present = bool(val2.movementName_present)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.state_time_speed = []
          for i in range(0, length):
            val3 = definitions.msg.v2x_SPAT_MovementEvent()
            _x = val3
            start = end
            end += 18
            (_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present,) = _get_struct_BHB2HBH3BH2B().unpack(str[start:end])
            val3.timing_startTime_present = bool(val3.timing_startTime_present)
            val3.timing_maxEndTime_present = bool(val3.timing_maxEndTime_present)
            val3.timing_likelyTime_present = bool(val3.timing_likelyTime_present)
            val3.timing_confidence_present = bool(val3.timing_confidence_present)
            val3.timing_nextTime_present = bool(val3.timing_nextTime_present)
            val3.timing_present = bool(val3.timing_present)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.speeds = []
            for i in range(0, length):
              val4 = definitions.msg.v2x_SPAT_AdvisorySpeed()
              _x = val4
              start = end
              end += 12
              (_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present,) = _get_struct_BH3BH4B().unpack(str[start:end])
              val4.speed_present = bool(val4.speed_present)
              val4.confidence_present = bool(val4.confidence_present)
              val4.distance_present = bool(val4.distance_present)
              val4.classID_present = bool(val4.classID_present)
              val4.regional_present = bool(val4.regional_present)
              val3.speeds.append(val4)
            _x = val3
            start = end
            end += 2
            (_x.speeds_present, _x.regional_present,) = _get_struct_2B().unpack(str[start:end])
            val3.speeds_present = bool(val3.speeds_present)
            val3.regional_present = bool(val3.regional_present)
            val2.state_time_speed.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.maneuverAssistList = []
          for i in range(0, length):
            val3 = definitions.msg.v2x_SPAT_ConnectionManeuverAssist()
            _x = val3
            start = end
            end += 11
            (_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present,) = _get_struct_BHBH5B().unpack(str[start:end])
            val3.queueLength_present = bool(val3.queueLength_present)
            val3.availableStorageLength_present = bool(val3.availableStorageLength_present)
            val3.waitOnStop = bool(val3.waitOnStop)
            val3.waitOnStop_present = bool(val3.waitOnStop_present)
            val3.pedBicycleDetect = bool(val3.pedBicycleDetect)
            val3.pedBicycleDetect_present = bool(val3.pedBicycleDetect_present)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.regional_vehicleToLanePositions = []
            for i in range(0, length):
              val4 = definitions.msg.v2x_SPAT_VehicleToLanePosition()
              _x = val4
              start = end
              end += 5
              (_x.stationID, _x.laneID,) = _get_struct_IB().unpack(str[start:end])
              val3.regional_vehicleToLanePositions.append(val4)
            _x = val3
            start = end
            end += 9
            (_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon,) = _get_struct_B2i().unpack(str[start:end])
            val2.maneuverAssistList.append(val3)
          start = end
          end += 1
          (val2.maneuverAssistList_present,) = _get_struct_B().unpack(str[start:end])
          val2.maneuverAssistList_present = bool(val2.maneuverAssistList_present)
          val1.states.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.maneuverAssistList = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_ConnectionManeuverAssist()
          _x = val2
          start = end
          end += 11
          (_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present,) = _get_struct_BHBH5B().unpack(str[start:end])
          val2.queueLength_present = bool(val2.queueLength_present)
          val2.availableStorageLength_present = bool(val2.availableStorageLength_present)
          val2.waitOnStop = bool(val2.waitOnStop)
          val2.waitOnStop_present = bool(val2.waitOnStop_present)
          val2.pedBicycleDetect = bool(val2.pedBicycleDetect)
          val2.pedBicycleDetect_present = bool(val2.pedBicycleDetect_present)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.regional_vehicleToLanePositions = []
          for i in range(0, length):
            val3 = definitions.msg.v2x_SPAT_VehicleToLanePosition()
            _x = val3
            start = end
            end += 5
            (_x.stationID, _x.laneID,) = _get_struct_IB().unpack(str[start:end])
            val2.regional_vehicleToLanePositions.append(val3)
          _x = val2
          start = end
          end += 9
          (_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon,) = _get_struct_B2i().unpack(str[start:end])
          val1.maneuverAssistList.append(val2)
        start = end
        end += 1
        (val1.maneuverAssistList_present,) = _get_struct_B().unpack(str[start:end])
        val1.maneuverAssistList_present = bool(val1.maneuverAssistList_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.priority = str[start:end]
        start = end
        end += 1
        (val1.priority_present,) = _get_struct_B().unpack(str[start:end])
        val1.priority_present = bool(val1.priority_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.preempt = str[start:end]
        start = end
        end += 1
        (val1.preempt_present,) = _get_struct_B().unpack(str[start:end])
        val1.preempt_present = bool(val1.preempt_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.regional = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_PrioritizationResponse()
          _x = val2
          start = end
          end += 6
          (_x.stationID, _x.priorState, _x.signalGroup,) = _get_struct_I2B().unpack(str[start:end])
          val1.regional.append(val2)
        start = end
        end += 1
        (val1.regional_present,) = _get_struct_B().unpack(str[start:end])
        val1.regional_present = bool(val1.regional_present)
        self.spatData_intersections.append(val1)
      start = end
      end += 1
      (self.spatData_regional_present,) = _get_struct_B().unpack(str[start:end])
      self.spatData_regional_present = bool(self.spatData_regional_present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BI3B().pack(_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.spatData_msgID, _x.spatData_msgSubID, _x.spatData_msgSubID_present))
      _x = self.spatData_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.spatData_name_present
      buff.write(_get_struct_B().pack(_x))
      length = len(self.spatData_intersections)
      buff.write(_struct_I.pack(length))
      for val1 in self.spatData_intersections:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_BHBHB().pack(_x.name_present, _x.id_region, _x.id_region_present, _x.id_id, _x.revision))
        _v3 = val1.status
        _x = _v3.buf
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v3.bits_unused
        buff.write(_get_struct_B().pack(_x))
        _x = val1
        buff.write(_get_struct_IBIB().pack(_x.moy, _x.moy_present, _x.timeStamp, _x.timeStamp_present))
        length = len(val1.enabledLanes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.enabledLanes:
          _x = val2.laneID
          buff.write(_get_struct_B().pack(_x))
        _x = val1.enabledLanes_present
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.states)
        buff.write(_struct_I.pack(length))
        for val2 in val1.states:
          _x = val2.movementName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.movementName_present, _x.signalGroup))
          length = len(val2.state_time_speed)
          buff.write(_struct_I.pack(length))
          for val3 in val2.state_time_speed:
            _x = val3
            buff.write(_get_struct_BHB2HBH3BH2B().pack(_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present))
            length = len(val3.speeds)
            buff.write(_struct_I.pack(length))
            for val4 in val3.speeds:
              _x = val4
              buff.write(_get_struct_BH3BH4B().pack(_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present))
            _x = val3
            buff.write(_get_struct_2B().pack(_x.speeds_present, _x.regional_present))
          length = len(val2.maneuverAssistList)
          buff.write(_struct_I.pack(length))
          for val3 in val2.maneuverAssistList:
            _x = val3
            buff.write(_get_struct_BHBH5B().pack(_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present))
            length = len(val3.regional_vehicleToLanePositions)
            buff.write(_struct_I.pack(length))
            for val4 in val3.regional_vehicleToLanePositions:
              _x = val4
              buff.write(_get_struct_IB().pack(_x.stationID, _x.laneID))
            _x = val3
            buff.write(_get_struct_B2i().pack(_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon))
          _x = val2.maneuverAssistList_present
          buff.write(_get_struct_B().pack(_x))
        length = len(val1.maneuverAssistList)
        buff.write(_struct_I.pack(length))
        for val2 in val1.maneuverAssistList:
          _x = val2
          buff.write(_get_struct_BHBH5B().pack(_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present))
          length = len(val2.regional_vehicleToLanePositions)
          buff.write(_struct_I.pack(length))
          for val3 in val2.regional_vehicleToLanePositions:
            _x = val3
            buff.write(_get_struct_IB().pack(_x.stationID, _x.laneID))
          _x = val2
          buff.write(_get_struct_B2i().pack(_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon))
        _x = val1.maneuverAssistList_present
        buff.write(_get_struct_B().pack(_x))
        _x = val1.priority
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.priority_present
        buff.write(_get_struct_B().pack(_x))
        _x = val1.preempt
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.preempt_present
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.regional)
        buff.write(_struct_I.pack(length))
        for val2 in val1.regional:
          _x = val2
          buff.write(_get_struct_I2B().pack(_x.stationID, _x.priorState, _x.signalGroup))
        _x = val1.regional_present
        buff.write(_get_struct_B().pack(_x))
      _x = self.spatData_regional_present
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.spatData_intersections is None:
        self.spatData_intersections = None
      end = 0
      _x = self
      start = end
      end += 9
      (_x.header_protocolVersion, _x.header_messageID, _x.header_stationID, _x.spatData_msgID, _x.spatData_msgSubID, _x.spatData_msgSubID_present,) = _get_struct_2BI3B().unpack(str[start:end])
      self.spatData_msgSubID_present = bool(self.spatData_msgSubID_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.spatData_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.spatData_name = str[start:end]
      start = end
      end += 1
      (self.spatData_name_present,) = _get_struct_B().unpack(str[start:end])
      self.spatData_name_present = bool(self.spatData_name_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spatData_intersections = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_SPAT_IntersectionState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 7
        (_x.name_present, _x.id_region, _x.id_region_present, _x.id_id, _x.revision,) = _get_struct_BHBHB().unpack(str[start:end])
        val1.name_present = bool(val1.name_present)
        val1.id_region_present = bool(val1.id_region_present)
        _v4 = val1.status
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v4.buf = str[start:end]
        start = end
        end += 1
        (_v4.bits_unused,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.moy, _x.moy_present, _x.timeStamp, _x.timeStamp_present,) = _get_struct_IBIB().unpack(str[start:end])
        val1.moy_present = bool(val1.moy_present)
        val1.timeStamp_present = bool(val1.timeStamp_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.enabledLanes = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_LaneID()
          start = end
          end += 1
          (val2.laneID,) = _get_struct_B().unpack(str[start:end])
          val1.enabledLanes.append(val2)
        start = end
        end += 1
        (val1.enabledLanes_present,) = _get_struct_B().unpack(str[start:end])
        val1.enabledLanes_present = bool(val1.enabledLanes_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.states = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_MovementState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.movementName = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.movementName = str[start:end]
          _x = val2
          start = end
          end += 2
          (_x.movementName_present, _x.signalGroup,) = _get_struct_2B().unpack(str[start:end])
          val2.movementName_present = bool(val2.movementName_present)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.state_time_speed = []
          for i in range(0, length):
            val3 = definitions.msg.v2x_SPAT_MovementEvent()
            _x = val3
            start = end
            end += 18
            (_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present,) = _get_struct_BHB2HBH3BH2B().unpack(str[start:end])
            val3.timing_startTime_present = bool(val3.timing_startTime_present)
            val3.timing_maxEndTime_present = bool(val3.timing_maxEndTime_present)
            val3.timing_likelyTime_present = bool(val3.timing_likelyTime_present)
            val3.timing_confidence_present = bool(val3.timing_confidence_present)
            val3.timing_nextTime_present = bool(val3.timing_nextTime_present)
            val3.timing_present = bool(val3.timing_present)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.speeds = []
            for i in range(0, length):
              val4 = definitions.msg.v2x_SPAT_AdvisorySpeed()
              _x = val4
              start = end
              end += 12
              (_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present,) = _get_struct_BH3BH4B().unpack(str[start:end])
              val4.speed_present = bool(val4.speed_present)
              val4.confidence_present = bool(val4.confidence_present)
              val4.distance_present = bool(val4.distance_present)
              val4.classID_present = bool(val4.classID_present)
              val4.regional_present = bool(val4.regional_present)
              val3.speeds.append(val4)
            _x = val3
            start = end
            end += 2
            (_x.speeds_present, _x.regional_present,) = _get_struct_2B().unpack(str[start:end])
            val3.speeds_present = bool(val3.speeds_present)
            val3.regional_present = bool(val3.regional_present)
            val2.state_time_speed.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.maneuverAssistList = []
          for i in range(0, length):
            val3 = definitions.msg.v2x_SPAT_ConnectionManeuverAssist()
            _x = val3
            start = end
            end += 11
            (_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present,) = _get_struct_BHBH5B().unpack(str[start:end])
            val3.queueLength_present = bool(val3.queueLength_present)
            val3.availableStorageLength_present = bool(val3.availableStorageLength_present)
            val3.waitOnStop = bool(val3.waitOnStop)
            val3.waitOnStop_present = bool(val3.waitOnStop_present)
            val3.pedBicycleDetect = bool(val3.pedBicycleDetect)
            val3.pedBicycleDetect_present = bool(val3.pedBicycleDetect_present)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.regional_vehicleToLanePositions = []
            for i in range(0, length):
              val4 = definitions.msg.v2x_SPAT_VehicleToLanePosition()
              _x = val4
              start = end
              end += 5
              (_x.stationID, _x.laneID,) = _get_struct_IB().unpack(str[start:end])
              val3.regional_vehicleToLanePositions.append(val4)
            _x = val3
            start = end
            end += 9
            (_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon,) = _get_struct_B2i().unpack(str[start:end])
            val2.maneuverAssistList.append(val3)
          start = end
          end += 1
          (val2.maneuverAssistList_present,) = _get_struct_B().unpack(str[start:end])
          val2.maneuverAssistList_present = bool(val2.maneuverAssistList_present)
          val1.states.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.maneuverAssistList = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_ConnectionManeuverAssist()
          _x = val2
          start = end
          end += 11
          (_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present,) = _get_struct_BHBH5B().unpack(str[start:end])
          val2.queueLength_present = bool(val2.queueLength_present)
          val2.availableStorageLength_present = bool(val2.availableStorageLength_present)
          val2.waitOnStop = bool(val2.waitOnStop)
          val2.waitOnStop_present = bool(val2.waitOnStop_present)
          val2.pedBicycleDetect = bool(val2.pedBicycleDetect)
          val2.pedBicycleDetect_present = bool(val2.pedBicycleDetect_present)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.regional_vehicleToLanePositions = []
          for i in range(0, length):
            val3 = definitions.msg.v2x_SPAT_VehicleToLanePosition()
            _x = val3
            start = end
            end += 5
            (_x.stationID, _x.laneID,) = _get_struct_IB().unpack(str[start:end])
            val2.regional_vehicleToLanePositions.append(val3)
          _x = val2
          start = end
          end += 9
          (_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon,) = _get_struct_B2i().unpack(str[start:end])
          val1.maneuverAssistList.append(val2)
        start = end
        end += 1
        (val1.maneuverAssistList_present,) = _get_struct_B().unpack(str[start:end])
        val1.maneuverAssistList_present = bool(val1.maneuverAssistList_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.priority = str[start:end]
        start = end
        end += 1
        (val1.priority_present,) = _get_struct_B().unpack(str[start:end])
        val1.priority_present = bool(val1.priority_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.preempt = str[start:end]
        start = end
        end += 1
        (val1.preempt_present,) = _get_struct_B().unpack(str[start:end])
        val1.preempt_present = bool(val1.preempt_present)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.regional = []
        for i in range(0, length):
          val2 = definitions.msg.v2x_SPAT_PrioritizationResponse()
          _x = val2
          start = end
          end += 6
          (_x.stationID, _x.priorState, _x.signalGroup,) = _get_struct_I2B().unpack(str[start:end])
          val1.regional.append(val2)
        start = end
        end += 1
        (val1.regional_present,) = _get_struct_B().unpack(str[start:end])
        val1.regional_present = bool(val1.regional_present)
        self.spatData_intersections.append(val1)
      start = end
      end += 1
      (self.spatData_regional_present,) = _get_struct_B().unpack(str[start:end])
      self.spatData_regional_present = bool(self.spatData_regional_present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2BI3B = None
def _get_struct_2BI3B():
    global _struct_2BI3B
    if _struct_2BI3B is None:
        _struct_2BI3B = struct.Struct("<2BI3B")
    return _struct_2BI3B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2i = None
def _get_struct_B2i():
    global _struct_B2i
    if _struct_B2i is None:
        _struct_B2i = struct.Struct("<B2i")
    return _struct_B2i
_struct_BH3BH4B = None
def _get_struct_BH3BH4B():
    global _struct_BH3BH4B
    if _struct_BH3BH4B is None:
        _struct_BH3BH4B = struct.Struct("<BH3BH4B")
    return _struct_BH3BH4B
_struct_BHB2HBH3BH2B = None
def _get_struct_BHB2HBH3BH2B():
    global _struct_BHB2HBH3BH2B
    if _struct_BHB2HBH3BH2B is None:
        _struct_BHB2HBH3BH2B = struct.Struct("<BHB2HBH3BH2B")
    return _struct_BHB2HBH3BH2B
_struct_BHBH5B = None
def _get_struct_BHBH5B():
    global _struct_BHBH5B
    if _struct_BHBH5B is None:
        _struct_BHBH5B = struct.Struct("<BHBH5B")
    return _struct_BHBH5B
_struct_BHBHB = None
def _get_struct_BHBHB():
    global _struct_BHBHB
    if _struct_BHBHB is None:
        _struct_BHBHB = struct.Struct("<BHBHB")
    return _struct_BHBHB
_struct_I2B = None
def _get_struct_I2B():
    global _struct_I2B
    if _struct_I2B is None:
        _struct_I2B = struct.Struct("<I2B")
    return _struct_I2B
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_IBIB = None
def _get_struct_IBIB():
    global _struct_IBIB
    if _struct_IBIB is None:
        _struct_IBIB = struct.Struct("<IBIB")
    return _struct_IBIB
