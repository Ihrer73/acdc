# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_SPAT_AdvisorySpeed.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class v2x_SPAT_AdvisorySpeed(genpy.Message):
  _md5sum = "d9b985f243f7d5dd34f7bc6cd3bc9c5a"
  _type = "definitions/v2x_SPAT_AdvisorySpeed"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 type#enumerated
uint16 speed
bool speed_present
uint8 confidence
bool confidence_present
uint16 distance
bool distance_present
uint8 classID
bool classID_present
#uint8 regional #unused
bool regional_present """
  __slots__ = ['type','speed','speed_present','confidence','confidence_present','distance','distance_present','classID','classID_present','regional_present']
  _slot_types = ['uint8','uint16','bool','uint8','bool','uint16','bool','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,speed,speed_present,confidence,confidence_present,distance,distance_present,classID,classID_present,regional_present

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_SPAT_AdvisorySpeed, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.speed is None:
        self.speed = 0
      if self.speed_present is None:
        self.speed_present = False
      if self.confidence is None:
        self.confidence = 0
      if self.confidence_present is None:
        self.confidence_present = False
      if self.distance is None:
        self.distance = 0
      if self.distance_present is None:
        self.distance_present = False
      if self.classID is None:
        self.classID = 0
      if self.classID_present is None:
        self.classID_present = False
      if self.regional_present is None:
        self.regional_present = False
    else:
      self.type = 0
      self.speed = 0
      self.speed_present = False
      self.confidence = 0
      self.confidence_present = False
      self.distance = 0
      self.distance_present = False
      self.classID = 0
      self.classID_present = False
      self.regional_present = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BH3BH4B().pack(_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present,) = _get_struct_BH3BH4B().unpack(str[start:end])
      self.speed_present = bool(self.speed_present)
      self.confidence_present = bool(self.confidence_present)
      self.distance_present = bool(self.distance_present)
      self.classID_present = bool(self.classID_present)
      self.regional_present = bool(self.regional_present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BH3BH4B().pack(_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present,) = _get_struct_BH3BH4B().unpack(str[start:end])
      self.speed_present = bool(self.speed_present)
      self.confidence_present = bool(self.confidence_present)
      self.distance_present = bool(self.distance_present)
      self.classID_present = bool(self.classID_present)
      self.regional_present = bool(self.regional_present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH3BH4B = None
def _get_struct_BH3BH4B():
    global _struct_BH3BH4B
    if _struct_BH3BH4B is None:
        _struct_BH3BH4B = struct.Struct("<BH3BH4B")
    return _struct_BH3BH4B
