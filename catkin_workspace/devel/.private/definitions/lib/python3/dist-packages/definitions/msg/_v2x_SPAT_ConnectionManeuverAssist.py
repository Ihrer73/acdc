# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_SPAT_ConnectionManeuverAssist.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg

class v2x_SPAT_ConnectionManeuverAssist(genpy.Message):
  _md5sum = "cfd5c06153f691c0e5fca16d1db151cc"
  _type = "definitions/v2x_SPAT_ConnectionManeuverAssist"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 connectionID
uint16 queueLength
bool queueLength_present
uint16 availableStorageLength
bool availableStorageLength_present
bool waitOnStop
bool waitOnStop_present
bool pedBicycleDetect
bool pedBicycleDetect_present

#RegionalConnectionManeuverAssist regional
    v2x_SPAT_VehicleToLanePosition[] regional_vehicleToLanePositions
    #NodeOffsetPoint OPTIONAL
        uint8 regional_rsuDistanceFromAnchor_choice
        #not used choice=0 
        #Node-XY-20b choice=20
        #Node-XY-22b choice=22
        #Node-XY-24b choice=24
        #Node-XY-26b choice=26
        #Node-XY-28b choice=28
        #Node-XY-32b choice=32
        #Node-LLmD-64b choice=64
          
        int32 regional_rsuDistanceFromAnchor_node_x_lat
        int32 regional_rsuDistanceFromAnchor_node_y_lon
        #unused
        #node-Regional
================================================================================
MSG: definitions/v2x_SPAT_VehicleToLanePosition
uint32 stationID
uint8 laneID"""
  __slots__ = ['connectionID','queueLength','queueLength_present','availableStorageLength','availableStorageLength_present','waitOnStop','waitOnStop_present','pedBicycleDetect','pedBicycleDetect_present','regional_vehicleToLanePositions','regional_rsuDistanceFromAnchor_choice','regional_rsuDistanceFromAnchor_node_x_lat','regional_rsuDistanceFromAnchor_node_y_lon']
  _slot_types = ['uint8','uint16','bool','uint16','bool','bool','bool','bool','bool','definitions/v2x_SPAT_VehicleToLanePosition[]','uint8','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       connectionID,queueLength,queueLength_present,availableStorageLength,availableStorageLength_present,waitOnStop,waitOnStop_present,pedBicycleDetect,pedBicycleDetect_present,regional_vehicleToLanePositions,regional_rsuDistanceFromAnchor_choice,regional_rsuDistanceFromAnchor_node_x_lat,regional_rsuDistanceFromAnchor_node_y_lon

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_SPAT_ConnectionManeuverAssist, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.connectionID is None:
        self.connectionID = 0
      if self.queueLength is None:
        self.queueLength = 0
      if self.queueLength_present is None:
        self.queueLength_present = False
      if self.availableStorageLength is None:
        self.availableStorageLength = 0
      if self.availableStorageLength_present is None:
        self.availableStorageLength_present = False
      if self.waitOnStop is None:
        self.waitOnStop = False
      if self.waitOnStop_present is None:
        self.waitOnStop_present = False
      if self.pedBicycleDetect is None:
        self.pedBicycleDetect = False
      if self.pedBicycleDetect_present is None:
        self.pedBicycleDetect_present = False
      if self.regional_vehicleToLanePositions is None:
        self.regional_vehicleToLanePositions = []
      if self.regional_rsuDistanceFromAnchor_choice is None:
        self.regional_rsuDistanceFromAnchor_choice = 0
      if self.regional_rsuDistanceFromAnchor_node_x_lat is None:
        self.regional_rsuDistanceFromAnchor_node_x_lat = 0
      if self.regional_rsuDistanceFromAnchor_node_y_lon is None:
        self.regional_rsuDistanceFromAnchor_node_y_lon = 0
    else:
      self.connectionID = 0
      self.queueLength = 0
      self.queueLength_present = False
      self.availableStorageLength = 0
      self.availableStorageLength_present = False
      self.waitOnStop = False
      self.waitOnStop_present = False
      self.pedBicycleDetect = False
      self.pedBicycleDetect_present = False
      self.regional_vehicleToLanePositions = []
      self.regional_rsuDistanceFromAnchor_choice = 0
      self.regional_rsuDistanceFromAnchor_node_x_lat = 0
      self.regional_rsuDistanceFromAnchor_node_y_lon = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BHBH5B().pack(_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present))
      length = len(self.regional_vehicleToLanePositions)
      buff.write(_struct_I.pack(length))
      for val1 in self.regional_vehicleToLanePositions:
        _x = val1
        buff.write(_get_struct_IB().pack(_x.stationID, _x.laneID))
      _x = self
      buff.write(_get_struct_B2i().pack(_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.regional_vehicleToLanePositions is None:
        self.regional_vehicleToLanePositions = None
      end = 0
      _x = self
      start = end
      end += 11
      (_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present,) = _get_struct_BHBH5B().unpack(str[start:end])
      self.queueLength_present = bool(self.queueLength_present)
      self.availableStorageLength_present = bool(self.availableStorageLength_present)
      self.waitOnStop = bool(self.waitOnStop)
      self.waitOnStop_present = bool(self.waitOnStop_present)
      self.pedBicycleDetect = bool(self.pedBicycleDetect)
      self.pedBicycleDetect_present = bool(self.pedBicycleDetect_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.regional_vehicleToLanePositions = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_SPAT_VehicleToLanePosition()
        _x = val1
        start = end
        end += 5
        (_x.stationID, _x.laneID,) = _get_struct_IB().unpack(str[start:end])
        self.regional_vehicleToLanePositions.append(val1)
      _x = self
      start = end
      end += 9
      (_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon,) = _get_struct_B2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BHBH5B().pack(_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present))
      length = len(self.regional_vehicleToLanePositions)
      buff.write(_struct_I.pack(length))
      for val1 in self.regional_vehicleToLanePositions:
        _x = val1
        buff.write(_get_struct_IB().pack(_x.stationID, _x.laneID))
      _x = self
      buff.write(_get_struct_B2i().pack(_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.regional_vehicleToLanePositions is None:
        self.regional_vehicleToLanePositions = None
      end = 0
      _x = self
      start = end
      end += 11
      (_x.connectionID, _x.queueLength, _x.queueLength_present, _x.availableStorageLength, _x.availableStorageLength_present, _x.waitOnStop, _x.waitOnStop_present, _x.pedBicycleDetect, _x.pedBicycleDetect_present,) = _get_struct_BHBH5B().unpack(str[start:end])
      self.queueLength_present = bool(self.queueLength_present)
      self.availableStorageLength_present = bool(self.availableStorageLength_present)
      self.waitOnStop = bool(self.waitOnStop)
      self.waitOnStop_present = bool(self.waitOnStop_present)
      self.pedBicycleDetect = bool(self.pedBicycleDetect)
      self.pedBicycleDetect_present = bool(self.pedBicycleDetect_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.regional_vehicleToLanePositions = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_SPAT_VehicleToLanePosition()
        _x = val1
        start = end
        end += 5
        (_x.stationID, _x.laneID,) = _get_struct_IB().unpack(str[start:end])
        self.regional_vehicleToLanePositions.append(val1)
      _x = self
      start = end
      end += 9
      (_x.regional_rsuDistanceFromAnchor_choice, _x.regional_rsuDistanceFromAnchor_node_x_lat, _x.regional_rsuDistanceFromAnchor_node_y_lon,) = _get_struct_B2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2i = None
def _get_struct_B2i():
    global _struct_B2i
    if _struct_B2i is None:
        _struct_B2i = struct.Struct("<B2i")
    return _struct_B2i
_struct_BHBH5B = None
def _get_struct_BHBH5B():
    global _struct_BHBH5B
    if _struct_BHBH5B is None:
        _struct_BHBH5B = struct.Struct("<BHBH5B")
    return _struct_BHBH5B
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
