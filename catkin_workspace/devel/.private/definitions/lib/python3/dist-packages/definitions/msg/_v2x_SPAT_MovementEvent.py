# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from definitions/v2x_SPAT_MovementEvent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import definitions.msg

class v2x_SPAT_MovementEvent(genpy.Message):
  _md5sum = "610b762ffa0933b41e08372a63dda623"
  _type = "definitions/v2x_SPAT_MovementEvent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 eventState#states
#TimeChangeDetails timing OPTIONAL
    uint16 timing_startTime
    bool timing_startTime_present
    uint16 timing_minEndTime
    uint16 timing_maxEndTime
    bool timing_maxEndTime_present
    uint16 timing_likelyTime
    bool timing_likelyTime_present
    uint8 timing_confidence
    bool timing_confidence_present
    uint16 timing_nextTime
    bool timing_nextTime_present
bool timing_present
v2x_SPAT_AdvisorySpeed[] speeds#enumerated
bool speeds_present
# regional unused
bool regional_present










================================================================================
MSG: definitions/v2x_SPAT_AdvisorySpeed
uint8 type#enumerated
uint16 speed
bool speed_present
uint8 confidence
bool confidence_present
uint16 distance
bool distance_present
uint8 classID
bool classID_present
#uint8 regional #unused
bool regional_present """
  __slots__ = ['eventState','timing_startTime','timing_startTime_present','timing_minEndTime','timing_maxEndTime','timing_maxEndTime_present','timing_likelyTime','timing_likelyTime_present','timing_confidence','timing_confidence_present','timing_nextTime','timing_nextTime_present','timing_present','speeds','speeds_present','regional_present']
  _slot_types = ['uint8','uint16','bool','uint16','uint16','bool','uint16','bool','uint8','bool','uint16','bool','bool','definitions/v2x_SPAT_AdvisorySpeed[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       eventState,timing_startTime,timing_startTime_present,timing_minEndTime,timing_maxEndTime,timing_maxEndTime_present,timing_likelyTime,timing_likelyTime_present,timing_confidence,timing_confidence_present,timing_nextTime,timing_nextTime_present,timing_present,speeds,speeds_present,regional_present

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v2x_SPAT_MovementEvent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.eventState is None:
        self.eventState = 0
      if self.timing_startTime is None:
        self.timing_startTime = 0
      if self.timing_startTime_present is None:
        self.timing_startTime_present = False
      if self.timing_minEndTime is None:
        self.timing_minEndTime = 0
      if self.timing_maxEndTime is None:
        self.timing_maxEndTime = 0
      if self.timing_maxEndTime_present is None:
        self.timing_maxEndTime_present = False
      if self.timing_likelyTime is None:
        self.timing_likelyTime = 0
      if self.timing_likelyTime_present is None:
        self.timing_likelyTime_present = False
      if self.timing_confidence is None:
        self.timing_confidence = 0
      if self.timing_confidence_present is None:
        self.timing_confidence_present = False
      if self.timing_nextTime is None:
        self.timing_nextTime = 0
      if self.timing_nextTime_present is None:
        self.timing_nextTime_present = False
      if self.timing_present is None:
        self.timing_present = False
      if self.speeds is None:
        self.speeds = []
      if self.speeds_present is None:
        self.speeds_present = False
      if self.regional_present is None:
        self.regional_present = False
    else:
      self.eventState = 0
      self.timing_startTime = 0
      self.timing_startTime_present = False
      self.timing_minEndTime = 0
      self.timing_maxEndTime = 0
      self.timing_maxEndTime_present = False
      self.timing_likelyTime = 0
      self.timing_likelyTime_present = False
      self.timing_confidence = 0
      self.timing_confidence_present = False
      self.timing_nextTime = 0
      self.timing_nextTime_present = False
      self.timing_present = False
      self.speeds = []
      self.speeds_present = False
      self.regional_present = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BHB2HBH3BH2B().pack(_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present))
      length = len(self.speeds)
      buff.write(_struct_I.pack(length))
      for val1 in self.speeds:
        _x = val1
        buff.write(_get_struct_BH3BH4B().pack(_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present))
      _x = self
      buff.write(_get_struct_2B().pack(_x.speeds_present, _x.regional_present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.speeds is None:
        self.speeds = None
      end = 0
      _x = self
      start = end
      end += 18
      (_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present,) = _get_struct_BHB2HBH3BH2B().unpack(str[start:end])
      self.timing_startTime_present = bool(self.timing_startTime_present)
      self.timing_maxEndTime_present = bool(self.timing_maxEndTime_present)
      self.timing_likelyTime_present = bool(self.timing_likelyTime_present)
      self.timing_confidence_present = bool(self.timing_confidence_present)
      self.timing_nextTime_present = bool(self.timing_nextTime_present)
      self.timing_present = bool(self.timing_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speeds = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_SPAT_AdvisorySpeed()
        _x = val1
        start = end
        end += 12
        (_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present,) = _get_struct_BH3BH4B().unpack(str[start:end])
        val1.speed_present = bool(val1.speed_present)
        val1.confidence_present = bool(val1.confidence_present)
        val1.distance_present = bool(val1.distance_present)
        val1.classID_present = bool(val1.classID_present)
        val1.regional_present = bool(val1.regional_present)
        self.speeds.append(val1)
      _x = self
      start = end
      end += 2
      (_x.speeds_present, _x.regional_present,) = _get_struct_2B().unpack(str[start:end])
      self.speeds_present = bool(self.speeds_present)
      self.regional_present = bool(self.regional_present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BHB2HBH3BH2B().pack(_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present))
      length = len(self.speeds)
      buff.write(_struct_I.pack(length))
      for val1 in self.speeds:
        _x = val1
        buff.write(_get_struct_BH3BH4B().pack(_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present))
      _x = self
      buff.write(_get_struct_2B().pack(_x.speeds_present, _x.regional_present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.speeds is None:
        self.speeds = None
      end = 0
      _x = self
      start = end
      end += 18
      (_x.eventState, _x.timing_startTime, _x.timing_startTime_present, _x.timing_minEndTime, _x.timing_maxEndTime, _x.timing_maxEndTime_present, _x.timing_likelyTime, _x.timing_likelyTime_present, _x.timing_confidence, _x.timing_confidence_present, _x.timing_nextTime, _x.timing_nextTime_present, _x.timing_present,) = _get_struct_BHB2HBH3BH2B().unpack(str[start:end])
      self.timing_startTime_present = bool(self.timing_startTime_present)
      self.timing_maxEndTime_present = bool(self.timing_maxEndTime_present)
      self.timing_likelyTime_present = bool(self.timing_likelyTime_present)
      self.timing_confidence_present = bool(self.timing_confidence_present)
      self.timing_nextTime_present = bool(self.timing_nextTime_present)
      self.timing_present = bool(self.timing_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speeds = []
      for i in range(0, length):
        val1 = definitions.msg.v2x_SPAT_AdvisorySpeed()
        _x = val1
        start = end
        end += 12
        (_x.type, _x.speed, _x.speed_present, _x.confidence, _x.confidence_present, _x.distance, _x.distance_present, _x.classID, _x.classID_present, _x.regional_present,) = _get_struct_BH3BH4B().unpack(str[start:end])
        val1.speed_present = bool(val1.speed_present)
        val1.confidence_present = bool(val1.confidence_present)
        val1.distance_present = bool(val1.distance_present)
        val1.classID_present = bool(val1.classID_present)
        val1.regional_present = bool(val1.regional_present)
        self.speeds.append(val1)
      _x = self
      start = end
      end += 2
      (_x.speeds_present, _x.regional_present,) = _get_struct_2B().unpack(str[start:end])
      self.speeds_present = bool(self.speeds_present)
      self.regional_present = bool(self.regional_present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_BH3BH4B = None
def _get_struct_BH3BH4B():
    global _struct_BH3BH4B
    if _struct_BH3BH4B is None:
        _struct_BH3BH4B = struct.Struct("<BH3BH4B")
    return _struct_BH3BH4B
_struct_BHB2HBH3BH2B = None
def _get_struct_BHB2HBH3BH2B():
    global _struct_BHB2HBH3BH2B
    if _struct_BHB2HBH3BH2B is None:
        _struct_BHB2HBH3BH2B = struct.Struct("<BHB2HBH3BH2B")
    return _struct_BHB2HBH3BH2B
