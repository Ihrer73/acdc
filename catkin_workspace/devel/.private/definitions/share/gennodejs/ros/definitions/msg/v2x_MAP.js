// Auto-generated. Do not edit!

// (in-package definitions.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let v2x_MAP_Intersection = require('./v2x_MAP_Intersection.js');

//-----------------------------------------------------------

class v2x_MAP {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.intersections = null;
      this.layerIDs = null;
    }
    else {
      if (initObj.hasOwnProperty('intersections')) {
        this.intersections = initObj.intersections
      }
      else {
        this.intersections = [];
      }
      if (initObj.hasOwnProperty('layerIDs')) {
        this.layerIDs = initObj.layerIDs
      }
      else {
        this.layerIDs = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type v2x_MAP
    // Serialize message field [intersections]
    // Serialize the length for message field [intersections]
    bufferOffset = _serializer.uint32(obj.intersections.length, buffer, bufferOffset);
    obj.intersections.forEach((val) => {
      bufferOffset = v2x_MAP_Intersection.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [layerIDs]
    bufferOffset = _arraySerializer.int32(obj.layerIDs, buffer, bufferOffset, null);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type v2x_MAP
    let len;
    let data = new v2x_MAP(null);
    // Deserialize message field [intersections]
    // Deserialize array length for message field [intersections]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.intersections = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.intersections[i] = v2x_MAP_Intersection.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [layerIDs]
    data.layerIDs = _arrayDeserializer.int32(buffer, bufferOffset, null)
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.intersections.forEach((val) => {
      length += v2x_MAP_Intersection.getMessageSize(val);
    });
    length += 4 * object.layerIDs.length;
    return length + 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'definitions/v2x_MAP';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '2d4ab11f239542c98de4ee314e01377a';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    #Conversion of MAP intersections with adjacent lanes to lanelet map format 
    v2x_MAP_Intersection[] intersections
    int32[] layerIDs
    ================================================================================
    MSG: definitions/v2x_MAP_Intersection
    #header
    Header header
    
    # intersectionReferenceId
    int32 id
    
    # refPoint of Intersection in local coordinate system generated by ll2 projector
    float32 refPoint_x
    float32 refPoint_y
    float32 refPoint_z
    
    # area that is covered by lanes (relevant for extracting submap from ll2 map)
    float32 maxPointX
    float32 maxPointY
    float32 minPointX
    float32 minPointY
    
    
    #Information of the different adjacent lanes
    v2x_MAP_Lane[] adjacent_lanes
    
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: definitions/v2x_MAP_Lane
    #enum directionalUse
    uint8 LaneDirection_ingressPath = 0
    uint8 LaneDirection_egressPath = 1
    ###############################################################
    
    #general laneInformation 
        uint8 laneId
        uint8 directionalUse
        uint8 laneType  # Values as defined in SAE J 2735, "LaneTypeAttributes"
                        # 0: Vehicle, 2: Bike Lane
    
    #coordinates of lane as flat earth projection from refPoint
        geometry_msgs/Point[] lane_coordinates
    
    #list of lane connections
        v2x_MAP_Connection[] connections
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: definitions/v2x_MAP_Connection
    #Connection
        #ConnectingLane
        uint8 connectingLane_laneId
        uint16 intersectionId #optional
        bool signalGroupId_present
        uint8 signalGroupId #optional
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new v2x_MAP(null);
    if (msg.intersections !== undefined) {
      resolved.intersections = new Array(msg.intersections.length);
      for (let i = 0; i < resolved.intersections.length; ++i) {
        resolved.intersections[i] = v2x_MAP_Intersection.Resolve(msg.intersections[i]);
      }
    }
    else {
      resolved.intersections = []
    }

    if (msg.layerIDs !== undefined) {
      resolved.layerIDs = msg.layerIDs;
    }
    else {
      resolved.layerIDs = []
    }

    return resolved;
    }
};

module.exports = v2x_MAP;
