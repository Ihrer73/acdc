;; Auto-generated. Do not edit!


(when (boundp 'definitions::v2x_MAP)
  (if (not (find-package "DEFINITIONS"))
    (make-package "DEFINITIONS"))
  (shadow 'v2x_MAP (find-package "DEFINITIONS")))
(unless (find-package "DEFINITIONS::V2X_MAP")
  (make-package "DEFINITIONS::V2X_MAP"))

(in-package "ROS")
;;//! \htmlinclude v2x_MAP.msg.html


(defclass definitions::v2x_MAP
  :super ros::object
  :slots (_intersections _layerIDs ))

(defmethod definitions::v2x_MAP
  (:init
   (&key
    ((:intersections __intersections) ())
    ((:layerIDs __layerIDs) (make-array 0 :initial-element 0 :element-type :integer))
    )
   (send-super :init)
   (setq _intersections __intersections)
   (setq _layerIDs __layerIDs)
   self)
  (:intersections
   (&rest __intersections)
   (if (keywordp (car __intersections))
       (send* _intersections __intersections)
     (progn
       (if __intersections (setq _intersections (car __intersections)))
       _intersections)))
  (:layerIDs
   (&optional __layerIDs)
   (if __layerIDs (setq _layerIDs __layerIDs)) _layerIDs)
  (:serialization-length
   ()
   (+
    ;; definitions/v2x_MAP_Intersection[] _intersections
    (apply #'+ (send-all _intersections :serialization-length)) 4
    ;; int32[] _layerIDs
    (* 4    (length _layerIDs)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; definitions/v2x_MAP_Intersection[] _intersections
     (write-long (length _intersections) s)
     (dolist (elem _intersections)
       (send elem :serialize s)
       )
     ;; int32[] _layerIDs
     (write-long (length _layerIDs) s)
     (dotimes (i (length _layerIDs))
       (write-long (elt _layerIDs i) s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; definitions/v2x_MAP_Intersection[] _intersections
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _intersections (let (r) (dotimes (i n) (push (instance definitions::v2x_MAP_Intersection :init) r)) r))
     (dolist (elem- _intersections)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; int32[] _layerIDs
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _layerIDs (instantiate integer-vector n))
     (dotimes (i n)
     (setf (elt _layerIDs i) (sys::peek buf ptr- :integer)) (incf ptr- 4)
     ))
   ;;
   self)
  )

(setf (get definitions::v2x_MAP :md5sum-) "2d4ab11f239542c98de4ee314e01377a")
(setf (get definitions::v2x_MAP :datatype-) "definitions/v2x_MAP")
(setf (get definitions::v2x_MAP :definition-)
      "#Conversion of MAP intersections with adjacent lanes to lanelet map format 
v2x_MAP_Intersection[] intersections
int32[] layerIDs
================================================================================
MSG: definitions/v2x_MAP_Intersection
#header
Header header

# intersectionReferenceId
int32 id

# refPoint of Intersection in local coordinate system generated by ll2 projector
float32 refPoint_x
float32 refPoint_y
float32 refPoint_z

# area that is covered by lanes (relevant for extracting submap from ll2 map)
float32 maxPointX
float32 maxPointY
float32 minPointX
float32 minPointY


#Information of the different adjacent lanes
v2x_MAP_Lane[] adjacent_lanes


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: definitions/v2x_MAP_Lane
#enum directionalUse
uint8 LaneDirection_ingressPath = 0
uint8 LaneDirection_egressPath = 1
###############################################################

#general laneInformation 
    uint8 laneId
    uint8 directionalUse
    uint8 laneType  # Values as defined in SAE J 2735, \"LaneTypeAttributes\"
                    # 0: Vehicle, 2: Bike Lane

#coordinates of lane as flat earth projection from refPoint
    geometry_msgs/Point[] lane_coordinates

#list of lane connections
    v2x_MAP_Connection[] connections

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: definitions/v2x_MAP_Connection
#Connection
    #ConnectingLane
    uint8 connectingLane_laneId
    uint16 intersectionId #optional
    bool signalGroupId_present
    uint8 signalGroupId #optional

")



(provide :definitions/v2x_MAP "2d4ab11f239542c98de4ee314e01377a")


