//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the trajectory_planner package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __trajectory_planner__TRAJECTORY_PLANNERCONFIG_H__
#define __trajectory_planner__TRAJECTORY_PLANNERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace trajectory_planner
{
  class trajectory_plannerConfigStatics;

  class trajectory_plannerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(trajectory_plannerConfig &config, const trajectory_plannerConfig &max, const trajectory_plannerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const trajectory_plannerConfig &config1, const trajectory_plannerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, trajectory_plannerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const trajectory_plannerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, trajectory_plannerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const trajectory_plannerConfig &config) const = 0;
      virtual void getValue(const trajectory_plannerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T trajectory_plannerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T trajectory_plannerConfig::* field;

      virtual void clamp(trajectory_plannerConfig &config, const trajectory_plannerConfig &max, const trajectory_plannerConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const trajectory_plannerConfig &config1, const trajectory_plannerConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, trajectory_plannerConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const trajectory_plannerConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, trajectory_plannerConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const trajectory_plannerConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const trajectory_plannerConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, trajectory_plannerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, trajectory_plannerConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<trajectory_plannerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(trajectory_plannerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("mainFrequency"==(*_i)->name){mainFrequency = boost::any_cast<int>(val);}
        if("mpcIterations"==(*_i)->name){mpcIterations = boost::any_cast<int>(val);}
        if("targetVelocity"==(*_i)->name){targetVelocity = boost::any_cast<int>(val);}
        if("aCurvRefVel"==(*_i)->name){aCurvRefVel = boost::any_cast<double>(val);}
        if("aGradRefVel"==(*_i)->name){aGradRefVel = boost::any_cast<double>(val);}
        if("velocityWeight"==(*_i)->name){velocityWeight = boost::any_cast<double>(val);}
        if("pathWeight"==(*_i)->name){pathWeight = boost::any_cast<double>(val);}
        if("yawWeight"==(*_i)->name){yawWeight = boost::any_cast<double>(val);}
        if("jerkWeight"==(*_i)->name){jerkWeight = boost::any_cast<double>(val);}
        if("alphaWeight"==(*_i)->name){alphaWeight = boost::any_cast<double>(val);}
        if("dynObjWeight"==(*_i)->name){dynObjWeight = boost::any_cast<double>(val);}
        if("trafficLightWeight"==(*_i)->name){trafficLightWeight = boost::any_cast<double>(val);}
        if("pathRef"==(*_i)->name){pathRef = boost::any_cast<double>(val);}
        if("jerkRef"==(*_i)->name){jerkRef = boost::any_cast<double>(val);}
        if("alphaRef"==(*_i)->name){alphaRef = boost::any_cast<double>(val);}
        if("dynObjRef"==(*_i)->name){dynObjRef = boost::any_cast<double>(val);}
        if("trafficLightRef"==(*_i)->name){trafficLightRef = boost::any_cast<double>(val);}
        if("deviationMaxV"==(*_i)->name){deviationMaxV = boost::any_cast<double>(val);}
        if("deviationMaxA"==(*_i)->name){deviationMaxA = boost::any_cast<double>(val);}
        if("deviationMaxY"==(*_i)->name){deviationMaxY = boost::any_cast<double>(val);}
        if("deviationMaxYaw"==(*_i)->name){deviationMaxYaw = boost::any_cast<double>(val);}
        if("deviationMaxDelta"==(*_i)->name){deviationMaxDelta = boost::any_cast<double>(val);}
        if("objectiveTolerance"==(*_i)->name){objectiveTolerance = boost::any_cast<double>(val);}
        if("printSummary"==(*_i)->name){printSummary = boost::any_cast<bool>(val);}
      }
    }

    int mainFrequency;
int mpcIterations;
int targetVelocity;
double aCurvRefVel;
double aGradRefVel;
double velocityWeight;
double pathWeight;
double yawWeight;
double jerkWeight;
double alphaWeight;
double dynObjWeight;
double trafficLightWeight;
double pathRef;
double jerkRef;
double alphaRef;
double dynObjRef;
double trafficLightRef;
double deviationMaxV;
double deviationMaxA;
double deviationMaxY;
double deviationMaxYaw;
double deviationMaxDelta;
double objectiveTolerance;
bool printSummary;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int mainFrequency;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int mpcIterations;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int targetVelocity;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double aCurvRefVel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double aGradRefVel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double velocityWeight;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pathWeight;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double yawWeight;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double jerkWeight;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double alphaWeight;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double dynObjWeight;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double trafficLightWeight;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pathRef;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double jerkRef;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double alphaRef;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double dynObjRef;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double trafficLightRef;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double deviationMaxV;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double deviationMaxA;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double deviationMaxY;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double deviationMaxYaw;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double deviationMaxDelta;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double objectiveTolerance;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool printSummary;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("trajectory_plannerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const trajectory_plannerConfig &__max__ = __getMax__();
      const trajectory_plannerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const trajectory_plannerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const trajectory_plannerConfig &__getDefault__();
    static const trajectory_plannerConfig &__getMax__();
    static const trajectory_plannerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const trajectory_plannerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void trajectory_plannerConfig::ParamDescription<std::string>::clamp(trajectory_plannerConfig &config, const trajectory_plannerConfig &max, const trajectory_plannerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class trajectory_plannerConfigStatics
  {
    friend class trajectory_plannerConfig;

    trajectory_plannerConfigStatics()
    {
trajectory_plannerConfig::GroupDescription<trajectory_plannerConfig::DEFAULT, trajectory_plannerConfig> Default("Default", "", 0, 0, true, &trajectory_plannerConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.mainFrequency = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.mainFrequency = 10;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.mainFrequency = 5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<int>("mainFrequency", "int", 0, "Frequency in which the MPC is to be run (1/s)", "", &trajectory_plannerConfig::mainFrequency)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<int>("mainFrequency", "int", 0, "Frequency in which the MPC is to be run (1/s)", "", &trajectory_plannerConfig::mainFrequency)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.mpcIterations = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.mpcIterations = 30;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.mpcIterations = 8;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<int>("mpcIterations", "int", 0, "Number of MPC iterations to run when called with the main frequency", "", &trajectory_plannerConfig::mpcIterations)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<int>("mpcIterations", "int", 0, "Number of MPC iterations to run when called with the main frequency", "", &trajectory_plannerConfig::mpcIterations)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.targetVelocity = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.targetVelocity = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.targetVelocity = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<int>("targetVelocity", "int", 0, "Velocity to drive with (km/h)", "", &trajectory_plannerConfig::targetVelocity)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<int>("targetVelocity", "int", 0, "Velocity to drive with (km/h)", "", &trajectory_plannerConfig::targetVelocity)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.aCurvRefVel = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.aCurvRefVel = 30.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.aCurvRefVel = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("aCurvRefVel", "double", 0, "Max lateral acceleration when interpolating velocity samples (m/s^2)", "", &trajectory_plannerConfig::aCurvRefVel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("aCurvRefVel", "double", 0, "Max lateral acceleration when interpolating velocity samples (m/s^2)", "", &trajectory_plannerConfig::aCurvRefVel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.aGradRefVel = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.aGradRefVel = 30.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.aGradRefVel = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("aGradRefVel", "double", 0, "Max longitudinal acceleration when interpolating velocity samples (m/s^2)", "", &trajectory_plannerConfig::aGradRefVel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("aGradRefVel", "double", 0, "Max longitudinal acceleration when interpolating velocity samples (m/s^2)", "", &trajectory_plannerConfig::aGradRefVel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.velocityWeight = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.velocityWeight = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.velocityWeight = 3.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("velocityWeight", "double", 0, "Weighting factor for velocity deviation cost", "", &trajectory_plannerConfig::velocityWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("velocityWeight", "double", 0, "Weighting factor for velocity deviation cost", "", &trajectory_plannerConfig::velocityWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pathWeight = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pathWeight = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pathWeight = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("pathWeight", "double", 0, "Weighting factor for path deviation cost", "", &trajectory_plannerConfig::pathWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("pathWeight", "double", 0, "Weighting factor for path deviation cost", "", &trajectory_plannerConfig::pathWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.yawWeight = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.yawWeight = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.yawWeight = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("yawWeight", "double", 0, "Weighting factor for terminal yaw deviation cost", "", &trajectory_plannerConfig::yawWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("yawWeight", "double", 0, "Weighting factor for terminal yaw deviation cost", "", &trajectory_plannerConfig::yawWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.jerkWeight = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.jerkWeight = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.jerkWeight = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("jerkWeight", "double", 0, "Weighting factor for jerk cost", "", &trajectory_plannerConfig::jerkWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("jerkWeight", "double", 0, "Weighting factor for jerk cost", "", &trajectory_plannerConfig::jerkWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.alphaWeight = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.alphaWeight = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.alphaWeight = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("alphaWeight", "double", 0, "Weighting factor for steering rate cost", "", &trajectory_plannerConfig::alphaWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("alphaWeight", "double", 0, "Weighting factor for steering rate cost", "", &trajectory_plannerConfig::alphaWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.dynObjWeight = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.dynObjWeight = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.dynObjWeight = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("dynObjWeight", "double", 0, "Weighting factor for dynamic object cost", "", &trajectory_plannerConfig::dynObjWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("dynObjWeight", "double", 0, "Weighting factor for dynamic object cost", "", &trajectory_plannerConfig::dynObjWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trafficLightWeight = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trafficLightWeight = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trafficLightWeight = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("trafficLightWeight", "double", 0, "Weighting factor for traffic light", "", &trajectory_plannerConfig::trafficLightWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("trafficLightWeight", "double", 0, "Weighting factor for traffic light", "", &trajectory_plannerConfig::trafficLightWeight)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pathRef = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pathRef = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pathRef = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("pathRef", "double", 0, "Tolerated distance to reference path [m]", "", &trajectory_plannerConfig::pathRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("pathRef", "double", 0, "Tolerated distance to reference path [m]", "", &trajectory_plannerConfig::pathRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.jerkRef = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.jerkRef = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.jerkRef = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("jerkRef", "double", 0, "Ref jerk [m/s^3]", "", &trajectory_plannerConfig::jerkRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("jerkRef", "double", 0, "Ref jerk [m/s^3]", "", &trajectory_plannerConfig::jerkRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.alphaRef = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.alphaRef = 60.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.alphaRef = 30.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("alphaRef", "double", 0, "Ref alpha [deg/s]", "", &trajectory_plannerConfig::alphaRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("alphaRef", "double", 0, "Ref alpha [deg/s]", "", &trajectory_plannerConfig::alphaRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.dynObjRef = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.dynObjRef = 50.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.dynObjRef = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("dynObjRef", "double", 0, "Target distance to dynamic object [m]", "", &trajectory_plannerConfig::dynObjRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("dynObjRef", "double", 0, "Target distance to dynamic object [m]", "", &trajectory_plannerConfig::dynObjRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trafficLightRef = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trafficLightRef = 50.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trafficLightRef = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("trafficLightRef", "double", 0, "Target distance to traffic light [m]", "", &trajectory_plannerConfig::trafficLightRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("trafficLightRef", "double", 0, "Target distance to traffic light [m]", "", &trajectory_plannerConfig::trafficLightRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.deviationMaxV = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.deviationMaxV = 30.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.deviationMaxV = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxV", "double", 0, "Limit for velocity deviation before resetting MPC (km/h)", "", &trajectory_plannerConfig::deviationMaxV)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxV", "double", 0, "Limit for velocity deviation before resetting MPC (km/h)", "", &trajectory_plannerConfig::deviationMaxV)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.deviationMaxA = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.deviationMaxA = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.deviationMaxA = 3.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxA", "double", 0, "Limit for acceleration deviation before resetting MPC (m/s^2)", "", &trajectory_plannerConfig::deviationMaxA)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxA", "double", 0, "Limit for acceleration deviation before resetting MPC (m/s^2)", "", &trajectory_plannerConfig::deviationMaxA)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.deviationMaxY = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.deviationMaxY = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.deviationMaxY = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxY", "double", 0, "Limit for Y deviation before resetting MPC (m)", "", &trajectory_plannerConfig::deviationMaxY)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxY", "double", 0, "Limit for Y deviation before resetting MPC (m)", "", &trajectory_plannerConfig::deviationMaxY)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.deviationMaxYaw = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.deviationMaxYaw = 180.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.deviationMaxYaw = 30.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxYaw", "double", 0, "Limit for yaw deviation before resetting MPC (degree)", "", &trajectory_plannerConfig::deviationMaxYaw)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxYaw", "double", 0, "Limit for yaw deviation before resetting MPC (degree)", "", &trajectory_plannerConfig::deviationMaxYaw)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.deviationMaxDelta = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.deviationMaxDelta = 180.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.deviationMaxDelta = 30.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxDelta", "double", 0, "Limit for steering angle deviation before resetting MPC (degree)", "", &trajectory_plannerConfig::deviationMaxDelta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("deviationMaxDelta", "double", 0, "Limit for steering angle deviation before resetting MPC (degree)", "", &trajectory_plannerConfig::deviationMaxDelta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.objectiveTolerance = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.objectiveTolerance = 10000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.objectiveTolerance = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("objectiveTolerance", "double", 0, "Maximum cost value before marking trajectory invalid", "", &trajectory_plannerConfig::objectiveTolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<double>("objectiveTolerance", "double", 0, "Maximum cost value before marking trajectory invalid", "", &trajectory_plannerConfig::objectiveTolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.printSummary = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.printSummary = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.printSummary = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<bool>("printSummary", "bool", 0, "Print out a solver summary after each MPC run", "", &trajectory_plannerConfig::printSummary)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(trajectory_plannerConfig::AbstractParamDescriptionConstPtr(new trajectory_plannerConfig::ParamDescription<bool>("printSummary", "bool", 0, "Print out a solver summary after each MPC run", "", &trajectory_plannerConfig::printSummary)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(trajectory_plannerConfig::AbstractGroupDescriptionConstPtr(new trajectory_plannerConfig::GroupDescription<trajectory_plannerConfig::DEFAULT, trajectory_plannerConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<trajectory_plannerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<trajectory_plannerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<trajectory_plannerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    trajectory_plannerConfig __max__;
    trajectory_plannerConfig __min__;
    trajectory_plannerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const trajectory_plannerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static trajectory_plannerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &trajectory_plannerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const trajectory_plannerConfig &trajectory_plannerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const trajectory_plannerConfig &trajectory_plannerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const trajectory_plannerConfig &trajectory_plannerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<trajectory_plannerConfig::AbstractParamDescriptionConstPtr> &trajectory_plannerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<trajectory_plannerConfig::AbstractGroupDescriptionConstPtr> &trajectory_plannerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const trajectory_plannerConfigStatics *trajectory_plannerConfig::__get_statics__()
  {
    const static trajectory_plannerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = trajectory_plannerConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __TRAJECTORY_PLANNERRECONFIGURATOR_H__
